using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Sys_Sols_Inventory.Stock_Report
{
    class stockClass
    {
        public DataTable StockOnDate(DateTime dateTime)
        {
            string query = @"SELECT        ITEM_CODE, [ITEM NAME], SUM(QUANTITY) AS QTY
FROM(SELECT        INV_SALES_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], -SUM(INV_SALES_DTL.QUANTITY * INV_SALES_DTL.UOM_QTY) AS QUANTITY, INV_SALES_HDR.DOC_DATE_GRE
FROM            INV_SALES_DTL INNER JOIN
                         INV_SALES_HDR ON INV_SALES_DTL.DOC_NO = INV_SALES_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_SALES_DTL.ITEM_CODE
WHERE(INV_SALES_DTL.DOC_TYPE IN('SAL.CSS', 'SAL.CRD')) AND(INV_SALES_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_SALES_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_SALES_DTL.DOC_TYPE, INV_SALES_HDR.DOC_DATE_GRE
                          UNION ALL
                          SELECT        INV_SALES_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], SUM(INV_SALES_DTL.QUANTITY * INV_SALES_DTL.UOM_QTY) AS QUANTITY, INV_SALES_HDR.DOC_DATE_GRE
FROM            INV_SALES_DTL INNER JOIN
                         INV_SALES_HDR ON INV_SALES_DTL.DOC_NO = INV_SALES_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_SALES_DTL.ITEM_CODE
WHERE(INV_SALES_DTL.DOC_TYPE IN('SAL.CSR', 'SAL.CDR')) AND(INV_SALES_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_SALES_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_SALES_DTL.DOC_TYPE, INV_SALES_HDR.DOC_DATE_GRE

                          UNION ALL

                          SELECT        INV_PURCHASE_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], -SUM(INV_PURCHASE_DTL.QTY_RCVD * INV_PURCHASE_DTL.UOM_QTY) AS QUANTITY, INV_PURCHASE_HDR.DOC_DATE_GRE
FROM            INV_PURCHASE_DTL INNER JOIN
                         INV_PURCHASE_HDR ON INV_PURCHASE_DTL.DOC_NO = INV_PURCHASE_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_PURCHASE_DTL.ITEM_CODE
WHERE(INV_PURCHASE_DTL.DOC_TYPE IN('LGR.PRT')) AND(INV_PURCHASE_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_PURCHASE_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_PURCHASE_DTL.DOC_TYPE, INV_PURCHASE_HDR.DOC_DATE_GRE

                          UNION ALL
                          SELECT        INV_PURCHASE_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], SUM(INV_PURCHASE_DTL.QTY_RCVD * INV_PURCHASE_DTL.UOM_QTY) AS QUANTITY, INV_PURCHASE_HDR.DOC_DATE_GRE
FROM            INV_PURCHASE_DTL INNER JOIN
                         INV_PURCHASE_HDR ON INV_PURCHASE_DTL.DOC_NO = INV_PURCHASE_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_PURCHASE_DTL.ITEM_CODE
WHERE(INV_PURCHASE_DTL.DOC_TYPE IN('LGR.CSS', 'PUR.CSS', 'PUR.CRD')) AND(INV_PURCHASE_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_PURCHASE_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_PURCHASE_DTL.DOC_TYPE, INV_PURCHASE_HDR.DOC_DATE_GRE

                          UNION ALL

                          SELECT        INV_STK_TRX_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], -SUM(INV_STK_TRX_DTL.QUANTITY * INV_STK_TRX_DTL.UOM_QTY) AS QUANTITY, INV_STK_TRX_HDR.DOC_DATE_GRE
FROM            INV_STK_TRX_DTL INNER JOIN
                         INV_STK_TRX_HDR ON INV_STK_TRX_DTL.DOC_NO = INV_STK_TRX_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_STK_TRX_DTL.ITEM_CODE
WHERE(INV_STK_TRX_DTL.DOC_TYPE IN('INV.STK.OUT')) AND(INV_STK_TRX_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_STK_TRX_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_STK_TRX_DTL.DOC_TYPE, INV_STK_TRX_HDR.DOC_DATE_GRE

                          UNION ALL
                          SELECT        INV_STK_TRX_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], SUM(INV_STK_TRX_DTL.QUANTITY * INV_STK_TRX_DTL.UOM_QTY) AS QUANTITY, INV_STK_TRX_HDR.DOC_DATE_GRE
FROM            INV_STK_TRX_DTL INNER JOIN
                         INV_STK_TRX_HDR ON INV_STK_TRX_DTL.DOC_NO = INV_STK_TRX_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_STK_TRX_DTL.ITEM_CODE
WHERE(INV_STK_TRX_DTL.DOC_TYPE IN('INV.STK.IN', 'INV.STK.OPN')) AND(INV_STK_TRX_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_STK_TRX_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_STK_TRX_DTL.DOC_TYPE, INV_STK_TRX_HDR.DOC_DATE_GRE
                          ) AS STOCK GROUP BY ITEM_CODE,[ITEM NAME] ORDER BY ITEM_CODE";
            Dictionary<string, object> Parameter = new Dictionary<string, object>();
            Parameter.Add("@d1", dateTime);
            return Model.DbFunctions.GetDataTable(query, Parameter);

        }

        public DataTable StockOnDate_value(DateTime dateTime)
        {
            string query = @"SELECT        ITEM_CODE, [ITEM NAME], SUM(QUANTITY) AS QTY
FROM(SELECT        INV_SALES_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], -SUM(INV_SALES_DTL.QUANTITY * INV_SALES_DTL.UOM_QTY) AS QUANTITY, INV_SALES_HDR.DOC_DATE_GRE
FROM            INV_SALES_DTL INNER JOIN
                         INV_SALES_HDR ON INV_SALES_DTL.DOC_NO = INV_SALES_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_SALES_DTL.ITEM_CODE
WHERE(INV_SALES_DTL.DOC_TYPE IN('SAL.CSS', 'SAL.CRD')) AND(INV_SALES_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_SALES_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_SALES_DTL.DOC_TYPE, INV_SALES_HDR.DOC_DATE_GRE
                          UNION ALL
                          SELECT        INV_SALES_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], SUM(INV_SALES_DTL.QUANTITY * INV_SALES_DTL.UOM_QTY) AS QUANTITY, INV_SALES_HDR.DOC_DATE_GRE
FROM            INV_SALES_DTL INNER JOIN
                         INV_SALES_HDR ON INV_SALES_DTL.DOC_NO = INV_SALES_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_SALES_DTL.ITEM_CODE
WHERE(INV_SALES_DTL.DOC_TYPE IN('SAL.CSR', 'SAL.CDR')) AND(INV_SALES_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_SALES_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_SALES_DTL.DOC_TYPE, INV_SALES_HDR.DOC_DATE_GRE

                          UNION ALL

                          SELECT        INV_PURCHASE_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], -SUM(INV_PURCHASE_DTL.QTY_RCVD * INV_PURCHASE_DTL.UOM_QTY) AS QUANTITY, INV_PURCHASE_HDR.DOC_DATE_GRE
FROM            INV_PURCHASE_DTL INNER JOIN
                         INV_PURCHASE_HDR ON INV_PURCHASE_DTL.DOC_NO = INV_PURCHASE_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_PURCHASE_DTL.ITEM_CODE
WHERE(INV_PURCHASE_DTL.DOC_TYPE IN('LGR.PRT')) AND(INV_PURCHASE_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_PURCHASE_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_PURCHASE_DTL.DOC_TYPE, INV_PURCHASE_HDR.DOC_DATE_GRE

                          UNION ALL
                          SELECT        INV_PURCHASE_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], SUM(INV_PURCHASE_DTL.QTY_RCVD * INV_PURCHASE_DTL.UOM_QTY) AS QUANTITY, INV_PURCHASE_HDR.DOC_DATE_GRE
FROM            INV_PURCHASE_DTL INNER JOIN
                         INV_PURCHASE_HDR ON INV_PURCHASE_DTL.DOC_NO = INV_PURCHASE_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_PURCHASE_DTL.ITEM_CODE
WHERE(INV_PURCHASE_DTL.DOC_TYPE IN('LGR.CSS', 'PUR.CSS', 'PUR.CRD')) AND(INV_PURCHASE_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_PURCHASE_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_PURCHASE_DTL.DOC_TYPE, INV_PURCHASE_HDR.DOC_DATE_GRE

                          UNION ALL

                          SELECT        INV_STK_TRX_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], -SUM(INV_STK_TRX_DTL.QUANTITY * INV_STK_TRX_DTL.UOM_QTY) AS QUANTITY, INV_STK_TRX_HDR.DOC_DATE_GRE
FROM            INV_STK_TRX_DTL INNER JOIN
                         INV_STK_TRX_HDR ON INV_STK_TRX_DTL.DOC_NO = INV_STK_TRX_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_STK_TRX_DTL.ITEM_CODE
WHERE(INV_STK_TRX_DTL.DOC_TYPE IN('INV.STK.OUT')) AND(INV_STK_TRX_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_STK_TRX_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_STK_TRX_DTL.DOC_TYPE, INV_STK_TRX_HDR.DOC_DATE_GRE

                          UNION ALL
                          SELECT        INV_STK_TRX_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG AS[ITEM NAME], SUM(INV_STK_TRX_DTL.QUANTITY * INV_STK_TRX_DTL.UOM_QTY) AS QUANTITY, INV_STK_TRX_HDR.DOC_DATE_GRE
FROM            INV_STK_TRX_DTL INNER JOIN
                         INV_STK_TRX_HDR ON INV_STK_TRX_DTL.DOC_NO = INV_STK_TRX_HDR.DOC_NO LEFT OUTER JOIN
                         INV_ITEM_DIRECTORY ON INV_ITEM_DIRECTORY.CODE = INV_STK_TRX_DTL.ITEM_CODE
WHERE(INV_STK_TRX_DTL.DOC_TYPE IN('INV.STK.IN', 'INV.STK.OPN')) AND(INV_STK_TRX_HDR.DOC_DATE_GRE <= CONVERT(DATETIME, @d1, 102))
GROUP BY INV_STK_TRX_DTL.ITEM_CODE, INV_ITEM_DIRECTORY.DESC_ENG, INV_STK_TRX_DTL.DOC_TYPE, INV_STK_TRX_HDR.DOC_DATE_GRE
                          ) AS STOCK  GROUP BY ITEM_CODE,[ITEM NAME] HAVING SUM(QUANTITY)>0 ORDER BY ITEM_CODE";
            Dictionary<string, object> Parameter = new Dictionary<string, object>();
            Parameter.Add("@d1", dateTime);
            return Model.DbFunctions.GetDataTable(query, Parameter);

        }
    }
}
