//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Sys_Sols_Inventory.reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("NewPurchase")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NewPurchase : global::System.Data.DataSet {
        
        private DataTable1DataTable tableDataTable1;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public NewPurchase() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected NewPurchase(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable1DataTable DataTable1 {
            get {
                return this.tableDataTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            NewPurchase cln = ((NewPurchase)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableDataTable1 = ((DataTable1DataTable)(base.Tables["DataTable1"]));
            if ((initTable == true)) {
                if ((this.tableDataTable1 != null)) {
                    this.tableDataTable1.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "NewPurchase";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/NewPurchase.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTable1 = new DataTable1DataTable();
            base.Tables.Add(this.tableDataTable1);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeDataTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            NewPurchase ds = new NewPurchase();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void DataTable1RowChangeEventHandler(object sender, DataTable1RowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable1DataTable : global::System.Data.TypedTableBase<DataTable1Row> {
            
            private global::System.Data.DataColumn columnITEM_CODE;
            
            private global::System.Data.DataColumn columnITEM_DESC_ENG;
            
            private global::System.Data.DataColumn columnTypeName;
            
            private global::System.Data.DataColumn columnGroupName;
            
            private global::System.Data.DataColumn columnCategoryName;
            
            private global::System.Data.DataColumn columnTMName;
            
            private global::System.Data.DataColumn columnUnitName;
            
            private global::System.Data.DataColumn columnDocumentname;
            
            private global::System.Data.DataColumn columnDocno;
            
            private global::System.Data.DataColumn columnPurchaseDate;
            
            private global::System.Data.DataColumn columnSupplier;
            
            private global::System.Data.DataColumn columnTaxTotal;
            
            private global::System.Data.DataColumn columnInvoice;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnGrossTotal;
            
            private global::System.Data.DataColumn columnITEM_TAX;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataTable1DataTable() {
                this.TableName = "DataTable1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DataTable1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected DataTable1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ITEM_CODEColumn {
                get {
                    return this.columnITEM_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ITEM_DESC_ENGColumn {
                get {
                    return this.columnITEM_DESC_ENG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GroupNameColumn {
                get {
                    return this.columnGroupName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CategoryNameColumn {
                get {
                    return this.columnCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TMNameColumn {
                get {
                    return this.columnTMName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn UnitNameColumn {
                get {
                    return this.columnUnitName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DocumentnameColumn {
                get {
                    return this.columnDocumentname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DocnoColumn {
                get {
                    return this.columnDocno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PurchaseDateColumn {
                get {
                    return this.columnPurchaseDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn SupplierColumn {
                get {
                    return this.columnSupplier;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TaxTotalColumn {
                get {
                    return this.columnTaxTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn InvoiceColumn {
                get {
                    return this.columnInvoice;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GrossTotalColumn {
                get {
                    return this.columnGrossTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ITEM_TAXColumn {
                get {
                    return this.columnITEM_TAX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataTable1Row this[int index] {
                get {
                    return ((DataTable1Row)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataTable1RowChangeEventHandler DataTable1RowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataTable1RowChangeEventHandler DataTable1RowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataTable1RowChangeEventHandler DataTable1RowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event DataTable1RowChangeEventHandler DataTable1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddDataTable1Row(DataTable1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataTable1Row AddDataTable1Row(string ITEM_CODE, string ITEM_DESC_ENG, string TypeName, string GroupName, string CategoryName, string TMName, string UnitName, string Documentname, string Docno, string PurchaseDate, string Supplier, decimal TaxTotal, double Quantity, double GrossTotal, decimal ITEM_TAX) {
                DataTable1Row rowDataTable1Row = ((DataTable1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ITEM_CODE,
                        ITEM_DESC_ENG,
                        TypeName,
                        GroupName,
                        CategoryName,
                        TMName,
                        UnitName,
                        Documentname,
                        Docno,
                        PurchaseDate,
                        Supplier,
                        TaxTotal,
                        null,
                        Quantity,
                        GrossTotal,
                        ITEM_TAX};
                rowDataTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable1Row);
                return rowDataTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                DataTable1DataTable cln = ((DataTable1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnITEM_CODE = base.Columns["ITEM_CODE"];
                this.columnITEM_DESC_ENG = base.Columns["ITEM_DESC_ENG"];
                this.columnTypeName = base.Columns["TypeName"];
                this.columnGroupName = base.Columns["GroupName"];
                this.columnCategoryName = base.Columns["CategoryName"];
                this.columnTMName = base.Columns["TMName"];
                this.columnUnitName = base.Columns["UnitName"];
                this.columnDocumentname = base.Columns["Documentname"];
                this.columnDocno = base.Columns["Docno"];
                this.columnPurchaseDate = base.Columns["PurchaseDate"];
                this.columnSupplier = base.Columns["Supplier"];
                this.columnTaxTotal = base.Columns["TaxTotal"];
                this.columnInvoice = base.Columns["Invoice"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnGrossTotal = base.Columns["GrossTotal"];
                this.columnITEM_TAX = base.Columns["ITEM_TAX"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnITEM_CODE = new global::System.Data.DataColumn("ITEM_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_CODE);
                this.columnITEM_DESC_ENG = new global::System.Data.DataColumn("ITEM_DESC_ENG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_DESC_ENG);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.columnGroupName = new global::System.Data.DataColumn("GroupName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupName);
                this.columnCategoryName = new global::System.Data.DataColumn("CategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryName);
                this.columnTMName = new global::System.Data.DataColumn("TMName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTMName);
                this.columnUnitName = new global::System.Data.DataColumn("UnitName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitName);
                this.columnDocumentname = new global::System.Data.DataColumn("Documentname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentname);
                this.columnDocno = new global::System.Data.DataColumn("Docno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocno);
                this.columnPurchaseDate = new global::System.Data.DataColumn("PurchaseDate", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchaseDate);
                this.columnSupplier = new global::System.Data.DataColumn("Supplier", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplier);
                this.columnTaxTotal = new global::System.Data.DataColumn("TaxTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxTotal);
                this.columnInvoice = new global::System.Data.DataColumn("Invoice", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoice);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnGrossTotal = new global::System.Data.DataColumn("GrossTotal", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossTotal);
                this.columnITEM_TAX = new global::System.Data.DataColumn("ITEM_TAX", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_TAX);
                this.columnITEM_CODE.MaxLength = 20;
                this.columnITEM_DESC_ENG.MaxLength = 50;
                this.columnTypeName.MaxLength = 50;
                this.columnGroupName.MaxLength = 50;
                this.columnCategoryName.MaxLength = 50;
                this.columnTMName.MaxLength = 50;
                this.columnUnitName.MaxLength = 50;
                this.columnDocumentname.MaxLength = 50;
                this.columnDocno.MaxLength = 10;
                this.columnPurchaseDate.ReadOnly = true;
                this.columnPurchaseDate.MaxLength = 10;
                this.columnSupplier.MaxLength = 50;
                this.columnInvoice.AutoIncrement = true;
                this.columnInvoice.AutoIncrementSeed = -1;
                this.columnInvoice.AutoIncrementStep = -1;
                this.columnInvoice.ReadOnly = true;
                this.columnQuantity.ReadOnly = true;
                this.columnGrossTotal.ReadOnly = true;
                this.columnITEM_TAX.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataTable1Row NewDataTable1Row() {
                return ((DataTable1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable1RowChanged != null)) {
                    this.DataTable1RowChanged(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable1RowChanging != null)) {
                    this.DataTable1RowChanging(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable1RowDeleted != null)) {
                    this.DataTable1RowDeleted(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable1RowDeleting != null)) {
                    this.DataTable1RowDeleting(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveDataTable1Row(DataTable1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                NewPurchase ds = new NewPurchase();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class DataTable1Row : global::System.Data.DataRow {
            
            private DataTable1DataTable tableDataTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal DataTable1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable1 = ((DataTable1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ITEM_CODE {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.ITEM_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ITEM_CODE\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ITEM_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ITEM_DESC_ENG {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.ITEM_DESC_ENGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ITEM_DESC_ENG\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ITEM_DESC_ENGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TypeName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.TypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeName\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.TypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GroupName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.GroupNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupName\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.GroupNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CategoryName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CategoryName\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TMName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.TMNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TMName\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.TMNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string UnitName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.UnitNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UnitName\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.UnitNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Documentname {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.DocumentnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Documentname\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.DocumentnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Docno {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.DocnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Docno\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.DocnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string PurchaseDate {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.PurchaseDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PurchaseDate\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.PurchaseDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Supplier {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.SupplierColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Supplier\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.SupplierColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal TaxTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.TaxTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxTotal\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.TaxTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Invoice {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.InvoiceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Invoice\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.InvoiceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double Quantity {
                get {
                    try {
                        return ((double)(this[this.tableDataTable1.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double GrossTotal {
                get {
                    try {
                        return ((double)(this[this.tableDataTable1.GrossTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossTotal\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.GrossTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ITEM_TAX {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.ITEM_TAXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ITEM_TAX\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ITEM_TAXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsITEM_CODENull() {
                return this.IsNull(this.tableDataTable1.ITEM_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetITEM_CODENull() {
                this[this.tableDataTable1.ITEM_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsITEM_DESC_ENGNull() {
                return this.IsNull(this.tableDataTable1.ITEM_DESC_ENGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetITEM_DESC_ENGNull() {
                this[this.tableDataTable1.ITEM_DESC_ENGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTypeNameNull() {
                return this.IsNull(this.tableDataTable1.TypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTypeNameNull() {
                this[this.tableDataTable1.TypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGroupNameNull() {
                return this.IsNull(this.tableDataTable1.GroupNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGroupNameNull() {
                this[this.tableDataTable1.GroupNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCategoryNameNull() {
                return this.IsNull(this.tableDataTable1.CategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCategoryNameNull() {
                this[this.tableDataTable1.CategoryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTMNameNull() {
                return this.IsNull(this.tableDataTable1.TMNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTMNameNull() {
                this[this.tableDataTable1.TMNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsUnitNameNull() {
                return this.IsNull(this.tableDataTable1.UnitNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetUnitNameNull() {
                this[this.tableDataTable1.UnitNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDocumentnameNull() {
                return this.IsNull(this.tableDataTable1.DocumentnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDocumentnameNull() {
                this[this.tableDataTable1.DocumentnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDocnoNull() {
                return this.IsNull(this.tableDataTable1.DocnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDocnoNull() {
                this[this.tableDataTable1.DocnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsPurchaseDateNull() {
                return this.IsNull(this.tableDataTable1.PurchaseDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetPurchaseDateNull() {
                this[this.tableDataTable1.PurchaseDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsSupplierNull() {
                return this.IsNull(this.tableDataTable1.SupplierColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetSupplierNull() {
                this[this.tableDataTable1.SupplierColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTaxTotalNull() {
                return this.IsNull(this.tableDataTable1.TaxTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTaxTotalNull() {
                this[this.tableDataTable1.TaxTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsInvoiceNull() {
                return this.IsNull(this.tableDataTable1.InvoiceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetInvoiceNull() {
                this[this.tableDataTable1.InvoiceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableDataTable1.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetQuantityNull() {
                this[this.tableDataTable1.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGrossTotalNull() {
                return this.IsNull(this.tableDataTable1.GrossTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGrossTotalNull() {
                this[this.tableDataTable1.GrossTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsITEM_TAXNull() {
                return this.IsNull(this.tableDataTable1.ITEM_TAXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetITEM_TAXNull() {
                this[this.tableDataTable1.ITEM_TAXColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class DataTable1RowChangeEvent : global::System.EventArgs {
            
            private DataTable1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataTable1RowChangeEvent(DataTable1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public DataTable1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Sys_Sols_Inventory.reports.NewPurchaseTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DataTable1TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public DataTable1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DataTable1";
            tableMapping.ColumnMappings.Add("ITEM_CODE", "ITEM_CODE");
            tableMapping.ColumnMappings.Add("ITEM_DESC_ENG", "ITEM_DESC_ENG");
            tableMapping.ColumnMappings.Add("TypeName", "TypeName");
            tableMapping.ColumnMappings.Add("GroupName", "GroupName");
            tableMapping.ColumnMappings.Add("CategoryName", "CategoryName");
            tableMapping.ColumnMappings.Add("TMName", "TMName");
            tableMapping.ColumnMappings.Add("UnitName", "UnitName");
            tableMapping.ColumnMappings.Add("Documentname", "Documentname");
            tableMapping.ColumnMappings.Add("Docno", "Docno");
            tableMapping.ColumnMappings.Add("PurchaseDate", "PurchaseDate");
            tableMapping.ColumnMappings.Add("Supplier", "Supplier");
            tableMapping.ColumnMappings.Add("TaxTotal", "TaxTotal");
            tableMapping.ColumnMappings.Add("Invoice", "Invoice");
            tableMapping.ColumnMappings.Add("Quantity", "Quantity");
            tableMapping.ColumnMappings.Add("GrossTotal", "GrossTotal");
            tableMapping.ColumnMappings.Add("ITEM_TAX", "ITEM_TAX");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Sys_Sols_Inventory.Properties.Settings.Default.SYSBIZZConnectionString5;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[5];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        Docno, Invoice, CONVERT(varchar(10), date, 103) AS PurchaseDate, IT" +
                "EM_CODE, ITEM_DESC_ENG, TypeName, GroupName, CategoryName, TMName, UnitName, \r\n " +
                "                        TaxTotal * - 1 AS TaxTotal, Documentname, CONVERT(FLOAT," +
                " Quantity * - 1) AS Quantity, CONVERT(FLOAT, GrossTotal * - 1) AS GrossTotal, Su" +
                "pplier, ITEM_TAX\r\nFROM            (SELECT        INV_PURCHASE_HDR.DOC_NO AS Docn" +
                "o, INV_PURCHASE_HDR.DOC_ID AS Invoice, INV_PURCHASE_HDR.DOC_DATE_GRE AS date, \r\n" +
                "                                                    INV_PURCHASE_DTL.ITEM_CODE, " +
                "ISNULL(PAY_SUPPLIER.CODE, N\'\') AS Suppliercode, SYS_DOC_TYPE.DESC_ENG AS Documen" +
                "tname, \r\n                                                    INV_PURCHASE_HDR.DO" +
                "C_TYPE, INV_PURCHASE_DTL.ITEM_DESC_ENG, INV_ITEM_DIRECTORY.[GROUP], \r\n          " +
                "                                          INV_ITEM_GROUP.DESC_ENG AS GroupName, " +
                "INV_ITEM_DIRECTORY.TYPE, INV_ITEM_TYPE.DESC_ENG AS TypeName, \r\n                 " +
                "                                   INV_ITEM_DIRECTORY.CATEGORY, INV_ITEM_CATEGOR" +
                "Y.DESC_ENG AS CategoryName, INV_ITEM_DIRECTORY.TRADEMARK, \r\n                    " +
                "                                INV_ITEM_TM.DESC_ENG AS TMName, INV_PURCHASE_DTL" +
                ".UOM, INV_UNIT.DESC_ENG AS UnitName, SUM(INV_PURCHASE_DTL.QTY_RCVD) \r\n          " +
                "                                          AS Quantity, SUM(INV_PURCHASE_DTL.ITEM" +
                "_GROSS) AS GrossTotal, INV_PURCHASE_HDR.TAX_TOTAL AS TaxTotal, \r\n               " +
                "                                     PAY_SUPPLIER.DESC_ENG AS Supplier, INV_PURC" +
                "HASE_DTL.ITEM_TAX\r\n                          FROM            INV_PURCHASE_HDR LE" +
                "FT OUTER JOIN\r\n                                                    INV_PURCHASE_" +
                "DTL ON INV_PURCHASE_HDR.DOC_NO = INV_PURCHASE_DTL.DOC_NO LEFT OUTER JOIN\r\n      " +
                "                                              INV_ITEM_DIRECTORY ON INV_PURCHASE" +
                "_DTL.ITEM_CODE = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n                      " +
                "                              PAY_SUPPLIER ON INV_PURCHASE_HDR.SUPPLIER_CODE = P" +
                "AY_SUPPLIER.CODE LEFT OUTER JOIN\r\n                                              " +
                "      SYS_DOC_TYPE ON INV_PURCHASE_HDR.DOC_TYPE = SYS_DOC_TYPE.CODE LEFT OUTER J" +
                "OIN\r\n                                                    INV_ITEM_CATEGORY ON IN" +
                "V_ITEM_CATEGORY.CODE = INV_ITEM_DIRECTORY.CATEGORY LEFT OUTER JOIN\r\n            " +
                "                                        INV_ITEM_GROUP ON INV_ITEM_DIRECTORY.[GR" +
                "OUP] = INV_ITEM_GROUP.CODE LEFT OUTER JOIN\r\n                                    " +
                "                INV_ITEM_TYPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TYPE.CODE LE" +
                "FT OUTER JOIN\r\n                                                    INV_ITEM_TM O" +
                "N INV_ITEM_DIRECTORY.TRADEMARK = INV_ITEM_TM.CODE LEFT OUTER JOIN\r\n             " +
                "                                       INV_UNIT ON INV_PURCHASE_DTL.UOM = INV_UN" +
                "IT.CODE\r\n                          WHERE        (INV_ITEM_DIRECTORY.[GROUP] LIKE" +
                " \'%\' + @group + \'%\') AND (INV_ITEM_DIRECTORY.TYPE LIKE \'%\' + @type + \'%\') AND \r\n" +
                "                                                    (INV_ITEM_DIRECTORY.CATEGORY" +
                " LIKE \'%\' + @category + \'%\') AND (INV_ITEM_DIRECTORY.TRADEMARK LIKE \'%\' + @trade" +
                "mark + \'%\') AND \r\n                                                    (INV_PURCH" +
                "ASE_HDR.DOC_TYPE = \'LGR.PRT\') AND (INV_PURCHASE_DTL.FLAGDEL = \'True\') AND (INV_P" +
                "URCHASE_HDR.FLAGDEL = \'True\') AND \r\n                                            " +
                "        (INV_PURCHASE_HDR.PUR_TYPE LIKE \'%\' + @BillType + \'%\') AND (INV_PURCHASE" +
                "_DTL.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\')\r\n                          GROUP BY I" +
                "NV_PURCHASE_DTL.ITEM_CODE, PAY_SUPPLIER.CODE, SYS_DOC_TYPE.DESC_ENG, INV_PURCHAS" +
                "E_HDR.DOC_TYPE, \r\n                                                    INV_PURCHA" +
                "SE_HDR.TAX_TOTAL, INV_PURCHASE_DTL.ITEM_DESC_ENG, INV_ITEM_DIRECTORY.[GROUP], IN" +
                "V_ITEM_GROUP.DESC_ENG, \r\n                                                    INV" +
                "_PURCHASE_HDR.DOC_ID, INV_ITEM_DIRECTORY.TYPE, INV_ITEM_TYPE.DESC_ENG, INV_ITEM_" +
                "DIRECTORY.CATEGORY, \r\n                                                    INV_IT" +
                "EM_CATEGORY.DESC_ENG, INV_ITEM_DIRECTORY.TRADEMARK, INV_ITEM_TM.DESC_ENG, INV_PU" +
                "RCHASE_DTL.UOM, INV_UNIT.DESC_ENG, \r\n                                           " +
                "         INV_PURCHASE_HDR.DOC_NO, INV_PURCHASE_HDR.DOC_DATE_GRE, PAY_SUPPLIER.DE" +
                "SC_ENG, INV_PURCHASE_DTL.ITEM_TAX) \r\n                         AS Purchase\r\nUNION" +
                " ALL\r\nSELECT        Docno, Invoice, CONVERT(varchar(10), date, 103) AS PurchaseD" +
                "ate, ITEM_CODE, ITEM_DESC_ENG, TypeName, GroupName, CategoryName, TMName, UnitNa" +
                "me, \r\n                         TaxTotal, Documentname, CONVERT(FLOAT, Quantity) " +
                "AS Quantity, CONVERT(FLOAT, GrossTotal) AS GrossTotal, Supplier, ITEM_TAX\r\nFROM " +
                "           (SELECT        INV_PURCHASE_HDR_1.DOC_NO AS Docno, INV_PURCHASE_HDR_1" +
                ".DOC_ID AS Invoice, INV_PURCHASE_HDR_1.DOC_DATE_GRE AS date, \r\n                 " +
                "                                   INV_PURCHASE_DTL_1.ITEM_CODE, ISNULL(PAY_SUPP" +
                "LIER_1.CODE, N\'\') AS Suppliercode, SYS_DOC_TYPE_1.DESC_ENG AS Documentname, \r\n  " +
                "                                                  INV_PURCHASE_HDR_1.DOC_TYPE, I" +
                "NV_PURCHASE_DTL_1.ITEM_DESC_ENG, INV_ITEM_DIRECTORY_1.[GROUP], \r\n               " +
                "                                     INV_ITEM_GROUP_1.DESC_ENG AS GroupName, INV" +
                "_ITEM_DIRECTORY_1.TYPE, INV_ITEM_TYPE_1.DESC_ENG AS TypeName, \r\n                " +
                "                                    INV_ITEM_DIRECTORY_1.CATEGORY, INV_ITEM_CATE" +
                "GORY_1.DESC_ENG AS CategoryName, INV_ITEM_DIRECTORY_1.TRADEMARK, \r\n             " +
                "                                       INV_ITEM_TM_1.DESC_ENG AS TMName, INV_PUR" +
                "CHASE_DTL_1.UOM, INV_UNIT_1.DESC_ENG AS UnitName, \r\n                            " +
                "                        SUM(INV_PURCHASE_DTL_1.QTY_RCVD) AS Quantity, SUM(INV_PU" +
                "RCHASE_DTL_1.ITEM_GROSS) AS GrossTotal, \r\n                                      " +
                "              INV_PURCHASE_HDR_1.TAX_TOTAL AS TaxTotal, PAY_SUPPLIER_1.DESC_ENG " +
                "AS Supplier, INV_PURCHASE_DTL_1.ITEM_TAX\r\n                          FROM        " +
                "    INV_PURCHASE_HDR AS INV_PURCHASE_HDR_1 LEFT OUTER JOIN\r\n                    " +
                "                                INV_PURCHASE_DTL AS INV_PURCHASE_DTL_1 ON INV_PU" +
                "RCHASE_HDR_1.DOC_NO = INV_PURCHASE_DTL_1.DOC_NO LEFT OUTER JOIN\r\n               " +
                "                                     INV_ITEM_DIRECTORY AS INV_ITEM_DIRECTORY_1 " +
                "ON INV_PURCHASE_DTL_1.ITEM_CODE = INV_ITEM_DIRECTORY_1.CODE LEFT OUTER JOIN\r\n   " +
                "                                                 PAY_SUPPLIER AS PAY_SUPPLIER_1 " +
                "ON INV_PURCHASE_HDR_1.SUPPLIER_CODE = PAY_SUPPLIER_1.CODE LEFT OUTER JOIN\r\n     " +
                "                                               SYS_DOC_TYPE AS SYS_DOC_TYPE_1 ON" +
                " INV_PURCHASE_HDR_1.DOC_TYPE = SYS_DOC_TYPE_1.CODE LEFT OUTER JOIN\r\n            " +
                "                                        INV_ITEM_CATEGORY AS INV_ITEM_CATEGORY_1" +
                " ON INV_ITEM_CATEGORY_1.CODE = INV_ITEM_DIRECTORY_1.CATEGORY LEFT OUTER JOIN\r\n  " +
                "                                                  INV_ITEM_GROUP AS INV_ITEM_GRO" +
                "UP_1 ON INV_ITEM_DIRECTORY_1.[GROUP] = INV_ITEM_GROUP_1.CODE LEFT OUTER JOIN\r\n  " +
                "                                                  INV_ITEM_TYPE AS INV_ITEM_TYPE" +
                "_1 ON INV_ITEM_DIRECTORY_1.TYPE = INV_ITEM_TYPE_1.CODE LEFT OUTER JOIN\r\n        " +
                "                                            INV_ITEM_TM AS INV_ITEM_TM_1 ON INV_" +
                "ITEM_DIRECTORY_1.TRADEMARK = INV_ITEM_TM_1.CODE LEFT OUTER JOIN\r\n               " +
                "                                     INV_UNIT AS INV_UNIT_1 ON INV_PURCHASE_DTL_" +
                "1.UOM = INV_UNIT_1.CODE\r\n                          WHERE        (INV_PURCHASE_HD" +
                "R_1.DOC_TYPE LIKE \'%\' + @doctype + \'%\') AND (INV_ITEM_DIRECTORY_1.[GROUP] LIKE \'" +
                "%\' + @group + \'%\') AND \r\n                                                    (IN" +
                "V_ITEM_DIRECTORY_1.TYPE LIKE \'%\' + @type + \'%\') AND (INV_ITEM_DIRECTORY_1.CATEGO" +
                "RY LIKE \'%\' + @category + \'%\') AND \r\n                                           " +
                "         (INV_ITEM_DIRECTORY_1.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (INV_P" +
                "URCHASE_HDR_1.DOC_TYPE IN (\'PUR.CRD\', \'PUR.CSS\')) AND \r\n                        " +
                "                            (INV_PURCHASE_DTL_1.FLAGDEL = \'True\') AND (INV_PURCH" +
                "ASE_HDR_1.FLAGDEL = \'True\') AND \r\n                                              " +
                "      (INV_PURCHASE_HDR_1.PUR_TYPE LIKE \'%\' + @BillType + \'%\') AND (INV_PURCHASE" +
                "_DTL_1.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\')\r\n                          GROUP BY" +
                " INV_PURCHASE_DTL_1.ITEM_CODE, PAY_SUPPLIER_1.CODE, SYS_DOC_TYPE_1.DESC_ENG, INV" +
                "_PURCHASE_HDR_1.DOC_TYPE, \r\n                                                    " +
                "INV_PURCHASE_HDR_1.TAX_TOTAL, INV_PURCHASE_DTL_1.ITEM_DESC_ENG, INV_ITEM_DIRECTO" +
                "RY_1.[GROUP], INV_ITEM_GROUP_1.DESC_ENG, \r\n                                     " +
                "               INV_PURCHASE_HDR_1.DOC_ID, INV_ITEM_DIRECTORY_1.TYPE, INV_ITEM_TY" +
                "PE_1.DESC_ENG, INV_ITEM_DIRECTORY_1.CATEGORY, \r\n                                " +
                "                    INV_ITEM_CATEGORY_1.DESC_ENG, INV_ITEM_DIRECTORY_1.TRADEMARK" +
                ", INV_ITEM_TM_1.DESC_ENG, INV_PURCHASE_DTL_1.UOM, \r\n                            " +
                "                        INV_UNIT_1.DESC_ENG, INV_PURCHASE_HDR_1.DOC_NO, INV_PURC" +
                "HASE_HDR_1.DOC_DATE_GRE, PAY_SUPPLIER_1.DESC_ENG, \r\n                            " +
                "                        INV_PURCHASE_DTL_1.ITEM_TAX) AS Purchase_1";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@group", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@trademark", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BillType", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@doctype", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@item", global::System.Data.SqlDbType.NVarChar, 550, global::System.Data.ParameterDirection.Input, 0, 0, "ITEM_DESC_ENG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT        Docno, Invoice, CONVERT(varchar(10), date, 103) AS PurchaseDate, IT" +
                "EM_CODE, ITEM_DESC_ENG, TypeName, GroupName, CategoryName, TMName, UnitName, \r\n " +
                "                        TaxTotal * - 1 AS TaxTotal, Documentname, CONVERT(FLOAT," +
                " Quantity * - 1) AS Quantity, CONVERT(FLOAT, GrossTotal * - 1) AS GrossTotal, Su" +
                "pplier, ITEM_TAX\r\nFROM            (SELECT        INV_PURCHASE_HDR.DOC_NO AS Docn" +
                "o, INV_PURCHASE_HDR.DOC_ID AS Invoice, INV_PURCHASE_HDR.DOC_DATE_GRE AS date, \r\n" +
                "                                                    INV_PURCHASE_DTL.ITEM_CODE, " +
                "ISNULL(PAY_SUPPLIER.CODE, N\'\') AS Suppliercode, SYS_DOC_TYPE.DESC_ENG AS Documen" +
                "tname, \r\n                                                    INV_PURCHASE_HDR.DO" +
                "C_TYPE, INV_PURCHASE_DTL.ITEM_DESC_ENG, INV_ITEM_DIRECTORY.[GROUP], \r\n          " +
                "                                          INV_ITEM_GROUP.DESC_ENG AS GroupName, " +
                "INV_ITEM_DIRECTORY.TYPE, INV_ITEM_TYPE.DESC_ENG AS TypeName, \r\n                 " +
                "                                   INV_ITEM_DIRECTORY.CATEGORY, INV_ITEM_CATEGOR" +
                "Y.DESC_ENG AS CategoryName, INV_ITEM_DIRECTORY.TRADEMARK, \r\n                    " +
                "                                INV_ITEM_TM.DESC_ENG AS TMName, INV_PURCHASE_DTL" +
                ".UOM, INV_UNIT.DESC_ENG AS UnitName, SUM(INV_PURCHASE_DTL.QTY_RCVD) \r\n          " +
                "                                          AS Quantity, SUM(INV_PURCHASE_DTL.ITEM" +
                "_GROSS) AS GrossTotal, INV_PURCHASE_HDR.TAX_TOTAL AS TaxTotal, \r\n               " +
                "                                     PAY_SUPPLIER.DESC_ENG AS Supplier, INV_PURC" +
                "HASE_DTL.ITEM_TAX\r\n                          FROM            INV_PURCHASE_HDR LE" +
                "FT OUTER JOIN\r\n                                                    INV_PURCHASE_" +
                "DTL ON INV_PURCHASE_HDR.DOC_NO = INV_PURCHASE_DTL.DOC_NO LEFT OUTER JOIN\r\n      " +
                "                                              INV_ITEM_DIRECTORY ON INV_PURCHASE" +
                "_DTL.ITEM_CODE = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n                      " +
                "                              PAY_SUPPLIER ON INV_PURCHASE_HDR.SUPPLIER_CODE = P" +
                "AY_SUPPLIER.CODE LEFT OUTER JOIN\r\n                                              " +
                "      SYS_DOC_TYPE ON INV_PURCHASE_HDR.DOC_TYPE = SYS_DOC_TYPE.CODE LEFT OUTER J" +
                "OIN\r\n                                                    INV_ITEM_CATEGORY ON IN" +
                "V_ITEM_CATEGORY.CODE = INV_ITEM_DIRECTORY.CATEGORY LEFT OUTER JOIN\r\n            " +
                "                                        INV_ITEM_GROUP ON INV_ITEM_DIRECTORY.[GR" +
                "OUP] = INV_ITEM_GROUP.CODE LEFT OUTER JOIN\r\n                                    " +
                "                INV_ITEM_TYPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TYPE.CODE LE" +
                "FT OUTER JOIN\r\n                                                    INV_ITEM_TM O" +
                "N INV_ITEM_DIRECTORY.TRADEMARK = INV_ITEM_TM.CODE LEFT OUTER JOIN\r\n             " +
                "                                       INV_UNIT ON INV_PURCHASE_DTL.UOM = INV_UN" +
                "IT.CODE\r\n                          WHERE        (PAY_SUPPLIER.CODE LIKE \'%\' + @s" +
                "up + \'%\') AND (INV_ITEM_DIRECTORY.[GROUP] LIKE \'%\' + @group + \'%\') AND \r\n       " +
                "                                             (INV_ITEM_DIRECTORY.TYPE LIKE \'%\' +" +
                " @type + \'%\') AND (INV_ITEM_DIRECTORY.CATEGORY LIKE \'%\' + @category + \'%\') AND \r" +
                "\n                                                    (INV_ITEM_DIRECTORY.TRADEMA" +
                "RK LIKE \'%\' + @trademark + \'%\') AND (INV_PURCHASE_HDR.DOC_TYPE = \'LGR.PRT\') AND " +
                "\r\n                                                    (INV_PURCHASE_DTL.FLAGDEL " +
                "= \'True\') AND (INV_PURCHASE_HDR.FLAGDEL = \'True\') AND \r\n                        " +
                "                            (INV_PURCHASE_HDR.PUR_TYPE LIKE \'%\' + @BillType + \'%" +
                "\') AND (INV_PURCHASE_DTL.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\')\r\n                " +
                "          GROUP BY INV_PURCHASE_DTL.ITEM_CODE, PAY_SUPPLIER.CODE, SYS_DOC_TYPE.D" +
                "ESC_ENG, INV_PURCHASE_HDR.DOC_TYPE, \r\n                                          " +
                "          INV_PURCHASE_HDR.TAX_TOTAL, INV_PURCHASE_DTL.ITEM_DESC_ENG, INV_ITEM_D" +
                "IRECTORY.[GROUP], INV_ITEM_GROUP.DESC_ENG, \r\n                                   " +
                "                 INV_PURCHASE_HDR.DOC_ID, INV_ITEM_DIRECTORY.TYPE, INV_ITEM_TYPE" +
                ".DESC_ENG, INV_ITEM_DIRECTORY.CATEGORY, \r\n                                      " +
                "              INV_ITEM_CATEGORY.DESC_ENG, INV_ITEM_DIRECTORY.TRADEMARK, INV_ITEM" +
                "_TM.DESC_ENG, INV_PURCHASE_DTL.UOM, INV_UNIT.DESC_ENG, \r\n                       " +
                "                             INV_PURCHASE_HDR.DOC_NO, INV_PURCHASE_HDR.DOC_DATE_" +
                "GRE, PAY_SUPPLIER.DESC_ENG, INV_PURCHASE_DTL.ITEM_TAX) \r\n                       " +
                "  AS Purchase\r\nUNION ALL\r\nSELECT        Docno, Invoice, CONVERT(varchar(10), dat" +
                "e, 103) AS PurchaseDate, ITEM_CODE, ITEM_DESC_ENG, TypeName, GroupName, Category" +
                "Name, TMName, UnitName, \r\n                         TaxTotal, Documentname, CONVE" +
                "RT(FLOAT, Quantity) AS Quantity, CONVERT(FLOAT, GrossTotal) AS GrossTotal, Suppl" +
                "ier, ITEM_TAX\r\nFROM            (SELECT        INV_PURCHASE_HDR_1.DOC_NO AS Docno" +
                ", INV_PURCHASE_HDR_1.DOC_ID AS Invoice, INV_PURCHASE_HDR_1.DOC_DATE_GRE AS date," +
                " \r\n                                                    INV_PURCHASE_DTL_1.ITEM_C" +
                "ODE, ISNULL(PAY_SUPPLIER_1.CODE, N\'\') AS Suppliercode, SYS_DOC_TYPE_1.DESC_ENG A" +
                "S Documentname, \r\n                                                    INV_PURCHA" +
                "SE_HDR_1.DOC_TYPE, INV_PURCHASE_DTL_1.ITEM_DESC_ENG, INV_ITEM_DIRECTORY_1.[GROUP" +
                "], \r\n                                                    INV_ITEM_GROUP_1.DESC_E" +
                "NG AS GroupName, INV_ITEM_DIRECTORY_1.TYPE, INV_ITEM_TYPE_1.DESC_ENG AS TypeName" +
                ", \r\n                                                    INV_ITEM_DIRECTORY_1.CAT" +
                "EGORY, INV_ITEM_CATEGORY_1.DESC_ENG AS CategoryName, INV_ITEM_DIRECTORY_1.TRADEM" +
                "ARK, \r\n                                                    INV_ITEM_TM_1.DESC_EN" +
                "G AS TMName, INV_PURCHASE_DTL_1.UOM, INV_UNIT_1.DESC_ENG AS UnitName, \r\n        " +
                "                                            SUM(INV_PURCHASE_DTL_1.QTY_RCVD) AS " +
                "Quantity, SUM(INV_PURCHASE_DTL_1.ITEM_GROSS) AS GrossTotal, \r\n                  " +
                "                                  INV_PURCHASE_HDR_1.TAX_TOTAL AS TaxTotal, PAY_" +
                "SUPPLIER_1.DESC_ENG AS Supplier, INV_PURCHASE_DTL_1.ITEM_TAX\r\n                  " +
                "        FROM            INV_PURCHASE_HDR AS INV_PURCHASE_HDR_1 LEFT OUTER JOIN\r\n" +
                "                                                    INV_PURCHASE_DTL AS INV_PURC" +
                "HASE_DTL_1 ON INV_PURCHASE_HDR_1.DOC_NO = INV_PURCHASE_DTL_1.DOC_NO LEFT OUTER J" +
                "OIN\r\n                                                    INV_ITEM_DIRECTORY AS I" +
                "NV_ITEM_DIRECTORY_1 ON INV_PURCHASE_DTL_1.ITEM_CODE = INV_ITEM_DIRECTORY_1.CODE " +
                "LEFT OUTER JOIN\r\n                                                    PAY_SUPPLIE" +
                "R AS PAY_SUPPLIER_1 ON INV_PURCHASE_HDR_1.SUPPLIER_CODE = PAY_SUPPLIER_1.CODE LE" +
                "FT OUTER JOIN\r\n                                                    SYS_DOC_TYPE " +
                "AS SYS_DOC_TYPE_1 ON INV_PURCHASE_HDR_1.DOC_TYPE = SYS_DOC_TYPE_1.CODE LEFT OUTE" +
                "R JOIN\r\n                                                    INV_ITEM_CATEGORY AS" +
                " INV_ITEM_CATEGORY_1 ON INV_ITEM_CATEGORY_1.CODE = INV_ITEM_DIRECTORY_1.CATEGORY" +
                " LEFT OUTER JOIN\r\n                                                    INV_ITEM_G" +
                "ROUP AS INV_ITEM_GROUP_1 ON INV_ITEM_DIRECTORY_1.[GROUP] = INV_ITEM_GROUP_1.CODE" +
                " LEFT OUTER JOIN\r\n                                                    INV_ITEM_T" +
                "YPE AS INV_ITEM_TYPE_1 ON INV_ITEM_DIRECTORY_1.TYPE = INV_ITEM_TYPE_1.CODE LEFT " +
                "OUTER JOIN\r\n                                                    INV_ITEM_TM AS I" +
                "NV_ITEM_TM_1 ON INV_ITEM_DIRECTORY_1.TRADEMARK = INV_ITEM_TM_1.CODE LEFT OUTER J" +
                "OIN\r\n                                                    INV_UNIT AS INV_UNIT_1 " +
                "ON INV_PURCHASE_DTL_1.UOM = INV_UNIT_1.CODE\r\n                          WHERE    " +
                "    (PAY_SUPPLIER_1.CODE LIKE \'%\' + @sup + \'%\') AND (INV_PURCHASE_HDR_1.DOC_TYPE" +
                " LIKE \'%\' + @doctype + \'%\') AND \r\n                                              " +
                "      (INV_ITEM_DIRECTORY_1.[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_ITEM_DIREC" +
                "TORY_1.TYPE LIKE \'%\' + @type + \'%\') AND \r\n                                      " +
                "              (INV_ITEM_DIRECTORY_1.CATEGORY LIKE \'%\' + @category + \'%\') AND (IN" +
                "V_ITEM_DIRECTORY_1.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND \r\n                " +
                "                                    (INV_PURCHASE_HDR_1.DOC_TYPE IN (\'PUR.CRD\', " +
                "\'PUR.CSS\')) AND (INV_PURCHASE_DTL_1.FLAGDEL = \'True\') AND \r\n                    " +
                "                                (INV_PURCHASE_HDR_1.FLAGDEL = \'True\') AND (INV_P" +
                "URCHASE_HDR_1.PUR_TYPE LIKE \'%\' + @BillType + \'%\') AND \r\n                       " +
                "                             (INV_PURCHASE_DTL_1.ITEM_DESC_ENG LIKE \'%\' + @item " +
                "+ \'%\')\r\n                          GROUP BY INV_PURCHASE_DTL_1.ITEM_CODE, PAY_SUP" +
                "PLIER_1.CODE, SYS_DOC_TYPE_1.DESC_ENG, INV_PURCHASE_HDR_1.DOC_TYPE, \r\n          " +
                "                                          INV_PURCHASE_HDR_1.TAX_TOTAL, INV_PURC" +
                "HASE_DTL_1.ITEM_DESC_ENG, INV_ITEM_DIRECTORY_1.[GROUP], INV_ITEM_GROUP_1.DESC_EN" +
                "G, \r\n                                                    INV_PURCHASE_HDR_1.DOC_" +
                "ID, INV_ITEM_DIRECTORY_1.TYPE, INV_ITEM_TYPE_1.DESC_ENG, INV_ITEM_DIRECTORY_1.CA" +
                "TEGORY, \r\n                                                    INV_ITEM_CATEGORY_" +
                "1.DESC_ENG, INV_ITEM_DIRECTORY_1.TRADEMARK, INV_ITEM_TM_1.DESC_ENG, INV_PURCHASE" +
                "_DTL_1.UOM, \r\n                                                    INV_UNIT_1.DES" +
                "C_ENG, INV_PURCHASE_HDR_1.DOC_NO, INV_PURCHASE_HDR_1.DOC_DATE_GRE, PAY_SUPPLIER_" +
                "1.DESC_ENG, \r\n                                                    INV_PURCHASE_D" +
                "TL_1.ITEM_TAX) AS Purchase_1";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sup", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@group", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@trademark", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BillType", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@item", global::System.Data.SqlDbType.NVarChar, 550, global::System.Data.ParameterDirection.Input, 0, 0, "ITEM_DESC_ENG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@doctype", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT        Docno, Invoice, CONVERT(varchar(10), date, 103) AS PurchaseDate, IT" +
                "EM_CODE, ITEM_DESC_ENG, TypeName, GroupName, CategoryName, TMName, UnitName, \r\n " +
                "                        TaxTotal, Documentname, Quantity, GrossTotal, Supplier, " +
                "ITEM_TAX\r\nFROM            (SELECT        INV_PURCHASE_HDR.DOC_NO AS Docno, INV_P" +
                "URCHASE_HDR.DOC_ID AS Invoice, INV_PURCHASE_HDR.DOC_DATE_GRE AS date, \r\n        " +
                "                                            INV_PURCHASE_DTL.ITEM_CODE, ISNULL(P" +
                "AY_SUPPLIER.CODE, N\'\') AS Suppliercode, SYS_DOC_TYPE.DESC_ENG AS Documentname, \r" +
                "\n                                                    INV_PURCHASE_HDR.DOC_TYPE, " +
                "INV_PURCHASE_DTL.ITEM_DESC_ENG, INV_ITEM_DIRECTORY.[GROUP], \r\n                  " +
                "                                  INV_ITEM_GROUP.DESC_ENG AS GroupName, INV_ITEM" +
                "_DIRECTORY.TYPE, INV_ITEM_TYPE.DESC_ENG AS TypeName, \r\n                         " +
                "                           INV_ITEM_DIRECTORY.CATEGORY, INV_ITEM_CATEGORY.DESC_E" +
                "NG AS CategoryName, INV_ITEM_DIRECTORY.TRADEMARK, \r\n                            " +
                "                        INV_ITEM_TM.DESC_ENG AS TMName, INV_PURCHASE_DTL.UOM, IN" +
                "V_UNIT.DESC_ENG AS UnitName, SUM(INV_PURCHASE_DTL.QTY_RCVD) \r\n                  " +
                "                                  AS Quantity, SUM(INV_PURCHASE_DTL.ITEM_GROSS) " +
                "AS GrossTotal, INV_PURCHASE_HDR.TAX_TOTAL AS TaxTotal, \r\n                       " +
                "                             PAY_SUPPLIER.DESC_ENG AS Supplier, INV_PURCHASE_DTL" +
                ".ITEM_TAX\r\n                          FROM            INV_PURCHASE_HDR LEFT OUTER" +
                " JOIN\r\n                                                    INV_PURCHASE_DTL ON I" +
                "NV_PURCHASE_HDR.DOC_NO = INV_PURCHASE_DTL.DOC_NO LEFT OUTER JOIN\r\n              " +
                "                                      INV_ITEM_DIRECTORY ON INV_PURCHASE_DTL.ITE" +
                "M_CODE = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n                              " +
                "                      PAY_SUPPLIER ON INV_PURCHASE_HDR.SUPPLIER_CODE = PAY_SUPPL" +
                "IER.CODE LEFT OUTER JOIN\r\n                                                    SY" +
                "S_DOC_TYPE ON INV_PURCHASE_HDR.DOC_TYPE = SYS_DOC_TYPE.CODE LEFT OUTER JOIN\r\n   " +
                "                                                 INV_ITEM_CATEGORY ON INV_ITEM_C" +
                "ATEGORY.CODE = INV_ITEM_DIRECTORY.CATEGORY LEFT OUTER JOIN\r\n                    " +
                "                                INV_ITEM_GROUP ON INV_ITEM_DIRECTORY.[GROUP] = I" +
                "NV_ITEM_GROUP.CODE LEFT OUTER JOIN\r\n                                            " +
                "        INV_ITEM_TYPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TYPE.CODE LEFT OUTER" +
                " JOIN\r\n                                                    INV_ITEM_TM ON INV_IT" +
                "EM_DIRECTORY.TRADEMARK = INV_ITEM_TM.CODE LEFT OUTER JOIN\r\n                     " +
                "                               INV_UNIT ON INV_PURCHASE_DTL.UOM = INV_UNIT.CODE\r" +
                "\n                          WHERE        (INV_PURCHASE_HDR.DOC_TYPE LIKE \'%\' + \'\'" +
                " + \'%\') AND (INV_ITEM_DIRECTORY.[GROUP] LIKE \'%\' + \'\' + \'%\') AND \r\n             " +
                "                                       (INV_ITEM_DIRECTORY.TYPE LIKE \'%\' + \'\' + " +
                "\'%\') AND (INV_ITEM_DIRECTORY.CATEGORY LIKE \'%\' + \'\' + \'%\') AND \r\n               " +
                "                                     (INV_ITEM_DIRECTORY.TRADEMARK LIKE \'%\' + \'\'" +
                " + \'%\') AND (INV_PURCHASE_HDR.DOC_DATE_GRE >= @start) AND \r\n                    " +
                "                                (INV_PURCHASE_HDR.DOC_DATE_GRE <= @end) AND (INV" +
                "_PURCHASE_HDR.PUR_TYPE LIKE \'%\' + @BillType + \'%\') AND \r\n                       " +
                "                             (INV_PURCHASE_DTL.ITEM_DESC_ENG LIKE \'%\' + @item + " +
                "\'%\') AND (INV_PURCHASE_HDR.FLAGDEL = \'True\')\r\n                          GROUP BY" +
                " INV_PURCHASE_DTL.ITEM_CODE, PAY_SUPPLIER.CODE, SYS_DOC_TYPE.DESC_ENG, INV_PURCH" +
                "ASE_HDR.DOC_TYPE, \r\n                                                    INV_PURC" +
                "HASE_HDR.TAX_TOTAL, INV_PURCHASE_DTL.ITEM_DESC_ENG, INV_ITEM_DIRECTORY.[GROUP], " +
                "INV_ITEM_GROUP.DESC_ENG, \r\n                                                    I" +
                "NV_PURCHASE_HDR.DOC_ID, INV_ITEM_DIRECTORY.TYPE, INV_ITEM_TYPE.DESC_ENG, INV_ITE" +
                "M_DIRECTORY.CATEGORY, \r\n                                                    INV_" +
                "ITEM_CATEGORY.DESC_ENG, INV_ITEM_DIRECTORY.TRADEMARK, INV_ITEM_TM.DESC_ENG, INV_" +
                "PURCHASE_DTL.UOM, INV_UNIT.DESC_ENG, \r\n                                         " +
                "           INV_PURCHASE_HDR.DOC_NO, INV_PURCHASE_HDR.DOC_DATE_GRE, PAY_SUPPLIER." +
                "DESC_ENG, INV_PURCHASE_DTL.ITEM_TAX) AS Purchase";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@start", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@end", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BillType", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@item", global::System.Data.SqlDbType.NVarChar, 550, global::System.Data.ParameterDirection.Input, 0, 0, "ITEM_DESC_ENG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT        Docno, Invoice, CONVERT(varchar(10), date, 103) AS PurchaseDate, IT" +
                "EM_CODE, ITEM_DESC_ENG, TypeName, GroupName, CategoryName, TMName, UnitName, \r\n " +
                "                        TaxTotal, Documentname, Quantity, GrossTotal, Supplier, " +
                "ITEM_TAX\r\nFROM            (SELECT        INV_PURCHASE_HDR.DOC_NO AS Docno, INV_P" +
                "URCHASE_HDR.DOC_ID AS Invoice, INV_PURCHASE_HDR.DOC_DATE_GRE AS date, \r\n        " +
                "                                            INV_PURCHASE_DTL.ITEM_CODE, ISNULL(P" +
                "AY_SUPPLIER.CODE, N\'\') AS Suppliercode, SYS_DOC_TYPE.DESC_ENG AS Documentname, \r" +
                "\n                                                    INV_PURCHASE_HDR.DOC_TYPE, " +
                "INV_PURCHASE_DTL.ITEM_DESC_ENG, INV_ITEM_DIRECTORY.[GROUP], \r\n                  " +
                "                                  INV_ITEM_GROUP.DESC_ENG AS GroupName, INV_ITEM" +
                "_DIRECTORY.TYPE, INV_ITEM_TYPE.DESC_ENG AS TypeName, \r\n                         " +
                "                           INV_ITEM_DIRECTORY.CATEGORY, INV_ITEM_CATEGORY.DESC_E" +
                "NG AS CategoryName, INV_ITEM_DIRECTORY.TRADEMARK, \r\n                            " +
                "                        INV_ITEM_TM.DESC_ENG AS TMName, INV_PURCHASE_DTL.UOM, IN" +
                "V_UNIT.DESC_ENG AS UnitName, SUM(INV_PURCHASE_DTL.QTY_RCVD) \r\n                  " +
                "                                  AS Quantity, SUM(INV_PURCHASE_DTL.ITEM_GROSS) " +
                "AS GrossTotal, INV_PURCHASE_HDR.TAX_TOTAL AS TaxTotal, \r\n                       " +
                "                             PAY_SUPPLIER.DESC_ENG AS Supplier, INV_PURCHASE_DTL" +
                ".ITEM_TAX\r\n                          FROM            INV_PURCHASE_HDR LEFT OUTER" +
                " JOIN\r\n                                                    INV_PURCHASE_DTL ON I" +
                "NV_PURCHASE_HDR.DOC_NO = INV_PURCHASE_DTL.DOC_NO LEFT OUTER JOIN\r\n              " +
                "                                      INV_ITEM_DIRECTORY ON INV_PURCHASE_DTL.ITE" +
                "M_CODE = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n                              " +
                "                      PAY_SUPPLIER ON INV_PURCHASE_HDR.SUPPLIER_CODE = PAY_SUPPL" +
                "IER.CODE LEFT OUTER JOIN\r\n                                                    SY" +
                "S_DOC_TYPE ON INV_PURCHASE_HDR.DOC_TYPE = SYS_DOC_TYPE.CODE LEFT OUTER JOIN\r\n   " +
                "                                                 INV_ITEM_CATEGORY ON INV_ITEM_C" +
                "ATEGORY.CODE = INV_ITEM_DIRECTORY.CATEGORY LEFT OUTER JOIN\r\n                    " +
                "                                INV_ITEM_GROUP ON INV_ITEM_DIRECTORY.[GROUP] = I" +
                "NV_ITEM_GROUP.CODE LEFT OUTER JOIN\r\n                                            " +
                "        INV_ITEM_TYPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TYPE.CODE LEFT OUTER" +
                " JOIN\r\n                                                    INV_ITEM_TM ON INV_IT" +
                "EM_DIRECTORY.TRADEMARK = INV_ITEM_TM.CODE LEFT OUTER JOIN\r\n                     " +
                "                               INV_UNIT ON INV_PURCHASE_DTL.UOM = INV_UNIT.CODE\r" +
                "\n                          WHERE        (PAY_SUPPLIER.CODE LIKE \'%\' + @sup + \'%\'" +
                ") AND (INV_PURCHASE_HDR.DOC_TYPE LIKE \'%\' + \'\' + \'%\') AND \r\n                    " +
                "                                (INV_ITEM_DIRECTORY.[GROUP] LIKE \'%\' + \'\' + \'%\')" +
                " AND (INV_ITEM_DIRECTORY.TYPE LIKE \'%\' + \'\' + \'%\') AND \r\n                       " +
                "                             (INV_ITEM_DIRECTORY.CATEGORY LIKE \'%\' + \'\' + \'%\') A" +
                "ND (INV_ITEM_DIRECTORY.TRADEMARK LIKE \'%\' + \'\' + \'%\') AND \r\n                    " +
                "                                (INV_PURCHASE_HDR.DOC_DATE_GRE >= @start) AND (I" +
                "NV_PURCHASE_HDR.DOC_DATE_GRE <= @end) AND \r\n                                    " +
                "                (INV_PURCHASE_HDR.PUR_TYPE LIKE \'%\' + @BillType + \'%\') AND (INV_" +
                "PURCHASE_DTL.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\') AND \r\n                       " +
                "                             (INV_PURCHASE_HDR.FLAGDEL = \'True\')\r\n              " +
                "            GROUP BY INV_PURCHASE_DTL.ITEM_CODE, PAY_SUPPLIER.CODE, SYS_DOC_TYPE" +
                ".DESC_ENG, INV_PURCHASE_HDR.DOC_TYPE, \r\n                                        " +
                "            INV_PURCHASE_HDR.TAX_TOTAL, INV_PURCHASE_DTL.ITEM_DESC_ENG, INV_ITEM" +
                "_DIRECTORY.[GROUP], INV_ITEM_GROUP.DESC_ENG, \r\n                                 " +
                "                   INV_PURCHASE_HDR.DOC_ID, INV_ITEM_DIRECTORY.TYPE, INV_ITEM_TY" +
                "PE.DESC_ENG, INV_ITEM_DIRECTORY.CATEGORY, \r\n                                    " +
                "                INV_ITEM_CATEGORY.DESC_ENG, INV_ITEM_DIRECTORY.TRADEMARK, INV_IT" +
                "EM_TM.DESC_ENG, INV_PURCHASE_DTL.UOM, INV_UNIT.DESC_ENG, \r\n                     " +
                "                               INV_PURCHASE_HDR.DOC_NO, INV_PURCHASE_HDR.DOC_DAT" +
                "E_GRE, PAY_SUPPLIER.DESC_ENG, INV_PURCHASE_DTL.ITEM_TAX) AS Purchase";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@sup", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@start", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@end", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BillType", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@item", global::System.Data.SqlDbType.NVarChar, 550, global::System.Data.ParameterDirection.Input, 0, 0, "ITEM_DESC_ENG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT        Docno, Invoice, CONVERT(varchar(10), date, 103) AS PurchaseDate, IT" +
                "EM_CODE, ITEM_DESC_ENG, TypeName, GroupName, CategoryName, TMName, UnitName, \r\n " +
                "                        TaxTotal * - 1 AS TaxTotal, Documentname, Quantity, Gros" +
                "sTotal, Supplier, ITEM_TAX\r\nFROM            (SELECT        INV_PURCHASE_HDR.DOC_" +
                "NO AS Docno, INV_PURCHASE_HDR.DOC_ID AS Invoice, INV_PURCHASE_HDR.DOC_DATE_GRE A" +
                "S date, \r\n                                                    INV_PURCHASE_DTL.I" +
                "TEM_CODE, ISNULL(PAY_SUPPLIER.CODE, N\'\') AS Suppliercode, SYS_DOC_TYPE.DESC_ENG " +
                "AS Documentname, \r\n                                                    INV_PURCH" +
                "ASE_HDR.DOC_TYPE, INV_PURCHASE_DTL.ITEM_DESC_ENG, INV_ITEM_DIRECTORY.[GROUP], \r\n" +
                "                                                    INV_ITEM_GROUP.DESC_ENG AS G" +
                "roupName, INV_ITEM_DIRECTORY.TYPE, INV_ITEM_TYPE.DESC_ENG AS TypeName, \r\n       " +
                "                                             INV_ITEM_DIRECTORY.CATEGORY, INV_IT" +
                "EM_CATEGORY.DESC_ENG AS CategoryName, INV_ITEM_DIRECTORY.TRADEMARK, \r\n          " +
                "                                          INV_ITEM_TM.DESC_ENG AS TMName, INV_PU" +
                "RCHASE_DTL.UOM, INV_UNIT.DESC_ENG AS UnitName, SUM(INV_PURCHASE_DTL.QTY_RCVD) \r\n" +
                "                                                    AS Quantity, SUM(INV_PURCHAS" +
                "E_DTL.ITEM_GROSS) AS GrossTotal, INV_PURCHASE_HDR.TAX_TOTAL AS TaxTotal, \r\n     " +
                "                                               PAY_SUPPLIER.DESC_ENG AS Supplier" +
                ", INV_PURCHASE_DTL.ITEM_TAX\r\n                          FROM            INV_PURCH" +
                "ASE_HDR LEFT OUTER JOIN\r\n                                                    INV" +
                "_PURCHASE_DTL ON INV_PURCHASE_HDR.DOC_NO = INV_PURCHASE_DTL.DOC_NO LEFT OUTER JO" +
                "IN\r\n                                                    INV_ITEM_DIRECTORY ON IN" +
                "V_PURCHASE_DTL.ITEM_CODE = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n            " +
                "                                        PAY_SUPPLIER ON INV_PURCHASE_HDR.SUPPLIE" +
                "R_CODE = PAY_SUPPLIER.CODE LEFT OUTER JOIN\r\n                                    " +
                "                SYS_DOC_TYPE ON INV_PURCHASE_HDR.DOC_TYPE = SYS_DOC_TYPE.CODE LE" +
                "FT OUTER JOIN\r\n                                                    INV_ITEM_CATE" +
                "GORY ON INV_ITEM_CATEGORY.CODE = INV_ITEM_DIRECTORY.CATEGORY LEFT OUTER JOIN\r\n  " +
                "                                                  INV_ITEM_GROUP ON INV_ITEM_DIR" +
                "ECTORY.[GROUP] = INV_ITEM_GROUP.CODE LEFT OUTER JOIN\r\n                          " +
                "                          INV_ITEM_TYPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TY" +
                "PE.CODE LEFT OUTER JOIN\r\n                                                    INV" +
                "_ITEM_TM ON INV_ITEM_DIRECTORY.TRADEMARK = INV_ITEM_TM.CODE LEFT OUTER JOIN\r\n   " +
                "                                                 INV_UNIT ON INV_PURCHASE_DTL.UO" +
                "M = INV_UNIT.CODE\r\n                          WHERE        (INV_ITEM_DIRECTORY.[G" +
                "ROUP] LIKE \'%\' + @group + \'%\') AND (INV_ITEM_DIRECTORY.TYPE LIKE \'%\' + @type + \'" +
                "%\') AND \r\n                                                    (INV_ITEM_DIRECTOR" +
                "Y.CATEGORY LIKE \'%\' + @category + \'%\') AND (INV_ITEM_DIRECTORY.TRADEMARK LIKE \'%" +
                "\' + @trademark + \'%\') AND \r\n                                                    " +
                "(INV_PURCHASE_HDR.DOC_TYPE = \'LGR.PRT\') AND (INV_PURCHASE_DTL.FLAGDEL = \'False\')" +
                " AND (INV_PURCHASE_HDR.FLAGDEL = \'False\') AND \r\n                                " +
                "                    (INV_PURCHASE_DTL.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\')\r\n   " +
                "                       GROUP BY INV_PURCHASE_DTL.ITEM_CODE, PAY_SUPPLIER.CODE, S" +
                "YS_DOC_TYPE.DESC_ENG, INV_PURCHASE_HDR.DOC_TYPE, \r\n                             " +
                "                       INV_PURCHASE_HDR.TAX_TOTAL, INV_PURCHASE_DTL.ITEM_DESC_EN" +
                "G, INV_ITEM_DIRECTORY.[GROUP], INV_ITEM_GROUP.DESC_ENG, \r\n                      " +
                "                              INV_PURCHASE_HDR.DOC_ID, INV_ITEM_DIRECTORY.TYPE, " +
                "INV_ITEM_TYPE.DESC_ENG, INV_ITEM_DIRECTORY.CATEGORY, \r\n                         " +
                "                           INV_ITEM_CATEGORY.DESC_ENG, INV_ITEM_DIRECTORY.TRADEM" +
                "ARK, INV_ITEM_TM.DESC_ENG, INV_PURCHASE_DTL.UOM, INV_UNIT.DESC_ENG, \r\n          " +
                "                                          INV_PURCHASE_HDR.DOC_NO, INV_PURCHASE_" +
                "HDR.DOC_DATE_GRE, PAY_SUPPLIER.DESC_ENG, INV_PURCHASE_DTL.ITEM_TAX) \r\n          " +
                "               AS Purchase\r\nUNION ALL\r\nSELECT        Docno, Invoice, CONVERT(var" +
                "char(10), date, 103) AS PurchaseDate, ITEM_CODE, ITEM_DESC_ENG, TypeName, GroupN" +
                "ame, CategoryName, TMName, UnitName, \r\n                         TaxTotal, Docume" +
                "ntname, Quantity, GrossTotal, Supplier, ITEM_TAX\r\nFROM            (SELECT       " +
                " INV_PURCHASE_HDR_1.DOC_NO AS Docno, INV_PURCHASE_HDR_1.DOC_ID AS Invoice, INV_P" +
                "URCHASE_HDR_1.DOC_DATE_GRE AS date, \r\n                                          " +
                "          INV_PURCHASE_DTL_1.ITEM_CODE, ISNULL(PAY_SUPPLIER_1.CODE, N\'\') AS Supp" +
                "liercode, SYS_DOC_TYPE_1.DESC_ENG AS Documentname, \r\n                           " +
                "                         INV_PURCHASE_HDR_1.DOC_TYPE, INV_PURCHASE_DTL_1.ITEM_DE" +
                "SC_ENG, INV_ITEM_DIRECTORY_1.[GROUP], \r\n                                        " +
                "            INV_ITEM_GROUP_1.DESC_ENG AS GroupName, INV_ITEM_DIRECTORY_1.TYPE, I" +
                "NV_ITEM_TYPE_1.DESC_ENG AS TypeName, \r\n                                         " +
                "           INV_ITEM_DIRECTORY_1.CATEGORY, INV_ITEM_CATEGORY_1.DESC_ENG AS Catego" +
                "ryName, INV_ITEM_DIRECTORY_1.TRADEMARK, \r\n                                      " +
                "              INV_ITEM_TM_1.DESC_ENG AS TMName, INV_PURCHASE_DTL_1.UOM, INV_UNIT" +
                "_1.DESC_ENG AS UnitName, \r\n                                                    S" +
                "UM(INV_PURCHASE_DTL_1.QTY_RCVD) AS Quantity, SUM(INV_PURCHASE_DTL_1.ITEM_GROSS) " +
                "AS GrossTotal, \r\n                                                    INV_PURCHAS" +
                "E_HDR_1.TAX_TOTAL AS TaxTotal, PAY_SUPPLIER_1.DESC_ENG AS Supplier, INV_PURCHASE" +
                "_DTL_1.ITEM_TAX\r\n                          FROM            INV_PURCHASE_HDR AS I" +
                "NV_PURCHASE_HDR_1 LEFT OUTER JOIN\r\n                                             " +
                "       INV_PURCHASE_DTL AS INV_PURCHASE_DTL_1 ON INV_PURCHASE_HDR_1.DOC_NO = INV" +
                "_PURCHASE_DTL_1.DOC_NO LEFT OUTER JOIN\r\n                                        " +
                "            INV_ITEM_DIRECTORY AS INV_ITEM_DIRECTORY_1 ON INV_PURCHASE_DTL_1.ITE" +
                "M_CODE = INV_ITEM_DIRECTORY_1.CODE LEFT OUTER JOIN\r\n                            " +
                "                        PAY_SUPPLIER AS PAY_SUPPLIER_1 ON INV_PURCHASE_HDR_1.SUP" +
                "PLIER_CODE = PAY_SUPPLIER_1.CODE LEFT OUTER JOIN\r\n                              " +
                "                      SYS_DOC_TYPE AS SYS_DOC_TYPE_1 ON INV_PURCHASE_HDR_1.DOC_T" +
                "YPE = SYS_DOC_TYPE_1.CODE LEFT OUTER JOIN\r\n                                     " +
                "               INV_ITEM_CATEGORY AS INV_ITEM_CATEGORY_1 ON INV_ITEM_CATEGORY_1.C" +
                "ODE = INV_ITEM_DIRECTORY_1.CATEGORY LEFT OUTER JOIN\r\n                           " +
                "                         INV_ITEM_GROUP AS INV_ITEM_GROUP_1 ON INV_ITEM_DIRECTOR" +
                "Y_1.[GROUP] = INV_ITEM_GROUP_1.CODE LEFT OUTER JOIN\r\n                           " +
                "                         INV_ITEM_TYPE AS INV_ITEM_TYPE_1 ON INV_ITEM_DIRECTORY_" +
                "1.TYPE = INV_ITEM_TYPE_1.CODE LEFT OUTER JOIN\r\n                                 " +
                "                   INV_ITEM_TM AS INV_ITEM_TM_1 ON INV_ITEM_DIRECTORY_1.TRADEMAR" +
                "K = INV_ITEM_TM_1.CODE LEFT OUTER JOIN\r\n                                        " +
                "            INV_UNIT AS INV_UNIT_1 ON INV_PURCHASE_DTL_1.UOM = INV_UNIT_1.CODE\r\n" +
                "                          WHERE        (INV_PURCHASE_HDR_1.DOC_TYPE LIKE \'%\' + @" +
                "doctype + \'%\') AND (INV_ITEM_DIRECTORY_1.[GROUP] LIKE \'%\' + @group + \'%\') AND \r\n" +
                "                                                    (INV_ITEM_DIRECTORY_1.TYPE L" +
                "IKE \'%\' + @type + \'%\') AND (INV_ITEM_DIRECTORY_1.CATEGORY LIKE \'%\' + @category +" +
                " \'%\') AND \r\n                                                    (INV_ITEM_DIRECT" +
                "ORY_1.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (INV_PURCHASE_DTL_1.FLAGDEL = \'" +
                "False\') AND \r\n                                                    (INV_PURCHASE_" +
                "HDR_1.FLAGDEL = \'False\')\r\n                          GROUP BY INV_PURCHASE_DTL_1." +
                "ITEM_CODE, PAY_SUPPLIER_1.CODE, SYS_DOC_TYPE_1.DESC_ENG, INV_PURCHASE_HDR_1.DOC_" +
                "TYPE, \r\n                                                    INV_PURCHASE_HDR_1.T" +
                "AX_TOTAL, INV_PURCHASE_DTL_1.ITEM_DESC_ENG, INV_ITEM_DIRECTORY_1.[GROUP], INV_IT" +
                "EM_GROUP_1.DESC_ENG, \r\n                                                    INV_P" +
                "URCHASE_HDR_1.DOC_ID, INV_ITEM_DIRECTORY_1.TYPE, INV_ITEM_TYPE_1.DESC_ENG, INV_I" +
                "TEM_DIRECTORY_1.CATEGORY, \r\n                                                    " +
                "INV_ITEM_CATEGORY_1.DESC_ENG, INV_ITEM_DIRECTORY_1.TRADEMARK, INV_ITEM_TM_1.DESC" +
                "_ENG, INV_PURCHASE_DTL_1.UOM, \r\n                                                " +
                "    INV_UNIT_1.DESC_ENG, INV_PURCHASE_HDR_1.DOC_NO, INV_PURCHASE_HDR_1.DOC_DATE_" +
                "GRE, PAY_SUPPLIER_1.DESC_ENG, \r\n                                                " +
                "    INV_PURCHASE_DTL_1.ITEM_TAX) AS Purchase_1";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@group", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@trademark", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@doctype", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@item", global::System.Data.SqlDbType.NVarChar, 550, global::System.Data.ParameterDirection.Input, 0, 0, "ITEM_DESC_ENG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(NewPurchase.DataTable1DataTable dataTable, string group, string type, string category, string trademark, string BillType, string doctype, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(type));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(trademark));
            }
            if ((BillType == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(BillType));
            }
            if ((doctype == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(doctype));
            }
            if ((item == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(item));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual NewPurchase.DataTable1DataTable GetData(string group, string type, string category, string trademark, string BillType, string doctype, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(type));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(trademark));
            }
            if ((BillType == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(BillType));
            }
            if ((doctype == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(doctype));
            }
            if ((item == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(item));
            }
            NewPurchase.DataTable1DataTable dataTable = new NewPurchase.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByCust(NewPurchase.DataTable1DataTable dataTable, string sup, string group, string type, string category, string trademark, string BillType, string item, string doctype) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((sup == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(sup));
            }
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(group));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(type));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(trademark));
            }
            if ((BillType == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(BillType));
            }
            if ((item == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(item));
            }
            if ((doctype == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(doctype));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual NewPurchase.DataTable1DataTable GetDataByCust(string sup, string group, string type, string category, string trademark, string BillType, string item, string doctype) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((sup == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(sup));
            }
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(group));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(type));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(trademark));
            }
            if ((BillType == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(BillType));
            }
            if ((item == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(item));
            }
            if ((doctype == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(doctype));
            }
            NewPurchase.DataTable1DataTable dataTable = new NewPurchase.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDate(NewPurchase.DataTable1DataTable dataTable, global::System.Nullable<global::System.DateTime> start, global::System.Nullable<global::System.DateTime> end, string BillType, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((start.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(start.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((end.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(end.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((BillType == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(BillType));
            }
            if ((item == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(item));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual NewPurchase.DataTable1DataTable GetDataByDate(global::System.Nullable<global::System.DateTime> start, global::System.Nullable<global::System.DateTime> end, string BillType, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((start.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(start.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((end.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(end.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((BillType == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(BillType));
            }
            if ((item == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(item));
            }
            NewPurchase.DataTable1DataTable dataTable = new NewPurchase.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBydateCus(NewPurchase.DataTable1DataTable dataTable, string sup, global::System.Nullable<global::System.DateTime> start, global::System.Nullable<global::System.DateTime> end, string BillType, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((sup == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(sup));
            }
            if ((start.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(start.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((end.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(end.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((BillType == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BillType));
            }
            if ((item == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(item));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual NewPurchase.DataTable1DataTable GetDataBydateCus(string sup, global::System.Nullable<global::System.DateTime> start, global::System.Nullable<global::System.DateTime> end, string BillType, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((sup == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(sup));
            }
            if ((start.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(start.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((end.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(end.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((BillType == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(BillType));
            }
            if ((item == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(item));
            }
            NewPurchase.DataTable1DataTable dataTable = new NewPurchase.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDelete(NewPurchase.DataTable1DataTable dataTable, string group, string type, string category, string trademark, string doctype, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(type));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(trademark));
            }
            if ((doctype == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(doctype));
            }
            if ((item == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(item));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual NewPurchase.DataTable1DataTable GetDataDelete(string group, string type, string category, string trademark, string doctype, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(type));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(trademark));
            }
            if ((doctype == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(doctype));
            }
            if ((item == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(item));
            }
            NewPurchase.DataTable1DataTable dataTable = new NewPurchase.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(NewPurchase dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(NewPurchase dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(NewPurchase dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(NewPurchase dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591