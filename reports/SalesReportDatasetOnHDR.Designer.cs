//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Sys_Sols_Inventory.reports {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SalesReportDatasetOnHDR")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class SalesReportDatasetOnHDR : global::System.Data.DataSet {
        
        private DataTable1DataTable tableDataTable1;
        
        private SalesmanReportDataTable tableSalesmanReport;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public SalesReportDatasetOnHDR() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected SalesReportDatasetOnHDR(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["SalesmanReport"] != null)) {
                    base.Tables.Add(new SalesmanReportDataTable(ds.Tables["SalesmanReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DataTable1DataTable DataTable1 {
            get {
                return this.tableDataTable1;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SalesmanReportDataTable SalesmanReport {
            get {
                return this.tableSalesmanReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            SalesReportDatasetOnHDR cln = ((SalesReportDatasetOnHDR)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DataTable1"] != null)) {
                    base.Tables.Add(new DataTable1DataTable(ds.Tables["DataTable1"]));
                }
                if ((ds.Tables["SalesmanReport"] != null)) {
                    base.Tables.Add(new SalesmanReportDataTable(ds.Tables["SalesmanReport"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableDataTable1 = ((DataTable1DataTable)(base.Tables["DataTable1"]));
            if ((initTable == true)) {
                if ((this.tableDataTable1 != null)) {
                    this.tableDataTable1.InitVars();
                }
            }
            this.tableSalesmanReport = ((SalesmanReportDataTable)(base.Tables["SalesmanReport"]));
            if ((initTable == true)) {
                if ((this.tableSalesmanReport != null)) {
                    this.tableSalesmanReport.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitClass() {
            this.DataSetName = "SalesReportDatasetOnHDR";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/SalesReportDatasetOnHDR.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDataTable1 = new DataTable1DataTable();
            base.Tables.Add(this.tableDataTable1);
            this.tableSalesmanReport = new SalesmanReportDataTable();
            base.Tables.Add(this.tableSalesmanReport);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeDataTable1() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private bool ShouldSerializeSalesmanReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SalesReportDatasetOnHDR ds = new SalesReportDatasetOnHDR();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void DataTable1RowChangeEventHandler(object sender, DataTable1RowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public delegate void SalesmanReportRowChangeEventHandler(object sender, SalesmanReportRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DataTable1DataTable : global::System.Data.TypedTableBase<DataTable1Row> {
            
            private global::System.Data.DataColumn columnINVOICENO;
            
            private global::System.Data.DataColumn columnDocno;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnItemcode;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnGrossTotal;
            
            private global::System.Data.DataColumn columnItemTotal;
            
            private global::System.Data.DataColumn columnDiscount;
            
            private global::System.Data.DataColumn columnITEM_DESC_ENG;
            
            private global::System.Data.DataColumn columnTYPE;
            
            private global::System.Data.DataColumn columnTypeName;
            
            private global::System.Data.DataColumn columnCategoryname;
            
            private global::System.Data.DataColumn columnTMname;
            
            private global::System.Data.DataColumn columnGroupname;
            
            private global::System.Data.DataColumn columnDOC_TYPE;
            
            private global::System.Data.DataColumn columnUOM;
            
            private global::System.Data.DataColumn columnGROSS_TOTAL;
            
            private global::System.Data.DataColumn columnGROUP;
            
            private global::System.Data.DataColumn columnCATEGORY;
            
            private global::System.Data.DataColumn columnTRADEMARK;
            
            private global::System.Data.DataColumn columnUnitname;
            
            private global::System.Data.DataColumn columnCUSTOMER_CODE;
            
            private global::System.Data.DataColumn columnDocumentType;
            
            private global::System.Data.DataColumn columnCustomer;
            
            private global::System.Data.DataColumn columnTaxTotal;
            
            private global::System.Data.DataColumn columnTotalDiscount;
            
            private global::System.Data.DataColumn columnSALE_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataTable1DataTable() {
                this.TableName = "DataTable1";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal DataTable1DataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected DataTable1DataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn INVOICENOColumn {
                get {
                    return this.columnINVOICENO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn DocnoColumn {
                get {
                    return this.columnDocno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ItemcodeColumn {
                get {
                    return this.columnItemcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn GrossTotalColumn {
                get {
                    return this.columnGrossTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ItemTotalColumn {
                get {
                    return this.columnItemTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn DiscountColumn {
                get {
                    return this.columnDiscount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ITEM_DESC_ENGColumn {
                get {
                    return this.columnITEM_DESC_ENG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn CategorynameColumn {
                get {
                    return this.columnCategoryname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TMnameColumn {
                get {
                    return this.columnTMname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn GroupnameColumn {
                get {
                    return this.columnGroupname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn DOC_TYPEColumn {
                get {
                    return this.columnDOC_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn UOMColumn {
                get {
                    return this.columnUOM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn GROSS_TOTALColumn {
                get {
                    return this.columnGROSS_TOTAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn GROUPColumn {
                get {
                    return this.columnGROUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn CATEGORYColumn {
                get {
                    return this.columnCATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TRADEMARKColumn {
                get {
                    return this.columnTRADEMARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn UnitnameColumn {
                get {
                    return this.columnUnitname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn CUSTOMER_CODEColumn {
                get {
                    return this.columnCUSTOMER_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn DocumentTypeColumn {
                get {
                    return this.columnDocumentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn CustomerColumn {
                get {
                    return this.columnCustomer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TaxTotalColumn {
                get {
                    return this.columnTaxTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TotalDiscountColumn {
                get {
                    return this.columnTotalDiscount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn SALE_TYPEColumn {
                get {
                    return this.columnSALE_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataTable1Row this[int index] {
                get {
                    return ((DataTable1Row)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event DataTable1RowChangeEventHandler DataTable1RowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event DataTable1RowChangeEventHandler DataTable1RowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event DataTable1RowChangeEventHandler DataTable1RowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event DataTable1RowChangeEventHandler DataTable1RowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddDataTable1Row(DataTable1Row row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataTable1Row AddDataTable1Row(
                        decimal INVOICENO, 
                        string Docno, 
                        System.DateTime Date, 
                        string Itemcode, 
                        int Quantity, 
                        decimal GrossTotal, 
                        decimal ItemTotal, 
                        decimal Discount, 
                        string ITEM_DESC_ENG, 
                        string TYPE, 
                        string TypeName, 
                        string Categoryname, 
                        string TMname, 
                        string Groupname, 
                        string DOC_TYPE, 
                        string UOM, 
                        decimal GROSS_TOTAL, 
                        string GROUP, 
                        string CATEGORY, 
                        string TRADEMARK, 
                        string Unitname, 
                        string CUSTOMER_CODE, 
                        string DocumentType, 
                        string Customer, 
                        decimal TaxTotal, 
                        decimal TotalDiscount, 
                        string SALE_TYPE) {
                DataTable1Row rowDataTable1Row = ((DataTable1Row)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        INVOICENO,
                        Docno,
                        Date,
                        Itemcode,
                        Quantity,
                        GrossTotal,
                        ItemTotal,
                        Discount,
                        ITEM_DESC_ENG,
                        TYPE,
                        TypeName,
                        Categoryname,
                        TMname,
                        Groupname,
                        DOC_TYPE,
                        UOM,
                        GROSS_TOTAL,
                        GROUP,
                        CATEGORY,
                        TRADEMARK,
                        Unitname,
                        CUSTOMER_CODE,
                        DocumentType,
                        Customer,
                        TaxTotal,
                        TotalDiscount,
                        SALE_TYPE};
                rowDataTable1Row.ItemArray = columnValuesArray;
                this.Rows.Add(rowDataTable1Row);
                return rowDataTable1Row;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                DataTable1DataTable cln = ((DataTable1DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DataTable1DataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnINVOICENO = base.Columns["INVOICENO"];
                this.columnDocno = base.Columns["Docno"];
                this.columnDate = base.Columns["Date"];
                this.columnItemcode = base.Columns["Itemcode"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnGrossTotal = base.Columns["GrossTotal"];
                this.columnItemTotal = base.Columns["ItemTotal"];
                this.columnDiscount = base.Columns["Discount"];
                this.columnITEM_DESC_ENG = base.Columns["ITEM_DESC_ENG"];
                this.columnTYPE = base.Columns["TYPE"];
                this.columnTypeName = base.Columns["TypeName"];
                this.columnCategoryname = base.Columns["Categoryname"];
                this.columnTMname = base.Columns["TMname"];
                this.columnGroupname = base.Columns["Groupname"];
                this.columnDOC_TYPE = base.Columns["DOC_TYPE"];
                this.columnUOM = base.Columns["UOM"];
                this.columnGROSS_TOTAL = base.Columns["GROSS_TOTAL"];
                this.columnGROUP = base.Columns["GROUP"];
                this.columnCATEGORY = base.Columns["CATEGORY"];
                this.columnTRADEMARK = base.Columns["TRADEMARK"];
                this.columnUnitname = base.Columns["Unitname"];
                this.columnCUSTOMER_CODE = base.Columns["CUSTOMER_CODE"];
                this.columnDocumentType = base.Columns["DocumentType"];
                this.columnCustomer = base.Columns["Customer"];
                this.columnTaxTotal = base.Columns["TaxTotal"];
                this.columnTotalDiscount = base.Columns["TotalDiscount"];
                this.columnSALE_TYPE = base.Columns["SALE_TYPE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnINVOICENO = new global::System.Data.DataColumn("INVOICENO", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINVOICENO);
                this.columnDocno = new global::System.Data.DataColumn("Docno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocno);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnItemcode = new global::System.Data.DataColumn("Itemcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemcode);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnGrossTotal = new global::System.Data.DataColumn("GrossTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossTotal);
                this.columnItemTotal = new global::System.Data.DataColumn("ItemTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemTotal);
                this.columnDiscount = new global::System.Data.DataColumn("Discount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscount);
                this.columnITEM_DESC_ENG = new global::System.Data.DataColumn("ITEM_DESC_ENG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_DESC_ENG);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.columnCategoryname = new global::System.Data.DataColumn("Categoryname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryname);
                this.columnTMname = new global::System.Data.DataColumn("TMname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTMname);
                this.columnGroupname = new global::System.Data.DataColumn("Groupname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupname);
                this.columnDOC_TYPE = new global::System.Data.DataColumn("DOC_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_TYPE);
                this.columnUOM = new global::System.Data.DataColumn("UOM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUOM);
                this.columnGROSS_TOTAL = new global::System.Data.DataColumn("GROSS_TOTAL", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGROSS_TOTAL);
                this.columnGROUP = new global::System.Data.DataColumn("GROUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGROUP);
                this.columnCATEGORY = new global::System.Data.DataColumn("CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY);
                this.columnTRADEMARK = new global::System.Data.DataColumn("TRADEMARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRADEMARK);
                this.columnUnitname = new global::System.Data.DataColumn("Unitname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitname);
                this.columnCUSTOMER_CODE = new global::System.Data.DataColumn("CUSTOMER_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTOMER_CODE);
                this.columnDocumentType = new global::System.Data.DataColumn("DocumentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentType);
                this.columnCustomer = new global::System.Data.DataColumn("Customer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomer);
                this.columnTaxTotal = new global::System.Data.DataColumn("TaxTotal", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxTotal);
                this.columnTotalDiscount = new global::System.Data.DataColumn("TotalDiscount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDiscount);
                this.columnSALE_TYPE = new global::System.Data.DataColumn("SALE_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSALE_TYPE);
                this.columnINVOICENO.ReadOnly = true;
                this.columnDocno.ReadOnly = true;
                this.columnDocno.MaxLength = 10;
                this.columnDate.ReadOnly = true;
                this.columnItemcode.ReadOnly = true;
                this.columnItemcode.MaxLength = 20;
                this.columnQuantity.ReadOnly = true;
                this.columnGrossTotal.ReadOnly = true;
                this.columnItemTotal.ReadOnly = true;
                this.columnDiscount.ReadOnly = true;
                this.columnITEM_DESC_ENG.ReadOnly = true;
                this.columnITEM_DESC_ENG.MaxLength = 550;
                this.columnTYPE.ReadOnly = true;
                this.columnTYPE.MaxLength = 3;
                this.columnTypeName.ReadOnly = true;
                this.columnTypeName.MaxLength = 50;
                this.columnCategoryname.ReadOnly = true;
                this.columnCategoryname.MaxLength = 2147483647;
                this.columnTMname.ReadOnly = true;
                this.columnTMname.MaxLength = 50;
                this.columnGroupname.ReadOnly = true;
                this.columnGroupname.MaxLength = 50;
                this.columnDOC_TYPE.ReadOnly = true;
                this.columnDOC_TYPE.MaxLength = 15;
                this.columnUOM.ReadOnly = true;
                this.columnUOM.MaxLength = 3;
                this.columnGROSS_TOTAL.ReadOnly = true;
                this.columnGROUP.ReadOnly = true;
                this.columnGROUP.MaxLength = 3;
                this.columnCATEGORY.ReadOnly = true;
                this.columnCATEGORY.MaxLength = 50;
                this.columnTRADEMARK.ReadOnly = true;
                this.columnTRADEMARK.MaxLength = 3;
                this.columnUnitname.ReadOnly = true;
                this.columnUnitname.MaxLength = 50;
                this.columnCUSTOMER_CODE.ReadOnly = true;
                this.columnCUSTOMER_CODE.MaxLength = 15;
                this.columnDocumentType.ReadOnly = true;
                this.columnDocumentType.MaxLength = 50;
                this.columnCustomer.ReadOnly = true;
                this.columnCustomer.MaxLength = 50;
                this.columnTaxTotal.ReadOnly = true;
                this.columnTotalDiscount.ReadOnly = true;
                this.columnSALE_TYPE.ReadOnly = true;
                this.columnSALE_TYPE.MaxLength = 3;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataTable1Row NewDataTable1Row() {
                return ((DataTable1Row)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DataTable1Row(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(DataTable1Row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DataTable1RowChanged != null)) {
                    this.DataTable1RowChanged(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DataTable1RowChanging != null)) {
                    this.DataTable1RowChanging(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DataTable1RowDeleted != null)) {
                    this.DataTable1RowDeleted(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DataTable1RowDeleting != null)) {
                    this.DataTable1RowDeleting(this, new DataTable1RowChangeEvent(((DataTable1Row)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveDataTable1Row(DataTable1Row row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SalesReportDatasetOnHDR ds = new SalesReportDatasetOnHDR();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DataTable1DataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SalesmanReportDataTable : global::System.Data.TypedTableBase<SalesmanReportRow> {
            
            private global::System.Data.DataColumn columnINVOICENO;
            
            private global::System.Data.DataColumn columnDocno;
            
            private global::System.Data.DataColumn columnDate;
            
            private global::System.Data.DataColumn columnItemcode;
            
            private global::System.Data.DataColumn columnQuantity;
            
            private global::System.Data.DataColumn columnGrossTotal;
            
            private global::System.Data.DataColumn columnItemTotal;
            
            private global::System.Data.DataColumn columnDiscount;
            
            private global::System.Data.DataColumn columnITEM_DESC_ENG;
            
            private global::System.Data.DataColumn columnTYPE;
            
            private global::System.Data.DataColumn columnTypeName;
            
            private global::System.Data.DataColumn columnCategoryname;
            
            private global::System.Data.DataColumn columnTMname;
            
            private global::System.Data.DataColumn columnGroupname;
            
            private global::System.Data.DataColumn columnDOC_TYPE;
            
            private global::System.Data.DataColumn columnUOM;
            
            private global::System.Data.DataColumn columnGROSS_TOTAL;
            
            private global::System.Data.DataColumn columnGROUP;
            
            private global::System.Data.DataColumn columnCATEGORY;
            
            private global::System.Data.DataColumn columnTRADEMARK;
            
            private global::System.Data.DataColumn columnUnitname;
            
            private global::System.Data.DataColumn columnCUSTOMER_CODE;
            
            private global::System.Data.DataColumn columnDocumentType;
            
            private global::System.Data.DataColumn columnCustomer;
            
            private global::System.Data.DataColumn columnTaxTotal;
            
            private global::System.Data.DataColumn columnTotalDiscount;
            
            private global::System.Data.DataColumn columnSalesMan;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public SalesmanReportDataTable() {
                this.TableName = "SalesmanReport";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal SalesmanReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected SalesmanReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn INVOICENOColumn {
                get {
                    return this.columnINVOICENO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn DocnoColumn {
                get {
                    return this.columnDocno;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ItemcodeColumn {
                get {
                    return this.columnItemcode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn QuantityColumn {
                get {
                    return this.columnQuantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn GrossTotalColumn {
                get {
                    return this.columnGrossTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ItemTotalColumn {
                get {
                    return this.columnItemTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn DiscountColumn {
                get {
                    return this.columnDiscount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn ITEM_DESC_ENGColumn {
                get {
                    return this.columnITEM_DESC_ENG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TYPEColumn {
                get {
                    return this.columnTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TypeNameColumn {
                get {
                    return this.columnTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn CategorynameColumn {
                get {
                    return this.columnCategoryname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TMnameColumn {
                get {
                    return this.columnTMname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn GroupnameColumn {
                get {
                    return this.columnGroupname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn DOC_TYPEColumn {
                get {
                    return this.columnDOC_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn UOMColumn {
                get {
                    return this.columnUOM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn GROSS_TOTALColumn {
                get {
                    return this.columnGROSS_TOTAL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn GROUPColumn {
                get {
                    return this.columnGROUP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn CATEGORYColumn {
                get {
                    return this.columnCATEGORY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TRADEMARKColumn {
                get {
                    return this.columnTRADEMARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn UnitnameColumn {
                get {
                    return this.columnUnitname;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn CUSTOMER_CODEColumn {
                get {
                    return this.columnCUSTOMER_CODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn DocumentTypeColumn {
                get {
                    return this.columnDocumentType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn CustomerColumn {
                get {
                    return this.columnCustomer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TaxTotalColumn {
                get {
                    return this.columnTaxTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn TotalDiscountColumn {
                get {
                    return this.columnTotalDiscount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataColumn SalesManColumn {
                get {
                    return this.columnSalesMan;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public SalesmanReportRow this[int index] {
                get {
                    return ((SalesmanReportRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event SalesmanReportRowChangeEventHandler SalesmanReportRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event SalesmanReportRowChangeEventHandler SalesmanReportRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event SalesmanReportRowChangeEventHandler SalesmanReportRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public event SalesmanReportRowChangeEventHandler SalesmanReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void AddSalesmanReportRow(SalesmanReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public SalesmanReportRow AddSalesmanReportRow(
                        string INVOICENO, 
                        string Docno, 
                        string Date, 
                        string Itemcode, 
                        string Quantity, 
                        string GrossTotal, 
                        string ItemTotal, 
                        string Discount, 
                        string ITEM_DESC_ENG, 
                        string TYPE, 
                        string TypeName, 
                        string Categoryname, 
                        string TMname, 
                        string Groupname, 
                        string DOC_TYPE, 
                        string UOM, 
                        string GROSS_TOTAL, 
                        string GROUP, 
                        string CATEGORY, 
                        string TRADEMARK, 
                        string Unitname, 
                        string CUSTOMER_CODE, 
                        string DocumentType, 
                        string Customer, 
                        string TaxTotal, 
                        string TotalDiscount, 
                        string SalesMan) {
                SalesmanReportRow rowSalesmanReportRow = ((SalesmanReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        INVOICENO,
                        Docno,
                        Date,
                        Itemcode,
                        Quantity,
                        GrossTotal,
                        ItemTotal,
                        Discount,
                        ITEM_DESC_ENG,
                        TYPE,
                        TypeName,
                        Categoryname,
                        TMname,
                        Groupname,
                        DOC_TYPE,
                        UOM,
                        GROSS_TOTAL,
                        GROUP,
                        CATEGORY,
                        TRADEMARK,
                        Unitname,
                        CUSTOMER_CODE,
                        DocumentType,
                        Customer,
                        TaxTotal,
                        TotalDiscount,
                        SalesMan};
                rowSalesmanReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSalesmanReportRow);
                return rowSalesmanReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SalesmanReportDataTable cln = ((SalesmanReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SalesmanReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal void InitVars() {
                this.columnINVOICENO = base.Columns["INVOICENO"];
                this.columnDocno = base.Columns["Docno"];
                this.columnDate = base.Columns["Date"];
                this.columnItemcode = base.Columns["Itemcode"];
                this.columnQuantity = base.Columns["Quantity"];
                this.columnGrossTotal = base.Columns["GrossTotal"];
                this.columnItemTotal = base.Columns["ItemTotal"];
                this.columnDiscount = base.Columns["Discount"];
                this.columnITEM_DESC_ENG = base.Columns["ITEM_DESC_ENG"];
                this.columnTYPE = base.Columns["TYPE"];
                this.columnTypeName = base.Columns["TypeName"];
                this.columnCategoryname = base.Columns["Categoryname"];
                this.columnTMname = base.Columns["TMname"];
                this.columnGroupname = base.Columns["Groupname"];
                this.columnDOC_TYPE = base.Columns["DOC_TYPE"];
                this.columnUOM = base.Columns["UOM"];
                this.columnGROSS_TOTAL = base.Columns["GROSS_TOTAL"];
                this.columnGROUP = base.Columns["GROUP"];
                this.columnCATEGORY = base.Columns["CATEGORY"];
                this.columnTRADEMARK = base.Columns["TRADEMARK"];
                this.columnUnitname = base.Columns["Unitname"];
                this.columnCUSTOMER_CODE = base.Columns["CUSTOMER_CODE"];
                this.columnDocumentType = base.Columns["DocumentType"];
                this.columnCustomer = base.Columns["Customer"];
                this.columnTaxTotal = base.Columns["TaxTotal"];
                this.columnTotalDiscount = base.Columns["TotalDiscount"];
                this.columnSalesMan = base.Columns["SalesMan"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private void InitClass() {
                this.columnINVOICENO = new global::System.Data.DataColumn("INVOICENO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINVOICENO);
                this.columnDocno = new global::System.Data.DataColumn("Docno", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocno);
                this.columnDate = new global::System.Data.DataColumn("Date", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDate);
                this.columnItemcode = new global::System.Data.DataColumn("Itemcode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemcode);
                this.columnQuantity = new global::System.Data.DataColumn("Quantity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQuantity);
                this.columnGrossTotal = new global::System.Data.DataColumn("GrossTotal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossTotal);
                this.columnItemTotal = new global::System.Data.DataColumn("ItemTotal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemTotal);
                this.columnDiscount = new global::System.Data.DataColumn("Discount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDiscount);
                this.columnITEM_DESC_ENG = new global::System.Data.DataColumn("ITEM_DESC_ENG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnITEM_DESC_ENG);
                this.columnTYPE = new global::System.Data.DataColumn("TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTYPE);
                this.columnTypeName = new global::System.Data.DataColumn("TypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTypeName);
                this.columnCategoryname = new global::System.Data.DataColumn("Categoryname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategoryname);
                this.columnTMname = new global::System.Data.DataColumn("TMname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTMname);
                this.columnGroupname = new global::System.Data.DataColumn("Groupname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupname);
                this.columnDOC_TYPE = new global::System.Data.DataColumn("DOC_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOC_TYPE);
                this.columnUOM = new global::System.Data.DataColumn("UOM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUOM);
                this.columnGROSS_TOTAL = new global::System.Data.DataColumn("GROSS_TOTAL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGROSS_TOTAL);
                this.columnGROUP = new global::System.Data.DataColumn("GROUP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGROUP);
                this.columnCATEGORY = new global::System.Data.DataColumn("CATEGORY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCATEGORY);
                this.columnTRADEMARK = new global::System.Data.DataColumn("TRADEMARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTRADEMARK);
                this.columnUnitname = new global::System.Data.DataColumn("Unitname", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUnitname);
                this.columnCUSTOMER_CODE = new global::System.Data.DataColumn("CUSTOMER_CODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCUSTOMER_CODE);
                this.columnDocumentType = new global::System.Data.DataColumn("DocumentType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDocumentType);
                this.columnCustomer = new global::System.Data.DataColumn("Customer", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCustomer);
                this.columnTaxTotal = new global::System.Data.DataColumn("TaxTotal", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxTotal);
                this.columnTotalDiscount = new global::System.Data.DataColumn("TotalDiscount", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalDiscount);
                this.columnSalesMan = new global::System.Data.DataColumn("SalesMan", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalesMan);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public SalesmanReportRow NewSalesmanReportRow() {
                return ((SalesmanReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SalesmanReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SalesmanReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SalesmanReportRowChanged != null)) {
                    this.SalesmanReportRowChanged(this, new SalesmanReportRowChangeEvent(((SalesmanReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SalesmanReportRowChanging != null)) {
                    this.SalesmanReportRowChanging(this, new SalesmanReportRowChangeEvent(((SalesmanReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SalesmanReportRowDeleted != null)) {
                    this.SalesmanReportRowDeleted(this, new SalesmanReportRowChangeEvent(((SalesmanReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SalesmanReportRowDeleting != null)) {
                    this.SalesmanReportRowDeleting(this, new SalesmanReportRowChangeEvent(((SalesmanReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void RemoveSalesmanReportRow(SalesmanReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SalesReportDatasetOnHDR ds = new SalesReportDatasetOnHDR();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SalesmanReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class DataTable1Row : global::System.Data.DataRow {
            
            private DataTable1DataTable tableDataTable1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal DataTable1Row(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDataTable1 = ((DataTable1DataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal INVOICENO {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.INVOICENOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INVOICENO\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.INVOICENOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Docno {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.DocnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Docno\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.DocnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public System.DateTime Date {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableDataTable1.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Itemcode {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.ItemcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Itemcode\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ItemcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int Quantity {
                get {
                    try {
                        return ((int)(this[this.tableDataTable1.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal GrossTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.GrossTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossTotal\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.GrossTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal ItemTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.ItemTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemTotal\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ItemTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal Discount {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.DiscountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Discount\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.DiscountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ITEM_DESC_ENG {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.ITEM_DESC_ENGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ITEM_DESC_ENG\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.ITEM_DESC_ENGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TYPE {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TypeName {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.TypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeName\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.TypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Categoryname {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CategorynameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Categoryname\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CategorynameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TMname {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.TMnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TMname\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.TMnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Groupname {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.GroupnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Groupname\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.GroupnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string DOC_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.DOC_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOC_TYPE\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.DOC_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string UOM {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.UOMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UOM\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.UOMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal GROSS_TOTAL {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.GROSS_TOTALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GROSS_TOTAL\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.GROSS_TOTALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string GROUP {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.GROUPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GROUP\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.GROUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string CATEGORY {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CATEGORYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TRADEMARK {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.TRADEMARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRADEMARK\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.TRADEMARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Unitname {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.UnitnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unitname\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.UnitnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string CUSTOMER_CODE {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CUSTOMER_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CUSTOMER_CODE\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CUSTOMER_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string DocumentType {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.DocumentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentType\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.DocumentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Customer {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.CustomerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Customer\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.CustomerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal TaxTotal {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.TaxTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxTotal\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.TaxTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public decimal TotalDiscount {
                get {
                    try {
                        return ((decimal)(this[this.tableDataTable1.TotalDiscountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDiscount\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.TotalDiscountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string SALE_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableDataTable1.SALE_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SALE_TYPE\' in table \'DataTable1\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDataTable1.SALE_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsINVOICENONull() {
                return this.IsNull(this.tableDataTable1.INVOICENOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetINVOICENONull() {
                this[this.tableDataTable1.INVOICENOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDocnoNull() {
                return this.IsNull(this.tableDataTable1.DocnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDocnoNull() {
                this[this.tableDataTable1.DocnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDateNull() {
                return this.IsNull(this.tableDataTable1.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDateNull() {
                this[this.tableDataTable1.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsItemcodeNull() {
                return this.IsNull(this.tableDataTable1.ItemcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetItemcodeNull() {
                this[this.tableDataTable1.ItemcodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableDataTable1.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetQuantityNull() {
                this[this.tableDataTable1.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsGrossTotalNull() {
                return this.IsNull(this.tableDataTable1.GrossTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetGrossTotalNull() {
                this[this.tableDataTable1.GrossTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsItemTotalNull() {
                return this.IsNull(this.tableDataTable1.ItemTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetItemTotalNull() {
                this[this.tableDataTable1.ItemTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDiscountNull() {
                return this.IsNull(this.tableDataTable1.DiscountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDiscountNull() {
                this[this.tableDataTable1.DiscountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsITEM_DESC_ENGNull() {
                return this.IsNull(this.tableDataTable1.ITEM_DESC_ENGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetITEM_DESC_ENGNull() {
                this[this.tableDataTable1.ITEM_DESC_ENGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTYPENull() {
                return this.IsNull(this.tableDataTable1.TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTYPENull() {
                this[this.tableDataTable1.TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTypeNameNull() {
                return this.IsNull(this.tableDataTable1.TypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTypeNameNull() {
                this[this.tableDataTable1.TypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCategorynameNull() {
                return this.IsNull(this.tableDataTable1.CategorynameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCategorynameNull() {
                this[this.tableDataTable1.CategorynameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTMnameNull() {
                return this.IsNull(this.tableDataTable1.TMnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTMnameNull() {
                this[this.tableDataTable1.TMnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsGroupnameNull() {
                return this.IsNull(this.tableDataTable1.GroupnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetGroupnameNull() {
                this[this.tableDataTable1.GroupnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDOC_TYPENull() {
                return this.IsNull(this.tableDataTable1.DOC_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDOC_TYPENull() {
                this[this.tableDataTable1.DOC_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsUOMNull() {
                return this.IsNull(this.tableDataTable1.UOMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetUOMNull() {
                this[this.tableDataTable1.UOMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsGROSS_TOTALNull() {
                return this.IsNull(this.tableDataTable1.GROSS_TOTALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetGROSS_TOTALNull() {
                this[this.tableDataTable1.GROSS_TOTALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsGROUPNull() {
                return this.IsNull(this.tableDataTable1.GROUPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetGROUPNull() {
                this[this.tableDataTable1.GROUPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCATEGORYNull() {
                return this.IsNull(this.tableDataTable1.CATEGORYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCATEGORYNull() {
                this[this.tableDataTable1.CATEGORYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTRADEMARKNull() {
                return this.IsNull(this.tableDataTable1.TRADEMARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTRADEMARKNull() {
                this[this.tableDataTable1.TRADEMARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsUnitnameNull() {
                return this.IsNull(this.tableDataTable1.UnitnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetUnitnameNull() {
                this[this.tableDataTable1.UnitnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCUSTOMER_CODENull() {
                return this.IsNull(this.tableDataTable1.CUSTOMER_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCUSTOMER_CODENull() {
                this[this.tableDataTable1.CUSTOMER_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDocumentTypeNull() {
                return this.IsNull(this.tableDataTable1.DocumentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDocumentTypeNull() {
                this[this.tableDataTable1.DocumentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCustomerNull() {
                return this.IsNull(this.tableDataTable1.CustomerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCustomerNull() {
                this[this.tableDataTable1.CustomerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTaxTotalNull() {
                return this.IsNull(this.tableDataTable1.TaxTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTaxTotalNull() {
                this[this.tableDataTable1.TaxTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTotalDiscountNull() {
                return this.IsNull(this.tableDataTable1.TotalDiscountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTotalDiscountNull() {
                this[this.tableDataTable1.TotalDiscountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsSALE_TYPENull() {
                return this.IsNull(this.tableDataTable1.SALE_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetSALE_TYPENull() {
                this[this.tableDataTable1.SALE_TYPEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SalesmanReportRow : global::System.Data.DataRow {
            
            private SalesmanReportDataTable tableSalesmanReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal SalesmanReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSalesmanReport = ((SalesmanReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string INVOICENO {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.INVOICENOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'INVOICENO\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.INVOICENOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Docno {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.DocnoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Docno\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.DocnoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Date {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.DateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Date\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.DateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Itemcode {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.ItemcodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Itemcode\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.ItemcodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Quantity {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.QuantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Quantity\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.QuantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string GrossTotal {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.GrossTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossTotal\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.GrossTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ItemTotal {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.ItemTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ItemTotal\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.ItemTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Discount {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.DiscountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Discount\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.DiscountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string ITEM_DESC_ENG {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.ITEM_DESC_ENGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ITEM_DESC_ENG\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.ITEM_DESC_ENGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TYPE {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TYPE\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TypeName {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.TypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TypeName\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.TypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Categoryname {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.CategorynameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Categoryname\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.CategorynameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TMname {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.TMnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TMname\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.TMnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Groupname {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.GroupnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Groupname\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.GroupnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string DOC_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.DOC_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOC_TYPE\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.DOC_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string UOM {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.UOMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UOM\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.UOMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string GROSS_TOTAL {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.GROSS_TOTALColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GROSS_TOTAL\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.GROSS_TOTALColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string GROUP {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.GROUPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GROUP\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.GROUPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string CATEGORY {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.CATEGORYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CATEGORY\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.CATEGORYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TRADEMARK {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.TRADEMARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TRADEMARK\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.TRADEMARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Unitname {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.UnitnameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Unitname\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.UnitnameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string CUSTOMER_CODE {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.CUSTOMER_CODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CUSTOMER_CODE\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.CUSTOMER_CODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string DocumentType {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.DocumentTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DocumentType\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.DocumentTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string Customer {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.CustomerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Customer\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.CustomerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TaxTotal {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.TaxTotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxTotal\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.TaxTotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string TotalDiscount {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.TotalDiscountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalDiscount\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.TotalDiscountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public string SalesMan {
                get {
                    try {
                        return ((string)(this[this.tableSalesmanReport.SalesManColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalesMan\' in table \'SalesmanReport\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSalesmanReport.SalesManColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsINVOICENONull() {
                return this.IsNull(this.tableSalesmanReport.INVOICENOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetINVOICENONull() {
                this[this.tableSalesmanReport.INVOICENOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDocnoNull() {
                return this.IsNull(this.tableSalesmanReport.DocnoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDocnoNull() {
                this[this.tableSalesmanReport.DocnoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDateNull() {
                return this.IsNull(this.tableSalesmanReport.DateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDateNull() {
                this[this.tableSalesmanReport.DateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsItemcodeNull() {
                return this.IsNull(this.tableSalesmanReport.ItemcodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetItemcodeNull() {
                this[this.tableSalesmanReport.ItemcodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsQuantityNull() {
                return this.IsNull(this.tableSalesmanReport.QuantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetQuantityNull() {
                this[this.tableSalesmanReport.QuantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsGrossTotalNull() {
                return this.IsNull(this.tableSalesmanReport.GrossTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetGrossTotalNull() {
                this[this.tableSalesmanReport.GrossTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsItemTotalNull() {
                return this.IsNull(this.tableSalesmanReport.ItemTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetItemTotalNull() {
                this[this.tableSalesmanReport.ItemTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDiscountNull() {
                return this.IsNull(this.tableSalesmanReport.DiscountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDiscountNull() {
                this[this.tableSalesmanReport.DiscountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsITEM_DESC_ENGNull() {
                return this.IsNull(this.tableSalesmanReport.ITEM_DESC_ENGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetITEM_DESC_ENGNull() {
                this[this.tableSalesmanReport.ITEM_DESC_ENGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTYPENull() {
                return this.IsNull(this.tableSalesmanReport.TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTYPENull() {
                this[this.tableSalesmanReport.TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTypeNameNull() {
                return this.IsNull(this.tableSalesmanReport.TypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTypeNameNull() {
                this[this.tableSalesmanReport.TypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCategorynameNull() {
                return this.IsNull(this.tableSalesmanReport.CategorynameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCategorynameNull() {
                this[this.tableSalesmanReport.CategorynameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTMnameNull() {
                return this.IsNull(this.tableSalesmanReport.TMnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTMnameNull() {
                this[this.tableSalesmanReport.TMnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsGroupnameNull() {
                return this.IsNull(this.tableSalesmanReport.GroupnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetGroupnameNull() {
                this[this.tableSalesmanReport.GroupnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDOC_TYPENull() {
                return this.IsNull(this.tableSalesmanReport.DOC_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDOC_TYPENull() {
                this[this.tableSalesmanReport.DOC_TYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsUOMNull() {
                return this.IsNull(this.tableSalesmanReport.UOMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetUOMNull() {
                this[this.tableSalesmanReport.UOMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsGROSS_TOTALNull() {
                return this.IsNull(this.tableSalesmanReport.GROSS_TOTALColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetGROSS_TOTALNull() {
                this[this.tableSalesmanReport.GROSS_TOTALColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsGROUPNull() {
                return this.IsNull(this.tableSalesmanReport.GROUPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetGROUPNull() {
                this[this.tableSalesmanReport.GROUPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCATEGORYNull() {
                return this.IsNull(this.tableSalesmanReport.CATEGORYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCATEGORYNull() {
                this[this.tableSalesmanReport.CATEGORYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTRADEMARKNull() {
                return this.IsNull(this.tableSalesmanReport.TRADEMARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTRADEMARKNull() {
                this[this.tableSalesmanReport.TRADEMARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsUnitnameNull() {
                return this.IsNull(this.tableSalesmanReport.UnitnameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetUnitnameNull() {
                this[this.tableSalesmanReport.UnitnameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCUSTOMER_CODENull() {
                return this.IsNull(this.tableSalesmanReport.CUSTOMER_CODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCUSTOMER_CODENull() {
                this[this.tableSalesmanReport.CUSTOMER_CODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsDocumentTypeNull() {
                return this.IsNull(this.tableSalesmanReport.DocumentTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetDocumentTypeNull() {
                this[this.tableSalesmanReport.DocumentTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsCustomerNull() {
                return this.IsNull(this.tableSalesmanReport.CustomerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetCustomerNull() {
                this[this.tableSalesmanReport.CustomerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTaxTotalNull() {
                return this.IsNull(this.tableSalesmanReport.TaxTotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTaxTotalNull() {
                this[this.tableSalesmanReport.TaxTotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsTotalDiscountNull() {
                return this.IsNull(this.tableSalesmanReport.TotalDiscountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetTotalDiscountNull() {
                this[this.tableSalesmanReport.TotalDiscountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public bool IsSalesManNull() {
                return this.IsNull(this.tableSalesmanReport.SalesManColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public void SetSalesManNull() {
                this[this.tableSalesmanReport.SalesManColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class DataTable1RowChangeEvent : global::System.EventArgs {
            
            private DataTable1Row eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataTable1RowChangeEvent(DataTable1Row row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public DataTable1Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public class SalesmanReportRowChangeEvent : global::System.EventArgs {
            
            private SalesmanReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public SalesmanReportRowChangeEvent(SalesmanReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public SalesmanReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Sys_Sols_Inventory.reports.SalesReportDatasetOnHDRTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class DataTable1TableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public DataTable1TableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "DataTable1";
            tableMapping.ColumnMappings.Add("INVOICENO", "INVOICENO");
            tableMapping.ColumnMappings.Add("Docno", "Docno");
            tableMapping.ColumnMappings.Add("Date", "Date");
            tableMapping.ColumnMappings.Add("Itemcode", "Itemcode");
            tableMapping.ColumnMappings.Add("Discount", "Discount");
            tableMapping.ColumnMappings.Add("ITEM_DESC_ENG", "ITEM_DESC_ENG");
            tableMapping.ColumnMappings.Add("TYPE", "TYPE");
            tableMapping.ColumnMappings.Add("TypeName", "TypeName");
            tableMapping.ColumnMappings.Add("Categoryname", "Categoryname");
            tableMapping.ColumnMappings.Add("TMname", "TMname");
            tableMapping.ColumnMappings.Add("Groupname", "Groupname");
            tableMapping.ColumnMappings.Add("DOC_TYPE", "DOC_TYPE");
            tableMapping.ColumnMappings.Add("UOM", "UOM");
            tableMapping.ColumnMappings.Add("GROUP", "GROUP");
            tableMapping.ColumnMappings.Add("CATEGORY", "CATEGORY");
            tableMapping.ColumnMappings.Add("TRADEMARK", "TRADEMARK");
            tableMapping.ColumnMappings.Add("Unitname", "Unitname");
            tableMapping.ColumnMappings.Add("CUSTOMER_CODE", "CUSTOMER_CODE");
            tableMapping.ColumnMappings.Add("DocumentType", "DocumentType");
            tableMapping.ColumnMappings.Add("Customer", "Customer");
            tableMapping.ColumnMappings.Add("TaxTotal", "TaxTotal");
            tableMapping.ColumnMappings.Add("TotalDiscount", "TotalDiscount");
            tableMapping.ColumnMappings.Add("SALE_TYPE", "SALE_TYPE");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Sys_Sols_Inventory.Properties.Settings.Default.SYSBIZZConnectionString7;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[7];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        INV_SALES_HDR.DOC_ID AS INVOICENO, INV_SALES_HDR.DOC_NO AS Docno, I" +
                "NV_SALES_HDR.DOC_DATE_GRE AS Date, \r\n                         INV_SALES_DTL.ITEM" +
                "_CODE AS Itemcode, SUM(INV_SALES_DTL.QUANTITY) * - 1 AS Quantity, SUM(INV_SALES_" +
                "DTL.GROSS_TOTAL) * - 1 AS GrossTotal, \r\n                         SUM(INV_SALES_D" +
                "TL.ITEM_TOTAL) * - 1 AS ItemTotal, SUM(INV_SALES_DTL.ITEM_DISCOUNT) * - 1 AS Dis" +
                "count, INV_SALES_DTL.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTOR" +
                "Y.TYPE, INV_ITEM_TYPE.DESC_ENG AS TypeName, INV_ITEM_CATEGORY.DESC_ENG AS Catego" +
                "ryname, \r\n                         INV_ITEM_TM.DESC_ENG AS TMname, INV_ITEM_GROU" +
                "P.DESC_ENG AS Groupname, INV_SALES_HDR.DOC_TYPE, INV_SALES_DTL.UOM, \r\n          " +
                "               INV_SALES_DTL.GROSS_TOTAL * - 1 AS GROSS_TOTAL, INV_ITEM_DIRECTOR" +
                "Y.[GROUP], INV_ITEM_DIRECTORY.CATEGORY, INV_ITEM_DIRECTORY.TRADEMARK, \r\n        " +
                "                 INV_UNIT.DESC_ENG AS Unitname, INV_SALES_HDR.CUSTOMER_CODE, SYS" +
                "_DOC_TYPE.DESC_ENG AS DocumentType, \r\n                         INV_SALES_HDR.CUS" +
                "TOMER_NAME_ENG AS Customer, INV_SALES_DTL.ITEM_TAX * - 1 AS TaxTotal, CASE WHEN " +
                "ROW_NUMBER() OVER (PARTITION BY \r\n                         INV_SALES_HDR.DOC_NO\r" +
                "\nORDER BY INV_SALES_DTL.ITEM_DESC_ENG) = 1 THEN INV_SALES_HDR.DISCOUNT * - 1 ELS" +
                "E 0 END AS TotalDiscount, INV_SALES_HDR.SALE_TYPE\r\nFROM            INV_SALES_HDR" +
                " LEFT OUTER JOIN\r\n                         INV_SALES_DTL ON INV_SALES_HDR.DOC_NO" +
                " = INV_SALES_DTL.DOC_NO LEFT OUTER JOIN\r\n                         INV_ITEM_DIREC" +
                "TORY ON INV_SALES_DTL.ITEM_CODE = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n     " +
                "                    INV_ITEM_TYPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TYPE.COD" +
                "E LEFT OUTER JOIN\r\n                         INV_ITEM_CATEGORY ON INV_ITEM_DIRECT" +
                "ORY.CATEGORY = INV_ITEM_CATEGORY.CODE LEFT OUTER JOIN\r\n                         " +
                "INV_ITEM_TM ON INV_ITEM_TM.CODE = INV_ITEM_DIRECTORY.TRADEMARK LEFT OUTER JOIN\r\n" +
                "                         INV_UNIT ON INV_SALES_DTL.UOM = INV_UNIT.CODE LEFT OUTE" +
                "R JOIN\r\n                         INV_ITEM_GROUP ON INV_ITEM_DIRECTORY.[GROUP] = " +
                "INV_ITEM_GROUP.CODE LEFT OUTER JOIN\r\n                         SYS_DOC_TYPE ON SY" +
                "S_DOC_TYPE.CODE = INV_SALES_HDR.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY.[GROU" +
                "P] LIKE \'%\' + @group + \'%\') AND (INV_ITEM_DIRECTORY.CATEGORY LIKE \'%\' + @categor" +
                "y + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY.DESC_ENG LIKE \'%\' + " +
                "@item1 + \'%\') AND (INV_ITEM_DIRECTORY.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND" +
                " \r\n                         (INV_SALES_HDR.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') " +
                "AND (INV_ITEM_DIRECTORY.TYPE LIKE \'%\' + @type + \'%\') AND \r\n                     " +
                "    (INV_SALES_HDR.DOC_TYPE = \'SAL.CSR\') AND (INV_SALES_HDR.FLAGDEL = \'True\') AN" +
                "D (INV_SALES_HDR.SALE_TYPE LIKE \'%\' + @doc + \'%\') AND \r\n                        " +
                " INV_SALES_DTL.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\'\r\nGROUP BY INV_SALES_HDR.DOC_" +
                "ID, INV_SALES_HDR.DOC_DATE_GRE, INV_SALES_DTL.ITEM_CODE, INV_SALES_DTL.ITEM_DESC" +
                "_ENG, INV_ITEM_DIRECTORY.TYPE, \r\n                         INV_SALES_DTL.ITEM_TAX" +
                ", INV_ITEM_TYPE.DESC_ENG, INV_ITEM_CATEGORY.DESC_ENG, INV_ITEM_TM.DESC_ENG, INV_" +
                "ITEM_GROUP.DESC_ENG, \r\n                         INV_SALES_HDR.DOC_TYPE, INV_SALE" +
                "S_DTL.UOM, INV_SALES_DTL.GROSS_TOTAL, INV_ITEM_DIRECTORY.[GROUP], INV_ITEM_DIREC" +
                "TORY.CATEGORY, \r\n                         INV_ITEM_DIRECTORY.TRADEMARK, INV_UNIT" +
                ".DESC_ENG, INV_SALES_HDR.CUSTOMER_CODE, SYS_DOC_TYPE.DESC_ENG, INV_SALES_HDR.DOC" +
                "_NO, \r\n                         INV_SALES_HDR.CUSTOMER_NAME_ENG, INV_SALES_HDR.D" +
                "ISCOUNT, INV_SALES_HDR.SALE_TYPE\r\nUNION ALL\r\nSELECT        INV_SALES_HDR_3.DOC_I" +
                "D AS INVOICENO, INV_SALES_HDR_3.DOC_NO AS Docno, INV_SALES_HDR_3.DOC_DATE_GRE AS" +
                " Date, \r\n                         INV_SALES_DTL_3.ITEM_CODE AS Itemcode, SUM(INV" +
                "_SALES_DTL_3.QUANTITY) AS Quantity, SUM(INV_SALES_DTL_3.GROSS_TOTAL) AS GrossTot" +
                "al, \r\n                         SUM(INV_SALES_DTL_3.ITEM_TOTAL) AS ItemTotal, SUM" +
                "(INV_SALES_DTL_3.ITEM_DISCOUNT) AS Discount, INV_SALES_DTL_3.ITEM_DESC_ENG, \r\n  " +
                "                       INV_ITEM_DIRECTORY_3.TYPE, INV_ITEM_TYPE_3.DESC_ENG AS Ty" +
                "peName, INV_ITEM_CATEGORY_3.DESC_ENG AS Categoryname, \r\n                        " +
                " INV_ITEM_TM_3.DESC_ENG AS TMname, INV_ITEM_GROUP_3.DESC_ENG AS Groupname, INV_S" +
                "ALES_HDR_3.DOC_TYPE, INV_SALES_DTL_3.UOM, \r\n                         INV_SALES_D" +
                "TL_3.GROSS_TOTAL, INV_ITEM_DIRECTORY_3.[GROUP], INV_ITEM_DIRECTORY_3.CATEGORY, I" +
                "NV_ITEM_DIRECTORY_3.TRADEMARK, \r\n                         INV_UNIT_3.DESC_ENG AS" +
                " Unitname, INV_SALES_HDR_3.CUSTOMER_CODE, SYS_DOC_TYPE_3.DESC_ENG AS DocumentTyp" +
                "e, \r\n                         INV_SALES_HDR_3.CUSTOMER_NAME_ENG AS Customer, INV" +
                "_SALES_DTL_3.ITEM_TAX AS TaxTotal, CASE WHEN ROW_NUMBER() OVER (PARTITION BY \r\n " +
                "                        INV_SALES_HDR_3.DOC_NO\r\nORDER BY INV_SALES_DTL_3.ITEM_DE" +
                "SC_ENG) = 1 THEN INV_SALES_HDR_3.DISCOUNT ELSE 0 END AS TotalDiscount, INV_SALES" +
                "_HDR_3.SALE_TYPE\r\nFROM            INV_SALES_HDR AS INV_SALES_HDR_3 LEFT OUTER JO" +
                "IN\r\n                         INV_SALES_DTL AS INV_SALES_DTL_3 ON INV_SALES_HDR_3" +
                ".DOC_NO = INV_SALES_DTL_3.DOC_NO LEFT OUTER JOIN\r\n                         INV_I" +
                "TEM_DIRECTORY AS INV_ITEM_DIRECTORY_3 ON INV_SALES_DTL_3.ITEM_CODE = INV_ITEM_DI" +
                "RECTORY_3.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TYPE AS INV_IT" +
                "EM_TYPE_3 ON INV_ITEM_DIRECTORY_3.TYPE = INV_ITEM_TYPE_3.CODE LEFT OUTER JOIN\r\n " +
                "                        INV_ITEM_CATEGORY AS INV_ITEM_CATEGORY_3 ON INV_ITEM_DIR" +
                "ECTORY_3.CATEGORY = INV_ITEM_CATEGORY_3.CODE LEFT OUTER JOIN\r\n                  " +
                "       INV_ITEM_TM AS INV_ITEM_TM_3 ON INV_ITEM_TM_3.CODE = INV_ITEM_DIRECTORY_3" +
                ".TRADEMARK LEFT OUTER JOIN\r\n                         INV_UNIT AS INV_UNIT_3 ON I" +
                "NV_SALES_DTL_3.UOM = INV_UNIT_3.CODE LEFT OUTER JOIN\r\n                         I" +
                "NV_ITEM_GROUP AS INV_ITEM_GROUP_3 ON INV_ITEM_DIRECTORY_3.[GROUP] = INV_ITEM_GRO" +
                "UP_3.CODE LEFT OUTER JOIN\r\n                         SYS_DOC_TYPE AS SYS_DOC_TYPE" +
                "_3 ON SYS_DOC_TYPE_3.CODE = INV_SALES_HDR_3.DOC_TYPE\r\nWHERE        (INV_ITEM_DIR" +
                "ECTORY_3.[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_ITEM_DIRECTORY_3.CATEGORY LIK" +
                "E \'%\' + @category + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY_3.DE" +
                "SC_ENG LIKE \'%\' + @item1 + \'%\') AND (INV_ITEM_DIRECTORY_3.TRADEMARK LIKE \'%\' + @" +
                "trademark + \'%\') AND \r\n                         (INV_SALES_HDR_3.CUSTOMER_CODE L" +
                "IKE \'%\' + @cus + \'%\') AND (INV_ITEM_DIRECTORY_3.TYPE LIKE \'%\' + @type + \'%\') AND" +
                " \r\n                         (INV_SALES_HDR_3.DOC_TYPE = \'SAL.CRD\') AND (INV_SALE" +
                "S_HDR_3.FLAGDEL = \'True\') AND (INV_SALES_HDR_3.SALE_TYPE LIKE \'%\' + @doc + \'%\') " +
                "AND \r\n                         INV_SALES_DTL_3.ITEM_DESC_ENG LIKE \'%\' + @item + " +
                "\'%\'\r\nGROUP BY INV_SALES_HDR_3.DOC_ID, INV_SALES_HDR_3.DOC_DATE_GRE, INV_SALES_DT" +
                "L_3.ITEM_CODE, INV_SALES_DTL_3.ITEM_DESC_ENG, \r\n                         INV_ITE" +
                "M_DIRECTORY_3.TYPE, INV_SALES_DTL_3.ITEM_TAX, INV_ITEM_TYPE_3.DESC_ENG, INV_ITEM" +
                "_CATEGORY_3.DESC_ENG, INV_ITEM_TM_3.DESC_ENG, \r\n                         INV_ITE" +
                "M_GROUP_3.DESC_ENG, INV_SALES_HDR_3.DOC_TYPE, INV_SALES_DTL_3.UOM, INV_SALES_DTL" +
                "_3.GROSS_TOTAL, INV_ITEM_DIRECTORY_3.[GROUP], \r\n                         INV_ITE" +
                "M_DIRECTORY_3.CATEGORY, INV_ITEM_DIRECTORY_3.TRADEMARK, INV_UNIT_3.DESC_ENG, INV" +
                "_SALES_HDR_3.CUSTOMER_CODE, \r\n                         SYS_DOC_TYPE_3.DESC_ENG, " +
                "INV_SALES_HDR_3.DOC_NO, INV_SALES_HDR_3.CUSTOMER_NAME_ENG, INV_SALES_HDR_3.DISCO" +
                "UNT, \r\n                         INV_SALES_HDR_3.SALE_TYPE\r\nUNION ALL\r\nSELECT    " +
                "    INV_SALES_HDR_2.DOC_ID AS INVOICENO, INV_SALES_HDR_2.DOC_NO AS Docno, INV_SA" +
                "LES_HDR_2.DOC_DATE_GRE AS Date, \r\n                         INV_SALES_DTL_2.ITEM_" +
                "CODE AS Itemcode, SUM(INV_SALES_DTL_2.QUANTITY) AS Quantity, SUM(INV_SALES_DTL_2" +
                ".GROSS_TOTAL) AS GrossTotal, \r\n                         SUM(INV_SALES_DTL_2.ITEM" +
                "_TOTAL) AS ItemTotal, SUM(INV_SALES_DTL_2.ITEM_DISCOUNT) AS Discount, INV_SALES_" +
                "DTL_2.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTORY_2.TYPE, INV_I" +
                "TEM_TYPE_2.DESC_ENG AS TypeName, INV_ITEM_CATEGORY_2.DESC_ENG AS Categoryname, \r" +
                "\n                         INV_ITEM_TM_2.DESC_ENG AS TMname, INV_ITEM_GROUP_2.DES" +
                "C_ENG AS Groupname, INV_SALES_HDR_2.DOC_TYPE, INV_SALES_DTL_2.UOM, \r\n           " +
                "              INV_SALES_DTL_2.GROSS_TOTAL, INV_ITEM_DIRECTORY_2.[GROUP], INV_ITE" +
                "M_DIRECTORY_2.CATEGORY, INV_ITEM_DIRECTORY_2.TRADEMARK, \r\n                      " +
                "   INV_UNIT_2.DESC_ENG AS Unitname, INV_SALES_HDR_2.CUSTOMER_CODE, SYS_DOC_TYPE_" +
                "2.DESC_ENG AS DocumentType, \r\n                         INV_SALES_HDR_2.CUSTOMER_" +
                "NAME_ENG AS Customer, INV_SALES_DTL_2.ITEM_TAX AS TaxTotal, CASE WHEN ROW_NUMBER" +
                "() OVER (PARTITION BY \r\n                         INV_SALES_HDR_2.DOC_NO\r\nORDER B" +
                "Y INV_SALES_DTL_2.ITEM_DESC_ENG) = 1 THEN INV_SALES_HDR_2.DISCOUNT ELSE 0 END AS" +
                " TotalDiscount, INV_SALES_HDR_2.SALE_TYPE\r\nFROM            INV_SALES_HDR AS INV_" +
                "SALES_HDR_2 LEFT OUTER JOIN\r\n                         INV_SALES_DTL AS INV_SALES" +
                "_DTL_2 ON INV_SALES_HDR_2.DOC_NO = INV_SALES_DTL_2.DOC_NO LEFT OUTER JOIN\r\n     " +
                "                    INV_ITEM_DIRECTORY AS INV_ITEM_DIRECTORY_2 ON INV_SALES_DTL_" +
                "2.ITEM_CODE = INV_ITEM_DIRECTORY_2.CODE LEFT OUTER JOIN\r\n                       " +
                "  INV_ITEM_TYPE AS INV_ITEM_TYPE_2 ON INV_ITEM_DIRECTORY_2.TYPE = INV_ITEM_TYPE_" +
                "2.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_CATEGORY AS INV_ITEM_C" +
                "ATEGORY_2 ON INV_ITEM_DIRECTORY_2.CATEGORY = INV_ITEM_CATEGORY_2.CODE LEFT OUTER" +
                " JOIN\r\n                         INV_ITEM_TM AS INV_ITEM_TM_2 ON INV_ITEM_TM_2.CO" +
                "DE = INV_ITEM_DIRECTORY_2.TRADEMARK LEFT OUTER JOIN\r\n                         IN" +
                "V_UNIT AS INV_UNIT_2 ON INV_SALES_DTL_2.UOM = INV_UNIT_2.CODE LEFT OUTER JOIN\r\n " +
                "                        INV_ITEM_GROUP AS INV_ITEM_GROUP_2 ON INV_ITEM_DIRECTORY" +
                "_2.[GROUP] = INV_ITEM_GROUP_2.CODE LEFT OUTER JOIN\r\n                         SYS" +
                "_DOC_TYPE AS SYS_DOC_TYPE_2 ON SYS_DOC_TYPE_2.CODE = INV_SALES_HDR_2.DOC_TYPE\r\nW" +
                "HERE        (INV_ITEM_DIRECTORY_2.[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_ITEM" +
                "_DIRECTORY_2.CATEGORY LIKE \'%\' + @category + \'%\') AND \r\n                        " +
                " (INV_ITEM_DIRECTORY_2.DESC_ENG LIKE \'%\' + @item1 + \'%\') AND (INV_ITEM_DIRECTORY" +
                "_2.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND \r\n                         (INV_SA" +
                "LES_HDR_2.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND (INV_ITEM_DIRECTORY_2.TYPE LI" +
                "KE \'%\' + @type + \'%\') AND \r\n                         (INV_SALES_HDR_2.DOC_TYPE =" +
                " \'SAL.CSS\') AND (INV_SALES_HDR_2.FLAGDEL = \'True\') AND (INV_SALES_HDR_2.SALE_TYP" +
                "E LIKE \'%\' + @doc + \'%\') AND \r\n                         INV_SALES_DTL_2.ITEM_DES" +
                "C_ENG LIKE \'%\' + @item + \'%\'\r\nGROUP BY INV_SALES_HDR_2.DOC_ID, INV_SALES_HDR_2.D" +
                "OC_DATE_GRE, INV_SALES_DTL_2.ITEM_CODE, INV_SALES_DTL_2.ITEM_DESC_ENG, \r\n       " +
                "                  INV_ITEM_DIRECTORY_2.TYPE, INV_SALES_DTL_2.ITEM_TAX, INV_ITEM_" +
                "TYPE_2.DESC_ENG, INV_ITEM_CATEGORY_2.DESC_ENG, INV_ITEM_TM_2.DESC_ENG, \r\n       " +
                "                  INV_ITEM_GROUP_2.DESC_ENG, INV_SALES_HDR_2.DOC_TYPE, INV_SALES" +
                "_DTL_2.UOM, INV_SALES_DTL_2.GROSS_TOTAL, INV_ITEM_DIRECTORY_2.[GROUP], \r\n       " +
                "                  INV_ITEM_DIRECTORY_2.CATEGORY, INV_ITEM_DIRECTORY_2.TRADEMARK," +
                " INV_UNIT_2.DESC_ENG, INV_SALES_HDR_2.CUSTOMER_CODE, \r\n                         " +
                "SYS_DOC_TYPE_2.DESC_ENG, INV_SALES_HDR_2.DOC_NO, INV_SALES_HDR_2.CUSTOMER_NAME_E" +
                "NG, INV_SALES_HDR_2.DISCOUNT, \r\n                         INV_SALES_HDR_2.SALE_TY" +
                "PE\r\nUNION ALL\r\nSELECT        INV_SALES_HDR_1.DOC_ID AS INVOICENO, INV_SALES_HDR_" +
                "1.DOC_NO AS Docno, INV_SALES_HDR_1.DOC_DATE_GRE AS Date, \r\n                     " +
                "    INV_SALES_DTL_1.ITEM_CODE AS Itemcode, SUM(INV_SALES_DTL_1.QUANTITY) * - 1 A" +
                "S Quantity, SUM(INV_SALES_DTL_1.GROSS_TOTAL) * - 1 AS GrossTotal, \r\n            " +
                "             SUM(INV_SALES_DTL_1.ITEM_TOTAL) * - 1 AS ItemTotal, SUM(INV_SALES_D" +
                "TL_1.ITEM_DISCOUNT) * - 1 AS Discount, INV_SALES_DTL_1.ITEM_DESC_ENG, \r\n        " +
                "                 INV_ITEM_DIRECTORY_1.TYPE, INV_ITEM_TYPE_1.DESC_ENG AS TypeName" +
                ", INV_ITEM_CATEGORY_1.DESC_ENG AS Categoryname, \r\n                         INV_I" +
                "TEM_TM_1.DESC_ENG AS TMname, INV_ITEM_GROUP_1.DESC_ENG AS Groupname, INV_SALES_H" +
                "DR_1.DOC_TYPE, INV_SALES_DTL_1.UOM, \r\n                         INV_SALES_DTL_1.G" +
                "ROSS_TOTAL * - 1 AS GROSS_TOTAL, INV_ITEM_DIRECTORY_1.[GROUP], INV_ITEM_DIRECTOR" +
                "Y_1.CATEGORY, \r\n                         INV_ITEM_DIRECTORY_1.TRADEMARK, INV_UNI" +
                "T_1.DESC_ENG AS Unitname, INV_SALES_HDR_1.CUSTOMER_CODE, \r\n                     " +
                "    SYS_DOC_TYPE_1.DESC_ENG AS DocumentType, INV_SALES_HDR_1.CUSTOMER_NAME_ENG A" +
                "S Customer, INV_SALES_DTL_1.ITEM_TAX * - 1 AS TaxTotal, \r\n                      " +
                "   CASE WHEN ROW_NUMBER() OVER (PARTITION BY INV_SALES_HDR_1.DOC_NO\r\nORDER BY IN" +
                "V_SALES_DTL_1.ITEM_DESC_ENG) = 1 THEN INV_SALES_HDR_1.DISCOUNT * - 1 ELSE 0 END " +
                "AS TotalDiscount, INV_SALES_HDR_1.SALE_TYPE\r\nFROM            INV_SALES_HDR AS IN" +
                "V_SALES_HDR_1 LEFT OUTER JOIN\r\n                         INV_SALES_DTL AS INV_SAL" +
                "ES_DTL_1 ON INV_SALES_HDR_1.DOC_NO = INV_SALES_DTL_1.DOC_NO LEFT OUTER JOIN\r\n   " +
                "                      INV_ITEM_DIRECTORY AS INV_ITEM_DIRECTORY_1 ON INV_SALES_DT" +
                "L_1.ITEM_CODE = INV_ITEM_DIRECTORY_1.CODE LEFT OUTER JOIN\r\n                     " +
                "    INV_ITEM_TYPE AS INV_ITEM_TYPE_1 ON INV_ITEM_DIRECTORY_1.TYPE = INV_ITEM_TYP" +
                "E_1.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_CATEGORY AS INV_ITEM" +
                "_CATEGORY_1 ON INV_ITEM_DIRECTORY_1.CATEGORY = INV_ITEM_CATEGORY_1.CODE LEFT OUT" +
                "ER JOIN\r\n                         INV_ITEM_TM AS INV_ITEM_TM_1 ON INV_ITEM_TM_1." +
                "CODE = INV_ITEM_DIRECTORY_1.TRADEMARK LEFT OUTER JOIN\r\n                         " +
                "INV_UNIT AS INV_UNIT_1 ON INV_SALES_DTL_1.UOM = INV_UNIT_1.CODE LEFT OUTER JOIN\r" +
                "\n                         INV_ITEM_GROUP AS INV_ITEM_GROUP_1 ON INV_ITEM_DIRECTO" +
                "RY_1.[GROUP] = INV_ITEM_GROUP_1.CODE LEFT OUTER JOIN\r\n                         S" +
                "YS_DOC_TYPE AS SYS_DOC_TYPE_1 ON SYS_DOC_TYPE_1.CODE = INV_SALES_HDR_1.DOC_TYPE\r" +
                "\nWHERE        (INV_ITEM_DIRECTORY_1.[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_IT" +
                "EM_DIRECTORY_1.CATEGORY LIKE \'%\' + @category + \'%\') AND \r\n                      " +
                "   (INV_ITEM_DIRECTORY_1.DESC_ENG LIKE \'%\' + @item1 + \'%\') AND (INV_ITEM_DIRECTO" +
                "RY_1.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND \r\n                         (INV_" +
                "SALES_HDR_1.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND (INV_ITEM_DIRECTORY_1.TYPE " +
                "LIKE \'%\' + @type + \'%\') AND \r\n                         (INV_SALES_HDR_1.DOC_TYPE" +
                " = \'SAL.CDR\') AND (INV_SALES_HDR_1.FLAGDEL = \'True\') AND (INV_SALES_HDR_1.SALE_T" +
                "YPE LIKE \'%\' + @doc + \'%\') AND \r\n                         INV_SALES_DTL_1.ITEM_D" +
                "ESC_ENG LIKE \'%\' + @item + \'%\'\r\nGROUP BY INV_SALES_HDR_1.DOC_ID, INV_SALES_HDR_1" +
                ".DOC_DATE_GRE, INV_SALES_DTL_1.ITEM_CODE, INV_SALES_DTL_1.ITEM_DESC_ENG, \r\n     " +
                "                    INV_ITEM_DIRECTORY_1.TYPE, INV_SALES_DTL_1.ITEM_TAX, INV_ITE" +
                "M_TYPE_1.DESC_ENG, INV_ITEM_CATEGORY_1.DESC_ENG, INV_ITEM_TM_1.DESC_ENG, \r\n     " +
                "                    INV_ITEM_GROUP_1.DESC_ENG, INV_SALES_HDR_1.DOC_TYPE, INV_SAL" +
                "ES_DTL_1.UOM, INV_SALES_DTL_1.GROSS_TOTAL, INV_ITEM_DIRECTORY_1.[GROUP], \r\n     " +
                "                    INV_ITEM_DIRECTORY_1.CATEGORY, INV_ITEM_DIRECTORY_1.TRADEMAR" +
                "K, INV_UNIT_1.DESC_ENG, INV_SALES_HDR_1.CUSTOMER_CODE, \r\n                       " +
                "  SYS_DOC_TYPE_1.DESC_ENG, INV_SALES_HDR_1.DOC_NO, INV_SALES_HDR_1.CUSTOMER_NAME" +
                "_ENG, INV_SALES_HDR_1.DISCOUNT, \r\n                         INV_SALES_HDR_1.SALE_" +
                "TYPE";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@group", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GROUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@trademark", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TRADEMARK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cus", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@item1", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "TypeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@doc", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "SALE_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@item", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT        INV_SALES_HDR.DOC_ID AS INVOICENO, INV_SALES_HDR.DOC_NO AS Docno, I" +
                "NV_SALES_HDR.DOC_DATE_GRE AS Date, \r\n                         INV_SALES_DTL.ITEM" +
                "_CODE AS Itemcode, SUM(INV_SALES_DTL.QUANTITY) * - 1 AS Quantity, SUM(INV_SALES_" +
                "DTL.GROSS_TOTAL) * - 1 AS GrossTotal, \r\n                         SUM(INV_SALES_D" +
                "TL.ITEM_TOTAL) * - 1 AS ItemTotal, SUM(INV_SALES_DTL.ITEM_DISCOUNT) * - 1 AS Dis" +
                "count, INV_SALES_DTL.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTOR" +
                "Y.TYPE, INV_ITEM_TYPE.DESC_ENG AS TypeName, INV_ITEM_CATEGORY.DESC_ENG AS Catego" +
                "ryname, \r\n                         INV_ITEM_TM.DESC_ENG AS TMname, INV_ITEM_GROU" +
                "P.DESC_ENG AS Groupname, INV_SALES_HDR.DOC_TYPE, INV_SALES_DTL.UOM, \r\n          " +
                "               INV_SALES_DTL.GROSS_TOTAL * - 1 AS GROSS_TOTAL, INV_ITEM_DIRECTOR" +
                "Y.[GROUP], INV_ITEM_DIRECTORY.CATEGORY, INV_ITEM_DIRECTORY.TRADEMARK, \r\n        " +
                "                 INV_UNIT.DESC_ENG AS Unitname, INV_SALES_HDR.CUSTOMER_CODE, SYS" +
                "_DOC_TYPE.DESC_ENG AS DocumentType, \r\n                         INV_SALES_HDR.CUS" +
                "TOMER_NAME_ENG AS Customer, SUM(INV_SALES_DTL.ITEM_TAX) * - 1 AS TaxTotal, CASE " +
                "WHEN ROW_NUMBER() OVER (PARTITION BY \r\n                         INV_SALES_HDR.DO" +
                "C_NO\r\nORDER BY INV_SALES_DTL.ITEM_DESC_ENG) = 1 THEN INV_SALES_HDR.DISCOUNT * - " +
                "1 ELSE 0 END AS TotalDiscount, INV_SALES_HDR.SALE_TYPE\r\nFROM            INV_SALE" +
                "S_HDR LEFT OUTER JOIN\r\n                         INV_SALES_DTL ON INV_SALES_HDR.D" +
                "OC_NO = INV_SALES_DTL.DOC_NO LEFT OUTER JOIN\r\n                         INV_ITEM_" +
                "DIRECTORY ON INV_SALES_DTL.ITEM_CODE = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n" +
                "                         INV_ITEM_TYPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TYP" +
                "E.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_CATEGORY ON INV_ITEM_D" +
                "IRECTORY.CATEGORY = INV_ITEM_CATEGORY.CODE LEFT OUTER JOIN\r\n                    " +
                "     INV_ITEM_TM ON INV_ITEM_TM.CODE = INV_ITEM_DIRECTORY.TRADEMARK LEFT OUTER J" +
                "OIN\r\n                         INV_UNIT ON INV_SALES_DTL.UOM = INV_UNIT.CODE LEFT" +
                " OUTER JOIN\r\n                         INV_ITEM_GROUP ON INV_ITEM_DIRECTORY.[GROU" +
                "P] = INV_ITEM_GROUP.CODE LEFT OUTER JOIN\r\n                         SYS_DOC_TYPE " +
                "ON SYS_DOC_TYPE.CODE = INV_SALES_HDR.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY." +
                "[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_ITEM_DIRECTORY.CATEGORY LIKE \'%\' + @ca" +
                "tegory + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY.TRADEMARK LIKE " +
                "\'%\' + @trademark + \'%\') AND (INV_SALES_HDR.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') " +
                "AND \r\n                         (INV_ITEM_DIRECTORY.TYPE LIKE \'%\' + @type + \'%\') " +
                "AND (INV_SALES_HDR.DOC_TYPE = \'SAL.CSR\') AND (INV_SALES_HDR.FLAGDEL = \'True\') AN" +
                "D \r\n                         (convert(varchar, INV_SALES_HDR.DOC_DATE_GRE, 101) " +
                ">= @date) AND (convert(varchar, INV_SALES_HDR.DOC_DATE_GRE,101) <= @date2) AND (" +
                "INV_SALES_HDR.SALE_TYPE LIKE \'%\' + @doc + \'%\') AND \r\n                         IN" +
                "V_SALES_DTL.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\'\r\nGROUP BY INV_SALES_HDR.DOC_ID," +
                " INV_SALES_HDR.DOC_DATE_GRE, INV_SALES_DTL.ITEM_CODE, INV_SALES_DTL.ITEM_DESC_EN" +
                "G, INV_ITEM_DIRECTORY.TYPE, \r\n                         INV_SALES_HDR.TAX_TOTAL, " +
                "INV_ITEM_TYPE.DESC_ENG, INV_ITEM_CATEGORY.DESC_ENG, INV_ITEM_TM.DESC_ENG, INV_IT" +
                "EM_GROUP.DESC_ENG, \r\n                         INV_SALES_HDR.DOC_TYPE, INV_SALES_" +
                "DTL.UOM, INV_SALES_DTL.GROSS_TOTAL, INV_ITEM_DIRECTORY.[GROUP], INV_ITEM_DIRECTO" +
                "RY.CATEGORY, \r\n                         INV_ITEM_DIRECTORY.TRADEMARK, INV_UNIT.D" +
                "ESC_ENG, INV_SALES_HDR.CUSTOMER_CODE, SYS_DOC_TYPE.DESC_ENG, INV_SALES_HDR.DOC_N" +
                "O, \r\n                         INV_SALES_HDR.CUSTOMER_NAME_ENG, INV_SALES_HDR.DIS" +
                "COUNT, INV_SALES_HDR.SALE_TYPE\r\nUNION ALL\r\nSELECT        INV_SALES_HDR_3.DOC_ID " +
                "AS INVOICENO, INV_SALES_HDR_3.DOC_NO AS Docno, INV_SALES_HDR_3.DOC_DATE_GRE AS D" +
                "ate, \r\n                         INV_SALES_DTL_3.ITEM_CODE AS Itemcode, SUM(INV_S" +
                "ALES_DTL_3.QUANTITY) AS Quantity, SUM(INV_SALES_DTL_3.GROSS_TOTAL) AS GrossTotal" +
                ", \r\n                         SUM(INV_SALES_DTL_3.ITEM_TOTAL) AS ItemTotal, SUM(I" +
                "NV_SALES_DTL_3.ITEM_DISCOUNT) AS Discount, INV_SALES_DTL_3.ITEM_DESC_ENG, \r\n    " +
                "                     INV_ITEM_DIRECTORY_3.TYPE, INV_ITEM_TYPE_3.DESC_ENG AS Type" +
                "Name, INV_ITEM_CATEGORY_3.DESC_ENG AS Categoryname, \r\n                         I" +
                "NV_ITEM_TM_3.DESC_ENG AS TMname, INV_ITEM_GROUP_3.DESC_ENG AS Groupname, INV_SAL" +
                "ES_HDR_3.DOC_TYPE, INV_SALES_DTL_3.UOM, \r\n                         INV_SALES_DTL" +
                "_3.GROSS_TOTAL, INV_ITEM_DIRECTORY_3.[GROUP], INV_ITEM_DIRECTORY_3.CATEGORY, INV" +
                "_ITEM_DIRECTORY_3.TRADEMARK, \r\n                         INV_UNIT_3.DESC_ENG AS U" +
                "nitname, INV_SALES_HDR_3.CUSTOMER_CODE, SYS_DOC_TYPE_3.DESC_ENG AS DocumentType," +
                " \r\n                         INV_SALES_HDR_3.CUSTOMER_NAME_ENG AS Customer, SUM(I" +
                "NV_SALES_DTL_3.ITEM_TAX) AS TaxTotal, CASE WHEN ROW_NUMBER() OVER (PARTITION BY " +
                "\r\n                         INV_SALES_HDR_3.DOC_NO\r\nORDER BY INV_SALES_DTL_3.ITEM" +
                "_DESC_ENG) = 1 THEN INV_SALES_HDR_3.DISCOUNT ELSE 0 END AS TotalDiscount, INV_SA" +
                "LES_HDR_3.SALE_TYPE\r\nFROM            INV_SALES_HDR AS INV_SALES_HDR_3 LEFT OUTER" +
                " JOIN\r\n                         INV_SALES_DTL AS INV_SALES_DTL_3 ON INV_SALES_HD" +
                "R_3.DOC_NO = INV_SALES_DTL_3.DOC_NO LEFT OUTER JOIN\r\n                         IN" +
                "V_ITEM_DIRECTORY AS INV_ITEM_DIRECTORY_3 ON INV_SALES_DTL_3.ITEM_CODE = INV_ITEM" +
                "_DIRECTORY_3.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TYPE AS INV" +
                "_ITEM_TYPE_3 ON INV_ITEM_DIRECTORY_3.TYPE = INV_ITEM_TYPE_3.CODE LEFT OUTER JOIN" +
                "\r\n                         INV_ITEM_CATEGORY AS INV_ITEM_CATEGORY_3 ON INV_ITEM_" +
                "DIRECTORY_3.CATEGORY = INV_ITEM_CATEGORY_3.CODE LEFT OUTER JOIN\r\n               " +
                "          INV_ITEM_TM AS INV_ITEM_TM_3 ON INV_ITEM_TM_3.CODE = INV_ITEM_DIRECTOR" +
                "Y_3.TRADEMARK LEFT OUTER JOIN\r\n                         INV_UNIT AS INV_UNIT_3 O" +
                "N INV_SALES_DTL_3.UOM = INV_UNIT_3.CODE LEFT OUTER JOIN\r\n                       " +
                "  INV_ITEM_GROUP AS INV_ITEM_GROUP_3 ON INV_ITEM_DIRECTORY_3.[GROUP] = INV_ITEM_" +
                "GROUP_3.CODE LEFT OUTER JOIN\r\n                         SYS_DOC_TYPE AS SYS_DOC_T" +
                "YPE_3 ON SYS_DOC_TYPE_3.CODE = INV_SALES_HDR_3.DOC_TYPE\r\nWHERE        (INV_ITEM_" +
                "DIRECTORY_3.[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_ITEM_DIRECTORY_3.CATEGORY " +
                "LIKE \'%\' + @category + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY_3" +
                ".TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (INV_SALES_HDR_3.CUSTOMER_CODE LIKE " +
                "\'%\' + @cus + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY_3.TYPE LIKE" +
                " \'%\' + @type + \'%\') AND (INV_SALES_HDR_3.DOC_TYPE = \'SAL.CRD\') AND (INV_SALES_HD" +
                "R_3.FLAGDEL = \'True\') AND \r\n                         (convert(varchar, INV_SALES" +
                "_HDR_3.DOC_DATE_GRE,101) >= @date) AND (convert(varchar, INV_SALES_HDR_3.DOC_DAT" +
                "E_GRE,101) <= @date2) AND (INV_SALES_HDR_3.SALE_TYPE LIKE \'%\' + @doc + \'%\') \r\n  " +
                "                       AND INV_SALES_DTL_3.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\'\r" +
                "\nGROUP BY INV_SALES_HDR_3.DOC_ID, INV_SALES_HDR_3.DOC_DATE_GRE, INV_SALES_DTL_3." +
                "ITEM_CODE, INV_SALES_DTL_3.ITEM_DESC_ENG, \r\n                         INV_ITEM_DI" +
                "RECTORY_3.TYPE, INV_SALES_HDR_3.TAX_TOTAL, INV_ITEM_TYPE_3.DESC_ENG, INV_ITEM_CA" +
                "TEGORY_3.DESC_ENG, \r\n                         INV_ITEM_TM_3.DESC_ENG, INV_ITEM_G" +
                "ROUP_3.DESC_ENG, INV_SALES_HDR_3.DOC_TYPE, INV_SALES_DTL_3.UOM, INV_SALES_DTL_3." +
                "GROSS_TOTAL, \r\n                         INV_ITEM_DIRECTORY_3.[GROUP], INV_ITEM_D" +
                "IRECTORY_3.CATEGORY, INV_ITEM_DIRECTORY_3.TRADEMARK, INV_UNIT_3.DESC_ENG, \r\n    " +
                "                     INV_SALES_HDR_3.CUSTOMER_CODE, SYS_DOC_TYPE_3.DESC_ENG, INV" +
                "_SALES_HDR_3.DOC_NO, INV_SALES_HDR_3.CUSTOMER_NAME_ENG, \r\n                      " +
                "   INV_SALES_HDR_3.DISCOUNT, INV_SALES_HDR_3.SALE_TYPE\r\nUNION ALL\r\nSELECT       " +
                " INV_SALES_HDR_2.DOC_ID AS INVOICENO, INV_SALES_HDR_2.DOC_NO AS Docno, INV_SALES" +
                "_HDR_2.DOC_DATE_GRE AS Date, \r\n                         INV_SALES_DTL_2.ITEM_COD" +
                "E AS Itemcode, SUM(INV_SALES_DTL_2.QUANTITY) AS Quantity, SUM(INV_SALES_DTL_2.GR" +
                "OSS_TOTAL) AS GrossTotal, \r\n                         SUM(INV_SALES_DTL_2.ITEM_TO" +
                "TAL) AS ItemTotal, SUM(INV_SALES_DTL_2.ITEM_DISCOUNT) AS Discount, INV_SALES_DTL" +
                "_2.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTORY_2.TYPE, INV_ITEM" +
                "_TYPE_2.DESC_ENG AS TypeName, INV_ITEM_CATEGORY_2.DESC_ENG AS Categoryname, \r\n  " +
                "                       INV_ITEM_TM_2.DESC_ENG AS TMname, INV_ITEM_GROUP_2.DESC_E" +
                "NG AS Groupname, INV_SALES_HDR_2.DOC_TYPE, INV_SALES_DTL_2.UOM, \r\n              " +
                "           INV_SALES_DTL_2.GROSS_TOTAL, INV_ITEM_DIRECTORY_2.[GROUP], INV_ITEM_D" +
                "IRECTORY_2.CATEGORY, INV_ITEM_DIRECTORY_2.TRADEMARK, \r\n                         " +
                "INV_UNIT_2.DESC_ENG AS Unitname, INV_SALES_HDR_2.CUSTOMER_CODE, SYS_DOC_TYPE_2.D" +
                "ESC_ENG AS DocumentType, \r\n                         INV_SALES_HDR_2.CUSTOMER_NAM" +
                "E_ENG AS Customer, SUM(INV_SALES_DTL_2.ITEM_TAX) AS TaxTotal, CASE WHEN ROW_NUMB" +
                "ER() OVER (PARTITION BY \r\n                         INV_SALES_HDR_2.DOC_NO\r\nORDER" +
                " BY INV_SALES_DTL_2.ITEM_DESC_ENG) = 1 THEN INV_SALES_HDR_2.DISCOUNT ELSE 0 END " +
                "AS TotalDiscount, INV_SALES_HDR_2.SALE_TYPE\r\nFROM            INV_SALES_HDR AS IN" +
                "V_SALES_HDR_2 LEFT OUTER JOIN\r\n                         INV_SALES_DTL AS INV_SAL" +
                "ES_DTL_2 ON INV_SALES_HDR_2.DOC_NO = INV_SALES_DTL_2.DOC_NO LEFT OUTER JOIN\r\n   " +
                "                      INV_ITEM_DIRECTORY AS INV_ITEM_DIRECTORY_2 ON INV_SALES_DT" +
                "L_2.ITEM_CODE = INV_ITEM_DIRECTORY_2.CODE LEFT OUTER JOIN\r\n                     " +
                "    INV_ITEM_TYPE AS INV_ITEM_TYPE_2 ON INV_ITEM_DIRECTORY_2.TYPE = INV_ITEM_TYP" +
                "E_2.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_CATEGORY AS INV_ITEM" +
                "_CATEGORY_2 ON INV_ITEM_DIRECTORY_2.CATEGORY = INV_ITEM_CATEGORY_2.CODE LEFT OUT" +
                "ER JOIN\r\n                         INV_ITEM_TM AS INV_ITEM_TM_2 ON INV_ITEM_TM_2." +
                "CODE = INV_ITEM_DIRECTORY_2.TRADEMARK LEFT OUTER JOIN\r\n                         " +
                "INV_UNIT AS INV_UNIT_2 ON INV_SALES_DTL_2.UOM = INV_UNIT_2.CODE LEFT OUTER JOIN\r" +
                "\n                         INV_ITEM_GROUP AS INV_ITEM_GROUP_2 ON INV_ITEM_DIRECTO" +
                "RY_2.[GROUP] = INV_ITEM_GROUP_2.CODE LEFT OUTER JOIN\r\n                         S" +
                "YS_DOC_TYPE AS SYS_DOC_TYPE_2 ON SYS_DOC_TYPE_2.CODE = INV_SALES_HDR_2.DOC_TYPE\r" +
                "\nWHERE        (INV_ITEM_DIRECTORY_2.[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_IT" +
                "EM_DIRECTORY_2.CATEGORY LIKE \'%\' + @category + \'%\') AND \r\n                      " +
                "   (INV_ITEM_DIRECTORY_2.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (INV_SALES_H" +
                "DR_2.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND \r\n                         (INV_IT" +
                "EM_DIRECTORY_2.TYPE LIKE \'%\' + @type + \'%\') AND (INV_SALES_HDR_2.DOC_TYPE = \'SAL" +
                ".CSS\') AND (INV_SALES_HDR_2.FLAGDEL = \'True\') AND \r\n                         (co" +
                "nvert(varchar, INV_SALES_HDR_2.DOC_DATE_GRE,101) >= @date) AND (convert(varchar," +
                " INV_SALES_HDR_2.DOC_DATE_GRE,101) <= @date2) AND (INV_SALES_HDR_2.SALE_TYPE LIK" +
                "E \'%\' + @doc + \'%\') \r\n                         AND INV_SALES_DTL_2.ITEM_DESC_ENG" +
                " LIKE \'%\' + @item + \'%\'\r\nGROUP BY INV_SALES_HDR_2.DOC_ID, INV_SALES_HDR_2.DOC_DA" +
                "TE_GRE, INV_SALES_DTL_2.ITEM_CODE, INV_SALES_DTL_2.ITEM_DESC_ENG, \r\n            " +
                "             INV_ITEM_DIRECTORY_2.TYPE, INV_SALES_HDR_2.TAX_TOTAL, INV_ITEM_TYPE" +
                "_2.DESC_ENG, INV_ITEM_CATEGORY_2.DESC_ENG, \r\n                         INV_ITEM_T" +
                "M_2.DESC_ENG, INV_ITEM_GROUP_2.DESC_ENG, INV_SALES_HDR_2.DOC_TYPE, INV_SALES_DTL" +
                "_2.UOM, INV_SALES_DTL_2.GROSS_TOTAL, \r\n                         INV_ITEM_DIRECTO" +
                "RY_2.[GROUP], INV_ITEM_DIRECTORY_2.CATEGORY, INV_ITEM_DIRECTORY_2.TRADEMARK, INV" +
                "_UNIT_2.DESC_ENG, \r\n                         INV_SALES_HDR_2.CUSTOMER_CODE, SYS_" +
                "DOC_TYPE_2.DESC_ENG, INV_SALES_HDR_2.DOC_NO, INV_SALES_HDR_2.CUSTOMER_NAME_ENG, " +
                "\r\n                         INV_SALES_HDR_2.DISCOUNT, INV_SALES_HDR_2.SALE_TYPE\r\n" +
                "UNION ALL\r\nSELECT        INV_SALES_HDR_1.DOC_ID AS INVOICENO, INV_SALES_HDR_1.DO" +
                "C_NO AS Docno, INV_SALES_HDR_1.DOC_DATE_GRE AS Date, \r\n                         " +
                "INV_SALES_DTL_1.ITEM_CODE AS Itemcode, SUM(INV_SALES_DTL_1.QUANTITY) * - 1 AS Qu" +
                "antity, SUM(INV_SALES_DTL_1.GROSS_TOTAL) * - 1 AS GrossTotal, \r\n                " +
                "         SUM(INV_SALES_DTL_1.ITEM_TOTAL) * - 1 AS ItemTotal, SUM(INV_SALES_DTL_1" +
                ".ITEM_DISCOUNT) * - 1 AS Discount, INV_SALES_DTL_1.ITEM_DESC_ENG, \r\n            " +
                "             INV_ITEM_DIRECTORY_1.TYPE, INV_ITEM_TYPE_1.DESC_ENG AS TypeName, IN" +
                "V_ITEM_CATEGORY_1.DESC_ENG AS Categoryname, \r\n                         INV_ITEM_" +
                "TM_1.DESC_ENG AS TMname, INV_ITEM_GROUP_1.DESC_ENG AS Groupname, INV_SALES_HDR_1" +
                ".DOC_TYPE, INV_SALES_DTL_1.UOM, \r\n                         INV_SALES_DTL_1.GROSS" +
                "_TOTAL * - 1 AS GROSS_TOTAL, INV_ITEM_DIRECTORY_1.[GROUP], INV_ITEM_DIRECTORY_1." +
                "CATEGORY, \r\n                         INV_ITEM_DIRECTORY_1.TRADEMARK, INV_UNIT_1." +
                "DESC_ENG AS Unitname, INV_SALES_HDR_1.CUSTOMER_CODE, \r\n                         " +
                "SYS_DOC_TYPE_1.DESC_ENG AS DocumentType, INV_SALES_HDR_1.CUSTOMER_NAME_ENG AS Cu" +
                "stomer, SUM(INV_SALES_DTL_1.ITEM_TAX) * - 1 AS TaxTotal, \r\n                     " +
                "    CASE WHEN ROW_NUMBER() OVER (PARTITION BY INV_SALES_HDR_1.DOC_NO\r\nORDER BY I" +
                "NV_SALES_DTL_1.ITEM_DESC_ENG) = 1 THEN INV_SALES_HDR_1.DISCOUNT * - 1 ELSE 0 END" +
                " AS TotalDiscount, INV_SALES_HDR_1.SALE_TYPE\r\nFROM            INV_SALES_HDR AS I" +
                "NV_SALES_HDR_1 LEFT OUTER JOIN\r\n                         INV_SALES_DTL AS INV_SA" +
                "LES_DTL_1 ON INV_SALES_HDR_1.DOC_NO = INV_SALES_DTL_1.DOC_NO LEFT OUTER JOIN\r\n  " +
                "                       INV_ITEM_DIRECTORY AS INV_ITEM_DIRECTORY_1 ON INV_SALES_D" +
                "TL_1.ITEM_CODE = INV_ITEM_DIRECTORY_1.CODE LEFT OUTER JOIN\r\n                    " +
                "     INV_ITEM_TYPE AS INV_ITEM_TYPE_1 ON INV_ITEM_DIRECTORY_1.TYPE = INV_ITEM_TY" +
                "PE_1.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_CATEGORY AS INV_ITE" +
                "M_CATEGORY_1 ON INV_ITEM_DIRECTORY_1.CATEGORY = INV_ITEM_CATEGORY_1.CODE LEFT OU" +
                "TER JOIN\r\n                         INV_ITEM_TM AS INV_ITEM_TM_1 ON INV_ITEM_TM_1" +
                ".CODE = INV_ITEM_DIRECTORY_1.TRADEMARK LEFT OUTER JOIN\r\n                        " +
                " INV_UNIT AS INV_UNIT_1 ON INV_SALES_DTL_1.UOM = INV_UNIT_1.CODE LEFT OUTER JOIN" +
                "\r\n                         INV_ITEM_GROUP AS INV_ITEM_GROUP_1 ON INV_ITEM_DIRECT" +
                "ORY_1.[GROUP] = INV_ITEM_GROUP_1.CODE LEFT OUTER JOIN\r\n                         " +
                "SYS_DOC_TYPE AS SYS_DOC_TYPE_1 ON SYS_DOC_TYPE_1.CODE = INV_SALES_HDR_1.DOC_TYPE" +
                "\r\nWHERE        (INV_ITEM_DIRECTORY_1.[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_I" +
                "TEM_DIRECTORY_1.CATEGORY LIKE \'%\' + @category + \'%\') AND \r\n                     " +
                "    (INV_ITEM_DIRECTORY_1.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (INV_SALES_" +
                "HDR_1.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND \r\n                         (INV_I" +
                "TEM_DIRECTORY_1.TYPE LIKE \'%\' + @type + \'%\') AND (INV_SALES_HDR_1.DOC_TYPE = \'SA" +
                "L.CDR\') AND (INV_SALES_HDR_1.FLAGDEL = \'True\') AND \r\n                         (c" +
                "onvert(varchar, INV_SALES_HDR_1.DOC_DATE_GRE,101) >= @date) AND (convert(varchar" +
                ", INV_SALES_HDR_1.DOC_DATE_GRE ,101)<= @date2) AND (INV_SALES_HDR_1.SALE_TYPE LI" +
                "KE \'%\' + @doc + \'%\') \r\n                         AND INV_SALES_DTL_1.ITEM_DESC_EN" +
                "G LIKE \'%\' + @item + \'%\'\r\nGROUP BY INV_SALES_HDR_1.DOC_ID, INV_SALES_HDR_1.DOC_D" +
                "ATE_GRE, INV_SALES_DTL_1.ITEM_CODE, INV_SALES_DTL_1.ITEM_DESC_ENG, \r\n           " +
                "              INV_ITEM_DIRECTORY_1.TYPE, INV_SALES_HDR_1.TAX_TOTAL, INV_ITEM_TYP" +
                "E_1.DESC_ENG, INV_ITEM_CATEGORY_1.DESC_ENG, \r\n                         INV_ITEM_" +
                "TM_1.DESC_ENG, INV_ITEM_GROUP_1.DESC_ENG, INV_SALES_HDR_1.DOC_TYPE, INV_SALES_DT" +
                "L_1.UOM, INV_SALES_DTL_1.GROSS_TOTAL, \r\n                         INV_ITEM_DIRECT" +
                "ORY_1.[GROUP], INV_ITEM_DIRECTORY_1.CATEGORY, INV_ITEM_DIRECTORY_1.TRADEMARK, IN" +
                "V_UNIT_1.DESC_ENG, \r\n                         INV_SALES_HDR_1.CUSTOMER_CODE, SYS" +
                "_DOC_TYPE_1.DESC_ENG, INV_SALES_HDR_1.DOC_NO, INV_SALES_HDR_1.CUSTOMER_NAME_ENG," +
                " \r\n                         INV_SALES_HDR_1.DISCOUNT, INV_SALES_HDR_1.SALE_TYPE";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@group", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GROUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@trademark", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TRADEMARK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cus", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@doc", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "SALE_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@item", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@date", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@date2", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT        INV_SALES_HDR.DOC_ID AS INVOICENO, INV_SALES_HDR.DOC_NO AS Docno, I" +
                "NV_SALES_HDR.DOC_DATE_GRE AS Date, \r\n                         INV_SALES_DTL.ITEM" +
                "_CODE AS Itemcode, SUM(INV_SALES_DTL.QUANTITY) * - 1 AS Quantity, SUM(INV_SALES_" +
                "DTL.GROSS_TOTAL) * - 1 AS GrossTotal, \r\n                         SUM(INV_SALES_D" +
                "TL.ITEM_TOTAL) * - 1 AS ItemTotal, SUM(INV_SALES_DTL.ITEM_DISCOUNT) * - 1 AS Dis" +
                "count, INV_SALES_DTL.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTOR" +
                "Y.TYPE, INV_ITEM_TYPE.DESC_ENG AS TypeName, INV_ITEM_CATEGORY.DESC_ENG AS Catego" +
                "ryname, \r\n                         INV_ITEM_TM.DESC_ENG AS TMname, INV_ITEM_GROU" +
                "P.DESC_ENG AS Groupname, INV_SALES_HDR.DOC_TYPE, INV_SALES_DTL.U + OM, \r\n       " +
                "                  INV_SALES_DTL.GROSS_TOTAL * - 1 AS GROSS_TOTAL, INV_ITEM_DIREC" +
                "TORY.[GROUP], INV_ITEM_DIRECTORY.CATEGORY, INV_ITEM_DIRECTORY.TRADEMARK, \r\n     " +
                "                    INV_UNIT.DESC_ENG AS Unitname, INV_SALES_HDR.CUSTOMER_CODE, " +
                "SYS_DOC_TYPE.DESC_ENG AS DocumentType, \r\n                         INV_SALES_HDR." +
                "CUSTOMER_NAME_ENG AS Customer, INV_SALES_HDR.TAX_TOTAL * - 1 AS TaxTotal, CASE W" +
                "HEN ROW_NUMBER() OVER (PARTITION BY \r\n                         INV_SALES_HDR.DOC" +
                "_NO\r\nORDER BY INV_SALES_DTL.ITEM_DESC_ENG) = 1 THEN INV_SALES_HDR.DISCOUNT * - 1" +
                " ELSE 0 END AS TotalDiscount\r\nFROM            INV_SALES_HDR LEFT OUTER JOIN\r\n   " +
                "                      INV_SALES_DTL ON INV_SALES_HDR.DOC_NO = INV_SALES_DTL.DOC_" +
                "NO LEFT OUTER JOIN\r\n                         INV_ITEM_DIRECTORY ON INV_SALES_DTL" +
                ".ITEM_CODE = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n                         I" +
                "NV_ITEM_TYPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TYPE.CODE LEFT OUTER JOIN\r\n  " +
                "                       INV_ITEM_CATEGORY ON INV_ITEM_DIRECTORY.CATEGORY = INV_IT" +
                "EM_CATEGORY.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TM ON INV_IT" +
                "EM_TM.CODE = INV_ITEM_DIRECTORY.TRADEMARK LEFT OUTER JOIN\r\n                     " +
                "    INV_UNIT ON INV_SALES_DTL.UOM = INV_UNIT.CODE LEFT OUTER JOIN\r\n             " +
                "            INV_ITEM_GROUP ON INV_ITEM_DIRECTORY.[GROUP] = INV_ITEM_GROUP.CODE L" +
                "EFT OUTER JOIN\r\n                         SYS_DOC_TYPE ON SYS_DOC_TYPE.CODE = INV" +
                "_SALES_HDR.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY.[GROUP] LIKE \'%\' + @group " +
                "+ \'%\') AND (INV_ITEM_DIRECTORY.CATEGORY LIKE \'%\' + @category + \'%\') AND \r\n      " +
                "                   (INV_ITEM_DIRECTORY.TRADEMARK LIKE \'%\' + @trademark + \'%\') AN" +
                "D (INV_SALES_HDR.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND \r\n                    " +
                "     (INV_ITEM_DIRECTORY.TYPE LIKE \'%\' + @type + \'%\') AND (INV_SALES_HDR.DOC_TYP" +
                "E LIKE \'%\' + @doc + \'%\') AND (INV_SALES_HDR.DOC_TYPE = \'SAL.CSR\') AND \r\n        " +
                "                 (INV_SALES_HDR.FLAGDEL = \'False\') AND INV_SALES_DTL.ITEM_DESC_E" +
                "NG LIKE \'%\' + @item + \'%\'\r\nGROUP BY INV_SALES_HDR.DOC_ID, INV_SALES_HDR.DOC_DATE" +
                "_GRE, INV_SALES_DTL.ITEM_CODE, INV_SALES_DTL.ITEM_DESC_ENG, INV_ITEM_DIRECTORY.T" +
                "YPE, \r\n                         INV_SALES_HDR.TAX_TOTAL, INV_ITEM_TYPE.DESC_ENG," +
                " INV_ITEM_CATEGORY.DESC_ENG, INV_ITEM_TM.DESC_ENG, INV_ITEM_GROUP.DESC_ENG, \r\n  " +
                "                       INV_SALES_HDR.DOC_TYPE, INV_SALES_DTL.UOM, INV_SALES_DTL." +
                "GROSS_TOTAL, INV_ITEM_DIRECTORY.[GROUP], INV_ITEM_DIRECTORY.CATEGORY, \r\n        " +
                "                 INV_ITEM_DIRECTORY.TRADEMARK, INV_UNIT.DESC_ENG, INV_SALES_HDR." +
                "CUSTOMER_CODE, SYS_DOC_TYPE.DESC_ENG, INV_SALES_HDR.DOC_NO, \r\n                  " +
                "       INV_SALES_HDR.CUSTOMER_NAME_ENG, INV_SALES_HDR.DISCOUNT\r\nUNION ALL\r\nSELEC" +
                "T        INV_SALES_HDR_3.DOC_ID AS INVOICENO, INV_SALES_HDR_3.DOC_NO AS Docno, I" +
                "NV_SALES_HDR_3.DOC_DATE_GRE AS Date, \r\n                         INV_SALES_DTL_3." +
                "ITEM_CODE AS Itemcode, SUM(INV_SALES_DTL_3.QUANTITY) AS Quantity, SUM(INV_SALES_" +
                "DTL_3.GROSS_TOTAL) AS GrossTotal, \r\n                         SUM(INV_SALES_DTL_3" +
                ".ITEM_TOTAL) AS ItemTotal, SUM(INV_SALES_DTL_3.ITEM_DISCOUNT) AS Discount, INV_S" +
                "ALES_DTL_3.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTORY_3.TYPE, " +
                "INV_ITEM_TYPE_3.DESC_ENG AS TypeName, INV_ITEM_CATEGORY_3.DESC_ENG AS Categoryna" +
                "me, \r\n                         INV_ITEM_TM_3.DESC_ENG AS TMname, INV_ITEM_GROUP_" +
                "3.DESC_ENG AS Groupname, INV_SALES_HDR_3.DOC_TYPE, INV_SALES_DTL_3.UOM, \r\n      " +
                "                   INV_SALES_DTL_3.GROSS_TOTAL, INV_ITEM_DIRECTORY_3.[GROUP], IN" +
                "V_ITEM_DIRECTORY_3.CATEGORY, INV_ITEM_DIRECTORY_3.TRADEMARK, \r\n                 " +
                "        INV_UNIT_3.DESC_ENG AS Unitname, INV_SALES_HDR_3.CUSTOMER_CODE, SYS_DOC_" +
                "TYPE_3.DESC_ENG AS DocumentType, \r\n                         INV_SALES_HDR_3.CUST" +
                "OMER_NAME_ENG AS Customer, INV_SALES_HDR_3.TAX_TOTAL AS TaxTotal, CASE WHEN ROW_" +
                "NUMBER() OVER (PARTITION BY \r\n                         INV_SALES_HDR_3.DOC_NO\r\nO" +
                "RDER BY INV_SALES_DTL_3.ITEM_DESC_ENG) = 1 THEN INV_SALES_HDR_3.DISCOUNT ELSE 0 " +
                "END AS TotalDiscount\r\nFROM            INV_SALES_HDR AS INV_SALES_HDR_3 LEFT OUTE" +
                "R JOIN\r\n                         INV_SALES_DTL AS INV_SALES_DTL_3 ON INV_SALES_H" +
                "DR_3.DOC_NO = INV_SALES_DTL_3.DOC_NO LEFT OUTER JOIN\r\n                         I" +
                "NV_ITEM_DIRECTORY AS INV_ITEM_DIRECTORY_3 ON INV_SALES_DTL_3.ITEM_CODE = INV_ITE" +
                "M_DIRECTORY_3.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TYPE AS IN" +
                "V_ITEM_TYPE_3 ON INV_ITEM_DIRECTORY_3.TYPE = INV_ITEM_TYPE_3.CODE LEFT OUTER JOI" +
                "N\r\n                         INV_ITEM_CATEGORY AS INV_ITEM_CATEGORY_3 ON INV_ITEM" +
                "_DIRECTORY_3.CATEGORY = INV_ITEM_CATEGORY_3.CODE LEFT OUTER JOIN\r\n              " +
                "           INV_ITEM_TM AS INV_ITEM_TM_3 ON INV_ITEM_TM_3.CODE = INV_ITEM_DIRECTO" +
                "RY_3.TRADEMARK LEFT OUTER JOIN\r\n                         INV_UNIT AS INV_UNIT_3 " +
                "ON INV_SALES_DTL_3.UOM = INV_UNIT_3.CODE LEFT OUTER JOIN\r\n                      " +
                "   INV_ITEM_GROUP AS INV_ITEM_GROUP_3 ON INV_ITEM_DIRECTORY_3.[GROUP] = INV_ITEM" +
                "_GROUP_3.CODE LEFT OUTER JOIN\r\n                         SYS_DOC_TYPE AS SYS_DOC_" +
                "TYPE_3 ON SYS_DOC_TYPE_3.CODE = INV_SALES_HDR_3.DOC_TYPE\r\nWHERE        (INV_ITEM" +
                "_DIRECTORY_3.[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_ITEM_DIRECTORY_3.CATEGORY" +
                " LIKE \'%\' + @category + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY_" +
                "3.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (INV_SALES_HDR_3.CUSTOMER_CODE LIKE" +
                " \'%\' + @cus + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY_3.TYPE LIK" +
                "E \'%\' + @type + \'%\') AND (INV_SALES_HDR_3.DOC_TYPE LIKE \'%\' + @doc + \'%\') AND \r\n" +
                "                         (INV_SALES_HDR_3.DOC_TYPE = \'SAL.CRD\') AND (INV_SALES_H" +
                "DR_3.FLAGDEL = \'False\') AND INV_SALES_DTL_3.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\'" +
                "\r\nGROUP BY INV_SALES_HDR_3.DOC_ID, INV_SALES_HDR_3.DOC_DATE_GRE, INV_SALES_DTL_3" +
                ".ITEM_CODE, INV_SALES_DTL_3.ITEM_DESC_ENG, \r\n                         INV_ITEM_D" +
                "IRECTORY_3.TYPE, INV_SALES_HDR_3.TAX_TOTAL, INV_ITEM_TYPE_3.DESC_ENG, INV_ITEM_C" +
                "ATEGORY_3.DESC_ENG, \r\n                         INV_ITEM_TM_3.DESC_ENG, INV_ITEM_" +
                "GROUP_3.DESC_ENG, INV_SALES_HDR_3.DOC_TYPE, INV_SALES_DTL_3.UOM, INV_SALES_DTL_3" +
                ".GROSS_TOTAL, \r\n                         INV_ITEM_DIRECTORY_3.[GROUP], INV_ITEM_" +
                "DIRECTORY_3.CATEGORY, INV_ITEM_DIRECTORY_3.TRADEMARK, INV_UNIT_3.DESC_ENG, \r\n   " +
                "                      INV_SALES_HDR_3.CUSTOMER_CODE, SYS_DOC_TYPE_3.DESC_ENG, IN" +
                "V_SALES_HDR_3.DOC_NO, INV_SALES_HDR_3.CUSTOMER_NAME_ENG, \r\n                     " +
                "    INV_SALES_HDR_3.DISCOUNT\r\nUNION ALL\r\nSELECT        INV_SALES_HDR_2.DOC_ID AS" +
                " INVOICENO, INV_SALES_HDR_2.DOC_NO AS Docno, INV_SALES_HDR_2.DOC_DATE_GRE AS Dat" +
                "e, \r\n                         INV_SALES_DTL_2.ITEM_CODE AS Itemcode, SUM(INV_SAL" +
                "ES_DTL_2.QUANTITY) AS Quantity, SUM(INV_SALES_DTL_2.GROSS_TOTAL) AS GrossTotal, " +
                "\r\n                         SUM(INV_SALES_DTL_2.ITEM_TOTAL) AS ItemTotal, SUM(INV" +
                "_SALES_DTL_2.ITEM_DISCOUNT) AS Discount, INV_SALES_DTL_2.ITEM_DESC_ENG, \r\n      " +
                "                   INV_ITEM_DIRECTORY_2.TYPE, INV_ITEM_TYPE_2.DESC_ENG AS TypeNa" +
                "me, INV_ITEM_CATEGORY_2.DESC_ENG AS Categoryname, \r\n                         INV" +
                "_ITEM_TM_2.DESC_ENG AS TMname, INV_ITEM_GROUP_2.DESC_ENG AS Groupname, INV_SALES" +
                "_HDR_2.DOC_TYPE, INV_SALES_DTL_2.UOM, \r\n                         INV_SALES_DTL_2" +
                ".GROSS_TOTAL, INV_ITEM_DIRECTORY_2.[GROUP], INV_ITEM_DIRECTORY_2.CATEGORY, INV_I" +
                "TEM_DIRECTORY_2.TRADEMARK, \r\n                         INV_UNIT_2.DESC_ENG AS Uni" +
                "tname, INV_SALES_HDR_2.CUSTOMER_CODE, SYS_DOC_TYPE_2.DESC_ENG AS DocumentType, \r" +
                "\n                         INV_SALES_HDR_2.CUSTOMER_NAME_ENG AS Customer, INV_SAL" +
                "ES_HDR_2.TAX_TOTAL AS TaxTotal, CASE WHEN ROW_NUMBER() OVER (PARTITION BY \r\n    " +
                "                     INV_SALES_HDR_2.DOC_NO\r\nORDER BY INV_SALES_DTL_2.ITEM_DESC_" +
                "ENG) = 1 THEN INV_SALES_HDR_2.DISCOUNT ELSE 0 END AS TotalDiscount\r\nFROM        " +
                "    INV_SALES_HDR AS INV_SALES_HDR_2 LEFT OUTER JOIN\r\n                         I" +
                "NV_SALES_DTL AS INV_SALES_DTL_2 ON INV_SALES_HDR_2.DOC_NO = INV_SALES_DTL_2.DOC_" +
                "NO LEFT OUTER JOIN\r\n                         INV_ITEM_DIRECTORY AS INV_ITEM_DIRE" +
                "CTORY_2 ON INV_SALES_DTL_2.ITEM_CODE = INV_ITEM_DIRECTORY_2.CODE LEFT OUTER JOIN" +
                "\r\n                         INV_ITEM_TYPE AS INV_ITEM_TYPE_2 ON INV_ITEM_DIRECTOR" +
                "Y_2.TYPE = INV_ITEM_TYPE_2.CODE LEFT OUTER JOIN\r\n                         INV_IT" +
                "EM_CATEGORY AS INV_ITEM_CATEGORY_2 ON INV_ITEM_DIRECTORY_2.CATEGORY = INV_ITEM_C" +
                "ATEGORY_2.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TM AS INV_ITEM" +
                "_TM_2 ON INV_ITEM_TM_2.CODE = INV_ITEM_DIRECTORY_2.TRADEMARK LEFT OUTER JOIN\r\n  " +
                "                       INV_UNIT AS INV_UNIT_2 ON INV_SALES_DTL_2.UOM = INV_UNIT_" +
                "2.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_GROUP AS INV_ITEM_GROU" +
                "P_2 ON INV_ITEM_DIRECTORY_2.[GROUP] = INV_ITEM_GROUP_2.CODE LEFT OUTER JOIN\r\n   " +
                "                      SYS_DOC_TYPE AS SYS_DOC_TYPE_2 ON SYS_DOC_TYPE_2.CODE = IN" +
                "V_SALES_HDR_2.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY_2.[GROUP] LIKE \'%\' + @g" +
                "roup + \'%\') AND (INV_ITEM_DIRECTORY_2.CATEGORY LIKE \'%\' + @category + \'%\') AND \r" +
                "\n                         (INV_ITEM_DIRECTORY_2.TRADEMARK LIKE \'%\' + @trademark " +
                "+ \'%\') AND (INV_SALES_HDR_2.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND \r\n         " +
                "                (INV_ITEM_DIRECTORY_2.TYPE LIKE \'%\' + @type + \'%\') AND (INV_SALE" +
                "S_HDR_2.DOC_TYPE LIKE \'%\' + @doc + \'%\') AND \r\n                         (INV_SALE" +
                "S_HDR_2.DOC_TYPE = \'SAL.CSS\') AND (INV_SALES_HDR_2.FLAGDEL = \'False\') AND INV_SA" +
                "LES_DTL_2.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\'\r\nGROUP BY INV_SALES_HDR_2.DOC_ID," +
                " INV_SALES_HDR_2.DOC_DATE_GRE, INV_SALES_DTL_2.ITEM_CODE, INV_SALES_DTL_2.ITEM_D" +
                "ESC_ENG, \r\n                         INV_ITEM_DIRECTORY_2.TYPE, INV_SALES_HDR_2.T" +
                "AX_TOTAL, INV_ITEM_TYPE_2.DESC_ENG, INV_ITEM_CATEGORY_2.DESC_ENG, \r\n            " +
                "             INV_ITEM_TM_2.DESC_ENG, INV_ITEM_GROUP_2.DESC_ENG, INV_SALES_HDR_2." +
                "DOC_TYPE, INV_SALES_DTL_2.UOM, INV_SALES_DTL_2.GROSS_TOTAL, \r\n                  " +
                "       INV_ITEM_DIRECTORY_2.[GROUP], INV_ITEM_DIRECTORY_2.CATEGORY, INV_ITEM_DIR" +
                "ECTORY_2.TRADEMARK, INV_UNIT_2.DESC_ENG, \r\n                         INV_SALES_HD" +
                "R_2.CUSTOMER_CODE, SYS_DOC_TYPE_2.DESC_ENG, INV_SALES_HDR_2.DOC_NO, INV_SALES_HD" +
                "R_2.CUSTOMER_NAME_ENG, \r\n                         INV_SALES_HDR_2.DISCOUNT\r\nUNIO" +
                "N ALL\r\nSELECT        INV_SALES_HDR_1.DOC_ID AS INVOICENO, INV_SALES_HDR_1.DOC_NO" +
                " AS Docno, INV_SALES_HDR_1.DOC_DATE_GRE AS Date, \r\n                         INV_" +
                "SALES_DTL_1.ITEM_CODE AS Itemcode, SUM(INV_SALES_DTL_1.QUANTITY) * - 1 AS Quanti" +
                "ty, SUM(INV_SALES_DTL_1.GROSS_TOTAL) * - 1 AS GrossTotal, \r\n                    " +
                "     SUM(INV_SALES_DTL_1.ITEM_TOTAL) * - 1 AS ItemTotal, SUM(INV_SALES_DTL_1.ITE" +
                "M_DISCOUNT) * - 1 AS Discount, INV_SALES_DTL_1.ITEM_DESC_ENG, \r\n                " +
                "         INV_ITEM_DIRECTORY_1.TYPE, INV_ITEM_TYPE_1.DESC_ENG AS TypeName, INV_IT" +
                "EM_CATEGORY_1.DESC_ENG AS Categoryname, \r\n                         INV_ITEM_TM_1" +
                ".DESC_ENG AS TMname, INV_ITEM_GROUP_1.DESC_ENG AS Groupname, INV_SALES_HDR_1.DOC" +
                "_TYPE, INV_SALES_DTL_1.UOM, \r\n                         INV_SALES_DTL_1.GROSS_TOT" +
                "AL * - 1 AS GROSS_TOTAL, INV_ITEM_DIRECTORY_1.[GROUP], INV_ITEM_DIRECTORY_1.CATE" +
                "GORY, \r\n                         INV_ITEM_DIRECTORY_1.TRADEMARK, INV_UNIT_1.DESC" +
                "_ENG AS Unitname, INV_SALES_HDR_1.CUSTOMER_CODE, \r\n                         SYS_" +
                "DOC_TYPE_1.DESC_ENG AS DocumentType, INV_SALES_HDR_1.CUSTOMER_NAME_ENG AS Custom" +
                "er, INV_SALES_HDR_1.TAX_TOTAL * - 1 AS TaxTotal, \r\n                         CASE" +
                " WHEN ROW_NUMBER() OVER (PARTITION BY INV_SALES_HDR_1.DOC_NO\r\nORDER BY INV_SALES" +
                "_DTL_1.ITEM_DESC_ENG) = 1 THEN INV_SALES_HDR_1.DISCOUNT * - 1 ELSE 0 END AS Tota" +
                "lDiscount\r\nFROM            INV_SALES_HDR AS INV_SALES_HDR_1 LEFT OUTER JOIN\r\n   " +
                "                      INV_SALES_DTL AS INV_SALES_DTL_1 ON INV_SALES_HDR_1.DOC_NO" +
                " = INV_SALES_DTL_1.DOC_NO LEFT OUTER JOIN\r\n                         INV_ITEM_DIR" +
                "ECTORY AS INV_ITEM_DIRECTORY_1 ON INV_SALES_DTL_1.ITEM_CODE = INV_ITEM_DIRECTORY" +
                "_1.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TYPE AS INV_ITEM_TYPE" +
                "_1 ON INV_ITEM_DIRECTORY_1.TYPE = INV_ITEM_TYPE_1.CODE LEFT OUTER JOIN\r\n        " +
                "                 INV_ITEM_CATEGORY AS INV_ITEM_CATEGORY_1 ON INV_ITEM_DIRECTORY_" +
                "1.CATEGORY = INV_ITEM_CATEGORY_1.CODE LEFT OUTER JOIN\r\n                         " +
                "INV_ITEM_TM AS INV_ITEM_TM_1 ON INV_ITEM_TM_1.CODE = INV_ITEM_DIRECTORY_1.TRADEM" +
                "ARK LEFT OUTER JOIN\r\n                         INV_UNIT AS INV_UNIT_1 ON INV_SALE" +
                "S_DTL_1.UOM = INV_UNIT_1.CODE LEFT OUTER JOIN\r\n                         INV_ITEM" +
                "_GROUP AS INV_ITEM_GROUP_1 ON INV_ITEM_DIRECTORY_1.[GROUP] = INV_ITEM_GROUP_1.CO" +
                "DE LEFT OUTER JOIN\r\n                         SYS_DOC_TYPE AS SYS_DOC_TYPE_1 ON S" +
                "YS_DOC_TYPE_1.CODE = INV_SALES_HDR_1.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY_" +
                "1.[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_ITEM_DIRECTORY_1.CATEGORY LIKE \'%\' +" +
                " @category + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY_1.TRADEMARK" +
                " LIKE \'%\' + @trademark + \'%\') AND (INV_SALES_HDR_1.CUSTOMER_CODE LIKE \'%\' + @cus" +
                " + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY_1.TYPE LIKE \'%\' + @ty" +
                "pe + \'%\') AND (INV_SALES_HDR_1.DOC_TYPE LIKE \'%\' + @doc + \'%\') AND \r\n           " +
                "              (INV_SALES_HDR_1.DOC_TYPE = \'SAL.CDR\') AND (INV_SALES_HDR_1.FLAGDE" +
                "L = \'False\') AND INV_SALES_DTL_1.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\'\r\nGROUP BY " +
                "INV_SALES_HDR_1.DOC_ID, INV_SALES_HDR_1.DOC_DATE_GRE, INV_SALES_DTL_1.ITEM_CODE," +
                " INV_SALES_DTL_1.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTORY_1." +
                "TYPE, INV_SALES_HDR_1.TAX_TOTAL, INV_ITEM_TYPE_1.DESC_ENG, INV_ITEM_CATEGORY_1.D" +
                "ESC_ENG, \r\n                         INV_ITEM_TM_1.DESC_ENG, INV_ITEM_GROUP_1.DES" +
                "C_ENG, INV_SALES_HDR_1.DOC_TYPE, INV_SALES_DTL_1.UOM, INV_SALES_DTL_1.GROSS_TOTA" +
                "L, \r\n                         INV_ITEM_DIRECTORY_1.[GROUP], INV_ITEM_DIRECTORY_1" +
                ".CATEGORY, INV_ITEM_DIRECTORY_1.TRADEMARK, INV_UNIT_1.DESC_ENG, \r\n              " +
                "           INV_SALES_HDR_1.CUSTOMER_CODE, SYS_DOC_TYPE_1.DESC_ENG, INV_SALES_HDR" +
                "_1.DOC_NO, INV_SALES_HDR_1.CUSTOMER_NAME_ENG, \r\n                         INV_SAL" +
                "ES_HDR_1.DISCOUNT";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@group", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "GROUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@trademark", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TRADEMARK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cus", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@doc", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT        INV_SALES_HDR.DOC_ID AS INVOICENO, INV_SALES_HDR.DOC_NO AS Docno, I" +
                "NV_SALES_HDR.DOC_DATE_GRE AS Date, \r\n                         INV_SALES_DTL.ITEM" +
                "_CODE AS Itemcode, SUM(INV_SALES_DTL.QUANTITY) * - 1 AS Quantity, SUM(INV_SALES_" +
                "DTL.GROSS_TOTAL) * - 1 AS GrossTotal, \r\n                         SUM(INV_SALES_D" +
                "TL.ITEM_TOTAL) * - 1 AS ItemTotal, SUM(INV_SALES_DTL.ITEM_DISCOUNT) * - 1 AS Dis" +
                "count, INV_SALES_DTL.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTOR" +
                "Y.TYPE, INV_ITEM_TYPE.DESC_ENG AS TypeName, INV_ITEM_CATEGORY.DESC_ENG AS Catego" +
                "ryname, \r\n                         INV_ITEM_TM.DESC_ENG AS TMname, INV_ITEM_GROU" +
                "P.DESC_ENG AS Groupname, INV_SALES_HDR.DOC_TYPE, INV_SALES_DTL.UOM, \r\n          " +
                "               INV_SALES_DTL.GROSS_TOTAL * - 1 AS GROSS_TOTAL, INV_ITEM_DIRECTOR" +
                "Y.[GROUP], INV_ITEM_DIRECTORY.CATEGORY, INV_ITEM_DIRECTORY.TRADEMARK, \r\n        " +
                "                 INV_UNIT.DESC_ENG AS Unitname, INV_SALES_HDR.CUSTOMER_CODE, SYS" +
                "_DOC_TYPE.DESC_ENG AS DocumentType, \r\n                         INV_SALES_HDR.CUS" +
                "TOMER_NAME_ENG AS Customer, INV_SALES_DTL.ITEM_TAX * - 1 AS TaxTotal, INV_SALES_" +
                "HDR.DISCOUNT * - 1 AS TotalDiscount\r\nFROM            INV_SALES_HDR LEFT OUTER JO" +
                "IN\r\n                         INV_SALES_DTL ON INV_SALES_HDR.DOC_NO = INV_SALES_D" +
                "TL.DOC_NO LEFT OUTER JOIN\r\n                         INV_ITEM_DIRECTORY ON INV_SA" +
                "LES_DTL.ITEM_CODE = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n                   " +
                "      INV_ITEM_TYPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TYPE.CODE LEFT OUTER J" +
                "OIN\r\n                         INV_ITEM_CATEGORY ON INV_ITEM_DIRECTORY.CATEGORY =" +
                " INV_ITEM_CATEGORY.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TM ON" +
                " INV_ITEM_TM.CODE = INV_ITEM_DIRECTORY.TRADEMARK LEFT OUTER JOIN\r\n              " +
                "           INV_UNIT ON INV_SALES_DTL.UOM = INV_UNIT.CODE LEFT OUTER JOIN\r\n      " +
                "                   INV_ITEM_GROUP ON INV_ITEM_DIRECTORY.[GROUP] = INV_ITEM_GROUP" +
                ".CODE LEFT OUTER JOIN\r\n                         SYS_DOC_TYPE ON SYS_DOC_TYPE.COD" +
                "E = INV_SALES_HDR.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY.[GROUP] LIKE \'%\' + " +
                "@group + \'%\') AND (INV_ITEM_DIRECTORY.CATEGORY LIKE \'%\' + @category + \'%\') AND (" +
                "INV_ITEM_DIRECTORY.DESC_ENG LIKE \'%\' + @item1 + \'%\') AND \r\n                     " +
                "    (INV_ITEM_DIRECTORY.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (INV_SALES_HD" +
                "R.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND \r\n                         (INV_ITEM_" +
                "DIRECTORY.TYPE LIKE \'%\' + @type + \'%\') AND (INV_SALES_HDR.DOC_TYPE LIKE \'%\' + @d" +
                "oc + \'%\') AND (INV_SALES_HDR.DOC_TYPE = \'SAL.CSR\') AND \r\n                       " +
                "  (INV_SALES_HDR.FLAGDEL = \'True\')\r\nGROUP BY INV_SALES_HDR.DOC_ID, INV_SALES_HDR" +
                ".DOC_DATE_GRE, INV_SALES_DTL.ITEM_CODE, INV_SALES_DTL.ITEM_DESC_ENG, INV_ITEM_DI" +
                "RECTORY.TYPE, \r\n                         INV_SALES_DTL.ITEM_TAX, INV_ITEM_TYPE.D" +
                "ESC_ENG, INV_ITEM_CATEGORY.DESC_ENG, INV_ITEM_TM.DESC_ENG, INV_ITEM_GROUP.DESC_E" +
                "NG, \r\n                         INV_SALES_HDR.DOC_TYPE, INV_SALES_DTL.UOM, INV_SA" +
                "LES_DTL.GROSS_TOTAL, INV_ITEM_DIRECTORY.[GROUP], INV_ITEM_DIRECTORY.CATEGORY, \r\n" +
                "                         INV_ITEM_DIRECTORY.TRADEMARK, INV_UNIT.DESC_ENG, INV_SA" +
                "LES_HDR.CUSTOMER_CODE, SYS_DOC_TYPE.DESC_ENG, INV_SALES_HDR.DOC_NO, \r\n          " +
                "               INV_SALES_HDR.CUSTOMER_NAME_ENG, INV_SALES_HDR.DISCOUNT\r\nUNION AL" +
                "L\r\nSELECT        INV_SALES_HDR_3.DOC_ID AS INVOICENO, INV_SALES_HDR_3.DOC_NO AS " +
                "Docno, INV_SALES_HDR_3.DOC_DATE_GRE AS Date, \r\n                         INV_SALE" +
                "S_DTL_3.ITEM_CODE AS Itemcode, SUM(INV_SALES_DTL_3.QUANTITY) AS Quantity, SUM(IN" +
                "V_SALES_DTL_3.GROSS_TOTAL) AS GrossTotal, \r\n                         SUM(INV_SAL" +
                "ES_DTL_3.ITEM_TOTAL) AS ItemTotal, SUM(INV_SALES_DTL_3.ITEM_DISCOUNT) AS Discoun" +
                "t, INV_SALES_DTL_3.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTORY_" +
                "3.TYPE, INV_ITEM_TYPE_3.DESC_ENG AS TypeName, INV_ITEM_CATEGORY_3.DESC_ENG AS Ca" +
                "tegoryname, \r\n                         INV_ITEM_TM_3.DESC_ENG AS TMname, INV_ITE" +
                "M_GROUP_3.DESC_ENG AS Groupname, INV_SALES_HDR_3.DOC_TYPE, INV_SALES_DTL_3.UOM, " +
                "\r\n                         INV_SALES_DTL_3.GROSS_TOTAL, INV_ITEM_DIRECTORY_3.[GR" +
                "OUP], INV_ITEM_DIRECTORY_3.CATEGORY, INV_ITEM_DIRECTORY_3.TRADEMARK, \r\n         " +
                "                INV_UNIT_3.DESC_ENG AS Unitname, INV_SALES_HDR_3.CUSTOMER_CODE, " +
                "SYS_DOC_TYPE_3.DESC_ENG AS DocumentType, \r\n                         INV_SALES_HD" +
                "R_3.CUSTOMER_NAME_ENG AS Customer, INV_SALES_DTL_3.ITEM_TAX AS TaxTotal, INV_SAL" +
                "ES_HDR_3.DISCOUNT AS TotalDiscount\r\nFROM            INV_SALES_HDR AS INV_SALES_H" +
                "DR_3 LEFT OUTER JOIN\r\n                         INV_SALES_DTL AS INV_SALES_DTL_3 " +
                "ON INV_SALES_HDR_3.DOC_NO = INV_SALES_DTL_3.DOC_NO LEFT OUTER JOIN\r\n            " +
                "             INV_ITEM_DIRECTORY AS INV_ITEM_DIRECTORY_3 ON INV_SALES_DTL_3.ITEM_" +
                "CODE = INV_ITEM_DIRECTORY_3.CODE LEFT OUTER JOIN\r\n                         INV_I" +
                "TEM_TYPE AS INV_ITEM_TYPE_3 ON INV_ITEM_DIRECTORY_3.TYPE = INV_ITEM_TYPE_3.CODE " +
                "LEFT OUTER JOIN\r\n                         INV_ITEM_CATEGORY AS INV_ITEM_CATEGORY" +
                "_3 ON INV_ITEM_DIRECTORY_3.CATEGORY = INV_ITEM_CATEGORY_3.CODE LEFT OUTER JOIN\r\n" +
                "                         INV_ITEM_TM AS INV_ITEM_TM_3 ON INV_ITEM_TM_3.CODE = IN" +
                "V_ITEM_DIRECTORY_3.TRADEMARK LEFT OUTER JOIN\r\n                         INV_UNIT " +
                "AS INV_UNIT_3 ON INV_SALES_DTL_3.UOM = INV_UNIT_3.CODE LEFT OUTER JOIN\r\n        " +
                "                 INV_ITEM_GROUP AS INV_ITEM_GROUP_3 ON INV_ITEM_DIRECTORY_3.[GRO" +
                "UP] = INV_ITEM_GROUP_3.CODE LEFT OUTER JOIN\r\n                         SYS_DOC_TY" +
                "PE AS SYS_DOC_TYPE_3 ON SYS_DOC_TYPE_3.CODE = INV_SALES_HDR_3.DOC_TYPE\r\nWHERE   " +
                "     (INV_ITEM_DIRECTORY_3.[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_ITEM_DIRECT" +
                "ORY_3.CATEGORY LIKE \'%\' + @category + \'%\') AND (INV_ITEM_DIRECTORY_3.DESC_ENG LI" +
                "KE \'%\' + @item1 + \'%\') AND\r\n                         (INV_ITEM_DIRECTORY_3.TRADE" +
                "MARK LIKE \'%\' + @trademark + \'%\') AND (INV_SALES_HDR_3.CUSTOMER_CODE LIKE \'%\' + " +
                "@cus + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY_3.TYPE LIKE \'%\' +" +
                " @type + \'%\') AND (INV_SALES_HDR_3.DOC_TYPE LIKE \'%\' + @doc + \'%\') AND \r\n       " +
                "                  (INV_SALES_HDR_3.DOC_TYPE = \'SAL.CRD\') AND (INV_SALES_HDR_3.FL" +
                "AGDEL = \'True\')\r\nGROUP BY INV_SALES_HDR_3.DOC_ID, INV_SALES_HDR_3.DOC_DATE_GRE, " +
                "INV_SALES_DTL_3.ITEM_CODE, INV_SALES_DTL_3.ITEM_DESC_ENG, \r\n                    " +
                "     INV_ITEM_DIRECTORY_3.TYPE, INV_SALES_DTL_3.ITEM_TAX, INV_ITEM_TYPE_3.DESC_E" +
                "NG, INV_ITEM_CATEGORY_3.DESC_ENG, \r\n                         INV_ITEM_TM_3.DESC_" +
                "ENG, INV_ITEM_GROUP_3.DESC_ENG, INV_SALES_HDR_3.DOC_TYPE, INV_SALES_DTL_3.UOM, I" +
                "NV_SALES_DTL_3.GROSS_TOTAL, \r\n                         INV_ITEM_DIRECTORY_3.[GRO" +
                "UP], INV_ITEM_DIRECTORY_3.CATEGORY, INV_ITEM_DIRECTORY_3.TRADEMARK, INV_UNIT_3.D" +
                "ESC_ENG, \r\n                         INV_SALES_HDR_3.CUSTOMER_CODE, SYS_DOC_TYPE_" +
                "3.DESC_ENG, INV_SALES_HDR_3.DOC_NO, INV_SALES_HDR_3.CUSTOMER_NAME_ENG, \r\n       " +
                "                  INV_SALES_HDR_3.DISCOUNT\r\nUNION ALL\r\nSELECT        INV_SALES_H" +
                "DR_2.DOC_ID AS INVOICENO, INV_SALES_HDR_2.DOC_NO AS Docno, INV_SALES_HDR_2.DOC_D" +
                "ATE_GRE AS Date, \r\n                         INV_SALES_DTL_2.ITEM_CODE AS Itemcod" +
                "e, SUM(INV_SALES_DTL_2.QUANTITY) AS Quantity, SUM(INV_SALES_DTL_2.GROSS_TOTAL) A" +
                "S GrossTotal, \r\n                         SUM(INV_SALES_DTL_2.ITEM_TOTAL) AS Item" +
                "Total, SUM(INV_SALES_DTL_2.ITEM_DISCOUNT) AS Discount, INV_SALES_DTL_2.ITEM_DESC" +
                "_ENG, \r\n                         INV_ITEM_DIRECTORY_2.TYPE, INV_ITEM_TYPE_2.DESC" +
                "_ENG AS TypeName, INV_ITEM_CATEGORY_2.DESC_ENG AS Categoryname, \r\n              " +
                "           INV_ITEM_TM_2.DESC_ENG AS TMname, INV_ITEM_GROUP_2.DESC_ENG AS Groupn" +
                "ame, INV_SALES_HDR_2.DOC_TYPE, INV_SALES_DTL_2.UOM, \r\n                         I" +
                "NV_SALES_DTL_2.GROSS_TOTAL, INV_ITEM_DIRECTORY_2.[GROUP], INV_ITEM_DIRECTORY_2.C" +
                "ATEGORY, INV_ITEM_DIRECTORY_2.TRADEMARK, \r\n                         INV_UNIT_2.D" +
                "ESC_ENG AS Unitname, INV_SALES_HDR_2.CUSTOMER_CODE, SYS_DOC_TYPE_2.DESC_ENG AS D" +
                "ocumentType, \r\n                         INV_SALES_HDR_2.CUSTOMER_NAME_ENG AS Cus" +
                "tomer, INV_SALES_DTL_2.ITEM_TAX AS TaxTotal, INV_SALES_HDR_2.DISCOUNT AS TotalDi" +
                "scount\r\nFROM            INV_SALES_HDR AS INV_SALES_HDR_2 LEFT OUTER JOIN\r\n      " +
                "                   INV_SALES_DTL AS INV_SALES_DTL_2 ON INV_SALES_HDR_2.DOC_NO = " +
                "INV_SALES_DTL_2.DOC_NO LEFT OUTER JOIN\r\n                         INV_ITEM_DIRECT" +
                "ORY AS INV_ITEM_DIRECTORY_2 ON INV_SALES_DTL_2.ITEM_CODE = INV_ITEM_DIRECTORY_2." +
                "CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TYPE AS INV_ITEM_TYPE_2 " +
                "ON INV_ITEM_DIRECTORY_2.TYPE = INV_ITEM_TYPE_2.CODE LEFT OUTER JOIN\r\n           " +
                "              INV_ITEM_CATEGORY AS INV_ITEM_CATEGORY_2 ON INV_ITEM_DIRECTORY_2.C" +
                "ATEGORY = INV_ITEM_CATEGORY_2.CODE LEFT OUTER JOIN\r\n                         INV" +
                "_ITEM_TM AS INV_ITEM_TM_2 ON INV_ITEM_TM_2.CODE = INV_ITEM_DIRECTORY_2.TRADEMARK" +
                " LEFT OUTER JOIN\r\n                         INV_UNIT AS INV_UNIT_2 ON INV_SALES_D" +
                "TL_2.UOM = INV_UNIT_2.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_GR" +
                "OUP AS INV_ITEM_GROUP_2 ON INV_ITEM_DIRECTORY_2.[GROUP] = INV_ITEM_GROUP_2.CODE " +
                "LEFT OUTER JOIN\r\n                         SYS_DOC_TYPE AS SYS_DOC_TYPE_2 ON SYS_" +
                "DOC_TYPE_2.CODE = INV_SALES_HDR_2.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY_2.[" +
                "GROUP] LIKE \'%\' + @group + \'%\') AND (INV_ITEM_DIRECTORY_2.CATEGORY LIKE \'%\' + @c" +
                "ategory + \'%\') AND (INV_ITEM_DIRECTORY_2.DESC_ENG LIKE \'%\' + @item1 + \'%\') AND\r\n" +
                "                         (INV_ITEM_DIRECTORY_2.TRADEMARK LIKE \'%\' + @trademark +" +
                " \'%\') AND (INV_SALES_HDR_2.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND \r\n          " +
                "               (INV_ITEM_DIRECTORY_2.TYPE LIKE \'%\' + @type + \'%\') AND (INV_SALES" +
                "_HDR_2.DOC_TYPE LIKE \'%\' + @doc + \'%\') AND \r\n                         (INV_SALES" +
                "_HDR_2.DOC_TYPE = \'SAL.CSS\') AND (INV_SALES_HDR_2.FLAGDEL = \'True\')\r\nGROUP BY IN" +
                "V_SALES_HDR_2.DOC_ID, INV_SALES_HDR_2.DOC_DATE_GRE, INV_SALES_DTL_2.ITEM_CODE, I" +
                "NV_SALES_DTL_2.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTORY_2.TY" +
                "PE, INV_SALES_DTL_2.ITEM_TAX, INV_ITEM_TYPE_2.DESC_ENG, INV_ITEM_CATEGORY_2.DESC" +
                "_ENG, \r\n                         INV_ITEM_TM_2.DESC_ENG, INV_ITEM_GROUP_2.DESC_E" +
                "NG, INV_SALES_HDR_2.DOC_TYPE, INV_SALES_DTL_2.UOM, INV_SALES_DTL_2.GROSS_TOTAL, " +
                "\r\n                         INV_ITEM_DIRECTORY_2.[GROUP], INV_ITEM_DIRECTORY_2.CA" +
                "TEGORY, INV_ITEM_DIRECTORY_2.TRADEMARK, INV_UNIT_2.DESC_ENG, \r\n                 " +
                "        INV_SALES_HDR_2.CUSTOMER_CODE, SYS_DOC_TYPE_2.DESC_ENG, INV_SALES_HDR_2." +
                "DOC_NO, INV_SALES_HDR_2.CUSTOMER_NAME_ENG, \r\n                         INV_SALES_" +
                "HDR_2.DISCOUNT\r\nUNION ALL\r\nSELECT        INV_SALES_HDR_1.DOC_ID AS INVOICENO, IN" +
                "V_SALES_HDR_1.DOC_NO AS Docno, INV_SALES_HDR_1.DOC_DATE_GRE AS Date, \r\n         " +
                "                INV_SALES_DTL_1.ITEM_CODE AS Itemcode, SUM(INV_SALES_DTL_1.QUANT" +
                "ITY) * - 1 AS Quantity, SUM(INV_SALES_DTL_1.GROSS_TOTAL) * - 1 AS GrossTotal, \r\n" +
                "                         SUM(INV_SALES_DTL_1.ITEM_TOTAL) * - 1 AS ItemTotal, SUM" +
                "(INV_SALES_DTL_1.ITEM_DISCOUNT) * - 1 AS Discount, INV_SALES_DTL_1.ITEM_DESC_ENG" +
                ", \r\n                         INV_ITEM_DIRECTORY_1.TYPE, INV_ITEM_TYPE_1.DESC_ENG" +
                " AS TypeName, INV_ITEM_CATEGORY_1.DESC_ENG AS Categoryname, \r\n                  " +
                "       INV_ITEM_TM_1.DESC_ENG AS TMname, INV_ITEM_GROUP_1.DESC_ENG AS Groupname," +
                " INV_SALES_HDR_1.DOC_TYPE, INV_SALES_DTL_1.UOM, \r\n                         INV_S" +
                "ALES_DTL_1.GROSS_TOTAL * - 1 AS GROSS_TOTAL, INV_ITEM_DIRECTORY_1.[GROUP], INV_I" +
                "TEM_DIRECTORY_1.CATEGORY, \r\n                         INV_ITEM_DIRECTORY_1.TRADEM" +
                "ARK, INV_UNIT_1.DESC_ENG AS Unitname, INV_SALES_HDR_1.CUSTOMER_CODE, \r\n         " +
                "                SYS_DOC_TYPE_1.DESC_ENG AS DocumentType, INV_SALES_HDR_1.CUSTOME" +
                "R_NAME_ENG AS Customer, INV_SALES_DTL_1.ITEM_TAX * - 1 AS TaxTotal, \r\n          " +
                "               INV_SALES_HDR_1.DISCOUNT * - 1 AS TotalDiscount\r\nFROM            " +
                "INV_SALES_HDR AS INV_SALES_HDR_1 LEFT OUTER JOIN\r\n                         INV_S" +
                "ALES_DTL AS INV_SALES_DTL_1 ON INV_SALES_HDR_1.DOC_NO = INV_SALES_DTL_1.DOC_NO L" +
                "EFT OUTER JOIN\r\n                         INV_ITEM_DIRECTORY AS INV_ITEM_DIRECTOR" +
                "Y_1 ON INV_SALES_DTL_1.ITEM_CODE = INV_ITEM_DIRECTORY_1.CODE LEFT OUTER JOIN\r\n  " +
                "                       INV_ITEM_TYPE AS INV_ITEM_TYPE_1 ON INV_ITEM_DIRECTORY_1." +
                "TYPE = INV_ITEM_TYPE_1.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_C" +
                "ATEGORY AS INV_ITEM_CATEGORY_1 ON INV_ITEM_DIRECTORY_1.CATEGORY = INV_ITEM_CATEG" +
                "ORY_1.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TM AS INV_ITEM_TM_" +
                "1 ON INV_ITEM_TM_1.CODE = INV_ITEM_DIRECTORY_1.TRADEMARK LEFT OUTER JOIN\r\n      " +
                "                   INV_UNIT AS INV_UNIT_1 ON INV_SALES_DTL_1.UOM = INV_UNIT_1.CO" +
                "DE LEFT OUTER JOIN\r\n                         INV_ITEM_GROUP AS INV_ITEM_GROUP_1 " +
                "ON INV_ITEM_DIRECTORY_1.[GROUP] = INV_ITEM_GROUP_1.CODE LEFT OUTER JOIN\r\n       " +
                "                  SYS_DOC_TYPE AS SYS_DOC_TYPE_1 ON SYS_DOC_TYPE_1.CODE = INV_SA" +
                "LES_HDR_1.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY_1.[GROUP] LIKE \'%\' + @group" +
                " + \'%\') AND (INV_ITEM_DIRECTORY_1.CATEGORY LIKE \'%\' + @category + \'%\') AND (INV_" +
                "ITEM_DIRECTORY_1.DESC_ENG LIKE \'%\' + @item1 + \'%\') AND\r\n                        " +
                " (INV_ITEM_DIRECTORY_1.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (INV_SALES_HDR" +
                "_1.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND \r\n                         (INV_ITEM" +
                "_DIRECTORY_1.TYPE LIKE \'%\' + @type + \'%\') AND (INV_SALES_HDR_1.DOC_TYPE LIKE \'%\'" +
                " + @doc + \'%\') AND \r\n                         (INV_SALES_HDR_1.DOC_TYPE = \'SAL.C" +
                "DR\') AND (INV_SALES_HDR_1.FLAGDEL = \'True\')\r\nGROUP BY INV_SALES_HDR_1.DOC_ID, IN" +
                "V_SALES_HDR_1.DOC_DATE_GRE, INV_SALES_DTL_1.ITEM_CODE, INV_SALES_DTL_1.ITEM_DESC" +
                "_ENG, \r\n                         INV_ITEM_DIRECTORY_1.TYPE, INV_SALES_DTL_1.ITEM" +
                "_TAX, INV_ITEM_TYPE_1.DESC_ENG, INV_ITEM_CATEGORY_1.DESC_ENG, \r\n                " +
                "         INV_ITEM_TM_1.DESC_ENG, INV_ITEM_GROUP_1.DESC_ENG, INV_SALES_HDR_1.DOC_" +
                "TYPE, INV_SALES_DTL_1.UOM, INV_SALES_DTL_1.GROSS_TOTAL, \r\n                      " +
                "   INV_ITEM_DIRECTORY_1.[GROUP], INV_ITEM_DIRECTORY_1.CATEGORY, INV_ITEM_DIRECTO" +
                "RY_1.TRADEMARK, INV_UNIT_1.DESC_ENG, \r\n                         INV_SALES_HDR_1." +
                "CUSTOMER_CODE, SYS_DOC_TYPE_1.DESC_ENG, INV_SALES_HDR_1.DOC_NO, INV_SALES_HDR_1." +
                "CUSTOMER_NAME_ENG, \r\n                         INV_SALES_HDR_1.DISCOUNT";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@group", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GROUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@item1", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "TypeName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@trademark", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TRADEMARK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cus", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@doc", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT        INV_SALES_HDR.DOC_ID AS INVOICENO, INV_SALES_HDR.DOC_NO AS Docno, I" +
                "NV_SALES_HDR.DOC_DATE_GRE AS Date, \r\n                         INV_SALES_DTL.ITEM" +
                "_CODE AS Itemcode, SUM(INV_SALES_DTL.QUANTITY) * - 1 AS Quantity, SUM(INV_SALES_" +
                "DTL.GROSS_TOTAL) * - 1 AS GrossTotal, \r\n                         SUM(INV_SALES_D" +
                "TL.ITEM_TOTAL) * - 1 AS ItemTotal, SUM(INV_SALES_DTL.ITEM_DISCOUNT) * - 1 AS Dis" +
                "count, INV_SALES_DTL.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTOR" +
                "Y.TYPE, INV_ITEM_TYPE.DESC_ENG AS TypeName, INV_ITEM_CATEGORY.DESC_ENG AS Catego" +
                "ryname, \r\n                         INV_ITEM_TM.DESC_ENG AS TMname, INV_ITEM_GROU" +
                "P.DESC_ENG AS Groupname, INV_SALES_HDR.DOC_TYPE, INV_SALES_DTL.UOM, \r\n          " +
                "               INV_SALES_DTL.GROSS_TOTAL * - 1 AS GROSS_TOTAL, INV_ITEM_DIRECTOR" +
                "Y.[GROUP], INV_ITEM_DIRECTORY.CATEGORY, INV_ITEM_DIRECTORY.TRADEMARK, \r\n        " +
                "                 INV_UNIT.DESC_ENG AS Unitname, INV_SALES_HDR.CUSTOMER_CODE, SYS" +
                "_DOC_TYPE.DESC_ENG AS DocumentType, \r\n                         INV_SALES_HDR.CUS" +
                "TOMER_NAME_ENG AS Customer, INV_SALES_HDR.TAX_TOTAL * - 1 AS TaxTotal, CASE WHEN" +
                " ROW_NUMBER() OVER (PARTITION BY \r\n                         INV_SALES_HDR.DOC_NO" +
                "\r\nORDER BY INV_SALES_DTL.ITEM_DESC_ENG) = 1 THEN INV_SALES_HDR.DISCOUNT*-1  ELSE" +
                " 0 END AS TotalDiscount\r\n\r\nFROM            INV_SALES_HDR LEFT OUTER JOIN\r\n      " +
                "                   INV_SALES_DTL ON INV_SALES_HDR.DOC_NO = INV_SALES_DTL.DOC_NO " +
                "LEFT OUTER JOIN\r\n                         INV_ITEM_DIRECTORY ON INV_SALES_DTL.IT" +
                "EM_CODE = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n                         INV_" +
                "ITEM_TYPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TYPE.CODE LEFT OUTER JOIN\r\n     " +
                "                    INV_ITEM_CATEGORY ON INV_ITEM_DIRECTORY.CATEGORY = INV_ITEM_" +
                "CATEGORY.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TM ON INV_ITEM_" +
                "TM.CODE = INV_ITEM_DIRECTORY.TRADEMARK LEFT OUTER JOIN\r\n                        " +
                " INV_UNIT ON INV_SALES_DTL.UOM = INV_UNIT.CODE LEFT OUTER JOIN\r\n                " +
                "         INV_ITEM_GROUP ON INV_ITEM_DIRECTORY.[GROUP] = INV_ITEM_GROUP.CODE LEFT" +
                " OUTER JOIN\r\n                         SYS_DOC_TYPE ON SYS_DOC_TYPE.CODE = INV_SA" +
                "LES_HDR.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY.[GROUP] LIKE \'%\' + @group + \'" +
                "%\') AND (INV_ITEM_DIRECTORY.CATEGORY LIKE \'%\' + @category + \'%\') AND \r\n         " +
                "                (INV_ITEM_DIRECTORY.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (" +
                "INV_SALES_HDR.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND \r\n                       " +
                "  (INV_ITEM_DIRECTORY.TYPE LIKE \'%\' + @type + \'%\') AND (INV_SALES_HDR.DOC_TYPE L" +
                "IKE \'%\' + @doc + \'%\') AND (INV_SALES_HDR.DOC_TYPE = \'SAL.CSR\') AND \r\n           " +
                "              (INV_SALES_HDR.FLAGDEL = \'True\') AND (INV_SALES_HDR.DOC_DATE_GRE >" +
                "= @date) AND (INV_SALES_HDR.DOC_DATE_GRE <= @date2)\r\nGROUP BY INV_SALES_HDR.DOC_" +
                "ID, INV_SALES_HDR.DOC_DATE_GRE, INV_SALES_DTL.ITEM_CODE, INV_SALES_DTL.ITEM_DESC" +
                "_ENG, INV_ITEM_DIRECTORY.TYPE, \r\n                         INV_SALES_HDR.TAX_TOTA" +
                "L, INV_ITEM_TYPE.DESC_ENG, INV_ITEM_CATEGORY.DESC_ENG, INV_ITEM_TM.DESC_ENG, INV" +
                "_ITEM_GROUP.DESC_ENG, \r\n                         INV_SALES_HDR.DOC_TYPE, INV_SAL" +
                "ES_DTL.UOM, INV_SALES_DTL.GROSS_TOTAL, INV_ITEM_DIRECTORY.[GROUP], INV_ITEM_DIRE" +
                "CTORY.CATEGORY, \r\n                         INV_ITEM_DIRECTORY.TRADEMARK, INV_UNI" +
                "T.DESC_ENG, INV_SALES_HDR.CUSTOMER_CODE, SYS_DOC_TYPE.DESC_ENG, INV_SALES_HDR.DO" +
                "C_NO, \r\n                         INV_SALES_HDR.CUSTOMER_NAME_ENG, INV_SALES_HDR." +
                "DISCOUNT\r\nUNION ALL\r\nSELECT        INV_SALES_HDR_3.DOC_ID AS INVOICENO, INV_SALE" +
                "S_HDR_3.DOC_NO AS Docno, INV_SALES_HDR_3.DOC_DATE_GRE AS Date, \r\n               " +
                "          INV_SALES_DTL_3.ITEM_CODE AS Itemcode, SUM(INV_SALES_DTL_3.QUANTITY) A" +
                "S Quantity, SUM(INV_SALES_DTL_3.GROSS_TOTAL) AS GrossTotal, \r\n                  " +
                "       SUM(INV_SALES_DTL_3.ITEM_TOTAL) AS ItemTotal, SUM(INV_SALES_DTL_3.ITEM_DI" +
                "SCOUNT) AS Discount, INV_SALES_DTL_3.ITEM_DESC_ENG, \r\n                         I" +
                "NV_ITEM_DIRECTORY_3.TYPE, INV_ITEM_TYPE_3.DESC_ENG AS TypeName, INV_ITEM_CATEGOR" +
                "Y_3.DESC_ENG AS Categoryname, \r\n                         INV_ITEM_TM_3.DESC_ENG " +
                "AS TMname, INV_ITEM_GROUP_3.DESC_ENG AS Groupname, INV_SALES_HDR_3.DOC_TYPE, INV" +
                "_SALES_DTL_3.UOM, \r\n                         INV_SALES_DTL_3.GROSS_TOTAL, INV_IT" +
                "EM_DIRECTORY_3.[GROUP], INV_ITEM_DIRECTORY_3.CATEGORY, INV_ITEM_DIRECTORY_3.TRAD" +
                "EMARK, \r\n                         INV_UNIT_3.DESC_ENG AS Unitname, INV_SALES_HDR" +
                "_3.CUSTOMER_CODE, SYS_DOC_TYPE_3.DESC_ENG AS DocumentType, \r\n                   " +
                "      INV_SALES_HDR_3.CUSTOMER_NAME_ENG AS Customer, INV_SALES_HDR_3.TAX_TOTAL A" +
                "S TaxTotal, CASE WHEN ROW_NUMBER() OVER (PARTITION BY \r\n                        " +
                " INV_SALES_HDR_3.DOC_NO\r\nORDER BY INV_SALES_DTL_3.ITEM_DESC_ENG) = 1 THEN INV_SA" +
                "LES_HDR_3.DISCOUNT  ELSE 0 END AS TotalDiscount\r\n\r\nFROM            INV_SALES_HDR" +
                " AS INV_SALES_HDR_3 LEFT OUTER JOIN\r\n                         INV_SALES_DTL AS I" +
                "NV_SALES_DTL_3 ON INV_SALES_HDR_3.DOC_NO = INV_SALES_DTL_3.DOC_NO LEFT OUTER JOI" +
                "N\r\n                         INV_ITEM_DIRECTORY AS INV_ITEM_DIRECTORY_3 ON INV_SA" +
                "LES_DTL_3.ITEM_CODE = INV_ITEM_DIRECTORY_3.CODE LEFT OUTER JOIN\r\n               " +
                "          INV_ITEM_TYPE AS INV_ITEM_TYPE_3 ON INV_ITEM_DIRECTORY_3.TYPE = INV_IT" +
                "EM_TYPE_3.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_CATEGORY AS IN" +
                "V_ITEM_CATEGORY_3 ON INV_ITEM_DIRECTORY_3.CATEGORY = INV_ITEM_CATEGORY_3.CODE LE" +
                "FT OUTER JOIN\r\n                         INV_ITEM_TM AS INV_ITEM_TM_3 ON INV_ITEM" +
                "_TM_3.CODE = INV_ITEM_DIRECTORY_3.TRADEMARK LEFT OUTER JOIN\r\n                   " +
                "      INV_UNIT AS INV_UNIT_3 ON INV_SALES_DTL_3.UOM = INV_UNIT_3.CODE LEFT OUTER" +
                " JOIN\r\n                         INV_ITEM_GROUP AS INV_ITEM_GROUP_3 ON INV_ITEM_D" +
                "IRECTORY_3.[GROUP] = INV_ITEM_GROUP_3.CODE LEFT OUTER JOIN\r\n                    " +
                "     SYS_DOC_TYPE AS SYS_DOC_TYPE_3 ON SYS_DOC_TYPE_3.CODE = INV_SALES_HDR_3.DOC" +
                "_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY_3.[GROUP] LIKE \'%\' + @group + \'%\') AND (" +
                "INV_ITEM_DIRECTORY_3.CATEGORY LIKE \'%\' + @category + \'%\') AND \r\n                " +
                "         (INV_ITEM_DIRECTORY_3.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (INV_S" +
                "ALES_HDR_3.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND \r\n                         (" +
                "INV_ITEM_DIRECTORY_3.TYPE LIKE \'%\' + @type + \'%\') AND (INV_SALES_HDR_3.DOC_TYPE " +
                "LIKE \'%\' + @doc + \'%\') AND \r\n                         (INV_SALES_HDR_3.DOC_TYPE " +
                "= \'SAL.CRD\') AND (INV_SALES_HDR_3.FLAGDEL = \'True\') AND (INV_SALES_HDR_3.DOC_DAT" +
                "E_GRE >= @date) AND \r\n                         (INV_SALES_HDR_3.DOC_DATE_GRE <= " +
                "@date2)\r\nGROUP BY INV_SALES_HDR_3.DOC_ID, INV_SALES_HDR_3.DOC_DATE_GRE, INV_SALE" +
                "S_DTL_3.ITEM_CODE, INV_SALES_DTL_3.ITEM_DESC_ENG, \r\n                         INV" +
                "_ITEM_DIRECTORY_3.TYPE, INV_SALES_HDR_3.TAX_TOTAL, INV_ITEM_TYPE_3.DESC_ENG, INV" +
                "_ITEM_CATEGORY_3.DESC_ENG, \r\n                         INV_ITEM_TM_3.DESC_ENG, IN" +
                "V_ITEM_GROUP_3.DESC_ENG, INV_SALES_HDR_3.DOC_TYPE, INV_SALES_DTL_3.UOM, INV_SALE" +
                "S_DTL_3.GROSS_TOTAL, \r\n                         INV_ITEM_DIRECTORY_3.[GROUP], IN" +
                "V_ITEM_DIRECTORY_3.CATEGORY, INV_ITEM_DIRECTORY_3.TRADEMARK, INV_UNIT_3.DESC_ENG" +
                ", \r\n                         INV_SALES_HDR_3.CUSTOMER_CODE, SYS_DOC_TYPE_3.DESC_" +
                "ENG, INV_SALES_HDR_3.DOC_NO, INV_SALES_HDR_3.CUSTOMER_NAME_ENG, \r\n              " +
                "           INV_SALES_HDR_3.DISCOUNT\r\nUNION ALL\r\nSELECT        INV_SALES_HDR_2.DO" +
                "C_ID AS INVOICENO, INV_SALES_HDR_2.DOC_NO AS Docno, INV_SALES_HDR_2.DOC_DATE_GRE" +
                " AS Date, \r\n                         INV_SALES_DTL_2.ITEM_CODE AS Itemcode, SUM(" +
                "INV_SALES_DTL_2.QUANTITY) AS Quantity, SUM(INV_SALES_DTL_2.GROSS_TOTAL) AS Gross" +
                "Total, \r\n                         SUM(INV_SALES_DTL_2.ITEM_TOTAL) AS ItemTotal, " +
                "SUM(INV_SALES_DTL_2.ITEM_DISCOUNT) AS Discount, INV_SALES_DTL_2.ITEM_DESC_ENG, \r" +
                "\n                         INV_ITEM_DIRECTORY_2.TYPE, INV_ITEM_TYPE_2.DESC_ENG AS" +
                " TypeName, INV_ITEM_CATEGORY_2.DESC_ENG AS Categoryname, \r\n                     " +
                "    INV_ITEM_TM_2.DESC_ENG AS TMname, INV_ITEM_GROUP_2.DESC_ENG AS Groupname, IN" +
                "V_SALES_HDR_2.DOC_TYPE, INV_SALES_DTL_2.UOM, \r\n                         INV_SALE" +
                "S_DTL_2.GROSS_TOTAL, INV_ITEM_DIRECTORY_2.[GROUP], INV_ITEM_DIRECTORY_2.CATEGORY" +
                ", INV_ITEM_DIRECTORY_2.TRADEMARK, \r\n                         INV_UNIT_2.DESC_ENG" +
                " AS Unitname, INV_SALES_HDR_2.CUSTOMER_CODE, SYS_DOC_TYPE_2.DESC_ENG AS Document" +
                "Type, \r\n                         INV_SALES_HDR_2.CUSTOMER_NAME_ENG AS Customer, " +
                "INV_SALES_HDR_2.TAX_TOTAL AS TaxTotal, CASE WHEN ROW_NUMBER() OVER (PARTITION BY" +
                " \r\n                         INV_SALES_HDR_2.DOC_NO\r\nORDER BY INV_SALES_DTL_2.ITE" +
                "M_DESC_ENG) = 1 THEN INV_SALES_HDR_2.DISCOUNT  ELSE 0 END AS TotalDiscount\r\n\r\nFR" +
                "OM            INV_SALES_HDR AS INV_SALES_HDR_2 LEFT OUTER JOIN\r\n                " +
                "         INV_SALES_DTL AS INV_SALES_DTL_2 ON INV_SALES_HDR_2.DOC_NO = INV_SALES_" +
                "DTL_2.DOC_NO LEFT OUTER JOIN\r\n                         INV_ITEM_DIRECTORY AS INV" +
                "_ITEM_DIRECTORY_2 ON INV_SALES_DTL_2.ITEM_CODE = INV_ITEM_DIRECTORY_2.CODE LEFT " +
                "OUTER JOIN\r\n                         INV_ITEM_TYPE AS INV_ITEM_TYPE_2 ON INV_ITE" +
                "M_DIRECTORY_2.TYPE = INV_ITEM_TYPE_2.CODE LEFT OUTER JOIN\r\n                     " +
                "    INV_ITEM_CATEGORY AS INV_ITEM_CATEGORY_2 ON INV_ITEM_DIRECTORY_2.CATEGORY = " +
                "INV_ITEM_CATEGORY_2.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TM A" +
                "S INV_ITEM_TM_2 ON INV_ITEM_TM_2.CODE = INV_ITEM_DIRECTORY_2.TRADEMARK LEFT OUTE" +
                "R JOIN\r\n                         INV_UNIT AS INV_UNIT_2 ON INV_SALES_DTL_2.UOM =" +
                " INV_UNIT_2.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_GROUP AS INV" +
                "_ITEM_GROUP_2 ON INV_ITEM_DIRECTORY_2.[GROUP] = INV_ITEM_GROUP_2.CODE LEFT OUTER" +
                " JOIN\r\n                         SYS_DOC_TYPE AS SYS_DOC_TYPE_2 ON SYS_DOC_TYPE_2" +
                ".CODE = INV_SALES_HDR_2.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY_2.[GROUP] LIK" +
                "E \'%\' + @group + \'%\') AND (INV_ITEM_DIRECTORY_2.CATEGORY LIKE \'%\' + @category + " +
                "\'%\') AND \r\n                         (INV_ITEM_DIRECTORY_2.TRADEMARK LIKE \'%\' + @" +
                "trademark + \'%\') AND (INV_SALES_HDR_2.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND \r" +
                "\n                         (INV_ITEM_DIRECTORY_2.TYPE LIKE \'%\' + @type + \'%\') AND" +
                " (INV_SALES_HDR_2.DOC_TYPE LIKE \'%\' + @doc + \'%\') AND \r\n                        " +
                " (INV_SALES_HDR_2.DOC_TYPE = \'SAL.CSS\') AND (INV_SALES_HDR_2.FLAGDEL = \'True\') A" +
                "ND (INV_SALES_HDR_2.DOC_DATE_GRE >= @date) AND \r\n                         (INV_S" +
                "ALES_HDR_2.DOC_DATE_GRE <= @date2)\r\nGROUP BY INV_SALES_HDR_2.DOC_ID, INV_SALES_H" +
                "DR_2.DOC_DATE_GRE, INV_SALES_DTL_2.ITEM_CODE, INV_SALES_DTL_2.ITEM_DESC_ENG, \r\n " +
                "                        INV_ITEM_DIRECTORY_2.TYPE, INV_SALES_HDR_2.TAX_TOTAL, IN" +
                "V_ITEM_TYPE_2.DESC_ENG, INV_ITEM_CATEGORY_2.DESC_ENG, \r\n                        " +
                " INV_ITEM_TM_2.DESC_ENG, INV_ITEM_GROUP_2.DESC_ENG, INV_SALES_HDR_2.DOC_TYPE, IN" +
                "V_SALES_DTL_2.UOM, INV_SALES_DTL_2.GROSS_TOTAL, \r\n                         INV_I" +
                "TEM_DIRECTORY_2.[GROUP], INV_ITEM_DIRECTORY_2.CATEGORY, INV_ITEM_DIRECTORY_2.TRA" +
                "DEMARK, INV_UNIT_2.DESC_ENG, \r\n                         INV_SALES_HDR_2.CUSTOMER" +
                "_CODE, SYS_DOC_TYPE_2.DESC_ENG, INV_SALES_HDR_2.DOC_NO, INV_SALES_HDR_2.CUSTOMER" +
                "_NAME_ENG, \r\n                         INV_SALES_HDR_2.DISCOUNT\r\nUNION ALL\r\nSELEC" +
                "T        INV_SALES_HDR_1.DOC_ID AS INVOICENO, INV_SALES_HDR_1.DOC_NO AS Docno, I" +
                "NV_SALES_HDR_1.DOC_DATE_GRE AS Date, \r\n                         INV_SALES_DTL_1." +
                "ITEM_CODE AS Itemcode, SUM(INV_SALES_DTL_1.QUANTITY) * - 1 AS Quantity, SUM(INV_" +
                "SALES_DTL_1.GROSS_TOTAL) * - 1 AS GrossTotal, \r\n                         SUM(INV" +
                "_SALES_DTL_1.ITEM_TOTAL) * - 1 AS ItemTotal, SUM(INV_SALES_DTL_1.ITEM_DISCOUNT) " +
                "* - 1 AS Discount, INV_SALES_DTL_1.ITEM_DESC_ENG, \r\n                         INV" +
                "_ITEM_DIRECTORY_1.TYPE, INV_ITEM_TYPE_1.DESC_ENG AS TypeName, INV_ITEM_CATEGORY_" +
                "1.DESC_ENG AS Categoryname, \r\n                         INV_ITEM_TM_1.DESC_ENG AS" +
                " TMname, INV_ITEM_GROUP_1.DESC_ENG AS Groupname, INV_SALES_HDR_1.DOC_TYPE, INV_S" +
                "ALES_DTL_1.UOM, \r\n                         INV_SALES_DTL_1.GROSS_TOTAL * - 1 AS " +
                "GROSS_TOTAL, INV_ITEM_DIRECTORY_1.[GROUP], INV_ITEM_DIRECTORY_1.CATEGORY, \r\n    " +
                "                     INV_ITEM_DIRECTORY_1.TRADEMARK, INV_UNIT_1.DESC_ENG AS Unit" +
                "name, INV_SALES_HDR_1.CUSTOMER_CODE, \r\n                         SYS_DOC_TYPE_1.D" +
                "ESC_ENG AS DocumentType, INV_SALES_HDR_1.CUSTOMER_NAME_ENG AS Customer, INV_SALE" +
                "S_HDR_1.TAX_TOTAL * - 1 AS TaxTotal, \r\n                        CASE WHEN ROW_NUM" +
                "BER() OVER (PARTITION BY \r\n                         INV_SALES_HDR_1.DOC_NO\r\nORDE" +
                "R BY INV_SALES_DTL_1.ITEM_DESC_ENG) = 1 THEN INV_SALES_HDR_1.DISCOUNT  ELSE 0 EN" +
                "D AS TotalDiscount\r\n\r\nFROM            INV_SALES_HDR AS INV_SALES_HDR_1 LEFT OUTE" +
                "R JOIN\r\n                         INV_SALES_DTL AS INV_SALES_DTL_1 ON INV_SALES_H" +
                "DR_1.DOC_NO = INV_SALES_DTL_1.DOC_NO LEFT OUTER JOIN\r\n                         I" +
                "NV_ITEM_DIRECTORY AS INV_ITEM_DIRECTORY_1 ON INV_SALES_DTL_1.ITEM_CODE = INV_ITE" +
                "M_DIRECTORY_1.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TYPE AS IN" +
                "V_ITEM_TYPE_1 ON INV_ITEM_DIRECTORY_1.TYPE = INV_ITEM_TYPE_1.CODE LEFT OUTER JOI" +
                "N\r\n                         INV_ITEM_CATEGORY AS INV_ITEM_CATEGORY_1 ON INV_ITEM" +
                "_DIRECTORY_1.CATEGORY = INV_ITEM_CATEGORY_1.CODE LEFT OUTER JOIN\r\n              " +
                "           INV_ITEM_TM AS INV_ITEM_TM_1 ON INV_ITEM_TM_1.CODE = INV_ITEM_DIRECTO" +
                "RY_1.TRADEMARK LEFT OUTER JOIN\r\n                         INV_UNIT AS INV_UNIT_1 " +
                "ON INV_SALES_DTL_1.UOM = INV_UNIT_1.CODE LEFT OUTER JOIN\r\n                      " +
                "   INV_ITEM_GROUP AS INV_ITEM_GROUP_1 ON INV_ITEM_DIRECTORY_1.[GROUP] = INV_ITEM" +
                "_GROUP_1.CODE LEFT OUTER JOIN\r\n                         SYS_DOC_TYPE AS SYS_DOC_" +
                "TYPE_1 ON SYS_DOC_TYPE_1.CODE = INV_SALES_HDR_1.DOC_TYPE\r\nWHERE        (INV_ITEM" +
                "_DIRECTORY_1.[GROUP] LIKE \'%\' + @group + \'%\') AND (INV_ITEM_DIRECTORY_1.CATEGORY" +
                " LIKE \'%\' + @category + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY_" +
                "1.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (INV_SALES_HDR_1.CUSTOMER_CODE LIKE" +
                " \'%\' + @cus + \'%\') AND \r\n                         (INV_ITEM_DIRECTORY_1.TYPE LIK" +
                "E \'%\' + @type + \'%\') AND (INV_SALES_HDR_1.DOC_TYPE LIKE \'%\' + @doc + \'%\') AND \r\n" +
                "                         (INV_SALES_HDR_1.DOC_TYPE = \'SAL.CDR\') AND (INV_SALES_H" +
                "DR_1.FLAGDEL = \'True\') AND (INV_SALES_HDR_1.DOC_DATE_GRE >= @date) AND \r\n       " +
                "                  (INV_SALES_HDR_1.DOC_DATE_GRE <= @date2)\r\nGROUP BY INV_SALES_H" +
                "DR_1.DOC_ID, INV_SALES_HDR_1.DOC_DATE_GRE, INV_SALES_DTL_1.ITEM_CODE, INV_SALES_" +
                "DTL_1.ITEM_DESC_ENG, \r\n                         INV_ITEM_DIRECTORY_1.TYPE, INV_S" +
                "ALES_HDR_1.TAX_TOTAL, INV_ITEM_TYPE_1.DESC_ENG, INV_ITEM_CATEGORY_1.DESC_ENG, \r\n" +
                "                         INV_ITEM_TM_1.DESC_ENG, INV_ITEM_GROUP_1.DESC_ENG, INV_" +
                "SALES_HDR_1.DOC_TYPE, INV_SALES_DTL_1.UOM, INV_SALES_DTL_1.GROSS_TOTAL, \r\n      " +
                "                   INV_ITEM_DIRECTORY_1.[GROUP], INV_ITEM_DIRECTORY_1.CATEGORY, " +
                "INV_ITEM_DIRECTORY_1.TRADEMARK, INV_UNIT_1.DESC_ENG, \r\n                         " +
                "INV_SALES_HDR_1.CUSTOMER_CODE, SYS_DOC_TYPE_1.DESC_ENG, INV_SALES_HDR_1.DOC_NO, " +
                "INV_SALES_HDR_1.CUSTOMER_NAME_ENG, \r\n                         INV_SALES_HDR_1.DI" +
                "SCOUNT";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@group", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GROUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@trademark", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TRADEMARK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cus", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@doc", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@date", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@date2", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "SELECT        INV_SALES_HDR.DOC_ID AS INVOICENO, INV_SALES_HDR.DOC_NO AS Docno, I" +
                "NV_SALES_HDR.DOC_DATE_GRE AS Date, \r\n                         INV_SALES_DTL.ITEM" +
                "_CODE AS Itemcode, SUM(INV_SALES_DTL.QUANTITY) AS Quantity, SUM(INV_SALES_DTL.GR" +
                "OSS_TOTAL) AS GrossTotal, \r\n                         SUM(INV_SALES_DTL.ITEM_TOTA" +
                "L) AS ItemTotal, SUM(INV_SALES_DTL.ITEM_DISCOUNT) AS Discount, INV_SALES_DTL.ITE" +
                "M_DESC_ENG, \r\n                         INV_ITEM_DIRECTORY.TYPE, INV_ITEM_TYPE.DE" +
                "SC_ENG AS TypeName, INV_ITEM_CATEGORY.DESC_ENG AS Categoryname, \r\n              " +
                "           INV_ITEM_TM.DESC_ENG AS TMname, INV_ITEM_GROUP.DESC_ENG AS Groupname," +
                " INV_SALES_HDR.DOC_TYPE, INV_SALES_DTL.UOM, \r\n                         INV_SALES" +
                "_DTL.GROSS_TOTAL, INV_ITEM_DIRECTORY.[GROUP], INV_ITEM_DIRECTORY.CATEGORY, INV_I" +
                "TEM_DIRECTORY.TRADEMARK, \r\n                         INV_UNIT.DESC_ENG AS Unitnam" +
                "e, INV_SALES_HDR.CUSTOMER_CODE, SYS_DOC_TYPE.DESC_ENG AS DocumentType, \r\n       " +
                "                  INV_SALES_HDR.CUSTOMER_NAME_ENG AS Customer, INV_SALES_DTL.ITE" +
                "M_TAX AS TaxTotal, CASE WHEN ROW_NUMBER() OVER (PARTITION BY \r\n                 " +
                "        INV_SALES_HDR.DOC_NO\r\nORDER BY INV_SALES_DTL.ITEM_DESC_ENG) = 1 THEN INV" +
                "_SALES_HDR.DISCOUNT ELSE 0 END AS TotalDiscount, \r\n                         INV_" +
                "SALES_HDR.SALE_TYPE\r\nFROM            INV_SALES_HDR LEFT OUTER JOIN\r\n            " +
                "             INV_SALES_DTL ON INV_SALES_HDR.DOC_NO = INV_SALES_DTL.DOC_NO LEFT O" +
                "UTER JOIN\r\n                         INV_ITEM_DIRECTORY ON INV_SALES_DTL.ITEM_COD" +
                "E = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_T" +
                "YPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TYPE.CODE LEFT OUTER JOIN\r\n           " +
                "              INV_ITEM_CATEGORY ON INV_ITEM_DIRECTORY.CATEGORY = INV_ITEM_CATEGO" +
                "RY.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TM ON INV_ITEM_TM.COD" +
                "E = INV_ITEM_DIRECTORY.TRADEMARK LEFT OUTER JOIN\r\n                         INV_U" +
                "NIT ON INV_SALES_DTL.UOM = INV_UNIT.CODE LEFT OUTER JOIN\r\n                      " +
                "   INV_ITEM_GROUP ON INV_ITEM_DIRECTORY.[GROUP] = INV_ITEM_GROUP.CODE LEFT OUTER" +
                " JOIN\r\n                         SYS_DOC_TYPE ON SYS_DOC_TYPE.CODE = INV_SALES_HD" +
                "R.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY.[GROUP] LIKE \'%\' + @group + \'%\') AN" +
                "D (INV_ITEM_DIRECTORY.CATEGORY LIKE \'%\' + @category + \'%\') AND \r\n               " +
                "          (INV_SALES_DTL.ITEM_DESC_ENG LIKE \'%\' + @item1 + \'%\') AND (INV_ITEM_DI" +
                "RECTORY.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND \r\n                         (I" +
                "NV_SALES_HDR.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND (INV_ITEM_DIRECTORY.TYPE L" +
                "IKE \'%\' + @type + \'%\') AND \r\n                         (INV_SALES_HDR.DOC_TYPE LI" +
                "KE \'%\' + @stype + \'%\') AND (INV_SALES_HDR.FLAGDEL = \'True\') AND (INV_SALES_HDR.S" +
                "ALE_TYPE LIKE \'%\' + @doc + \'%\')\r\nGROUP BY INV_SALES_HDR.DOC_ID, INV_SALES_HDR.DO" +
                "C_DATE_GRE, INV_SALES_DTL.ITEM_CODE, INV_SALES_DTL.ITEM_DESC_ENG, INV_ITEM_DIREC" +
                "TORY.TYPE, \r\n                         INV_SALES_DTL.ITEM_TAX, INV_ITEM_TYPE.DESC" +
                "_ENG, INV_ITEM_CATEGORY.DESC_ENG, INV_ITEM_TM.DESC_ENG, INV_ITEM_GROUP.DESC_ENG," +
                " \r\n                         INV_SALES_HDR.DOC_TYPE, INV_SALES_DTL.UOM, INV_SALES" +
                "_DTL.GROSS_TOTAL, INV_ITEM_DIRECTORY.[GROUP], INV_ITEM_DIRECTORY.CATEGORY, \r\n   " +
                "                      INV_ITEM_DIRECTORY.TRADEMARK, INV_UNIT.DESC_ENG, INV_SALES" +
                "_HDR.CUSTOMER_CODE, SYS_DOC_TYPE.DESC_ENG, INV_SALES_HDR.DOC_NO, \r\n             " +
                "            INV_SALES_HDR.CUSTOMER_NAME_ENG, INV_SALES_HDR.DISCOUNT, INV_SALES_H" +
                "DR.SALE_TYPE";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@group", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GROUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@trademark", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TRADEMARK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cus", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@item1", global::System.Data.SqlDbType.NVarChar, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "DESC_ENG", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stype", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@doc", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "SALE_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "SELECT        INV_SALES_HDR.DOC_ID AS INVOICENO, INV_SALES_HDR.DOC_NO AS Docno, I" +
                "NV_SALES_HDR.DOC_DATE_GRE AS Date, \r\n                         INV_SALES_DTL.ITEM" +
                "_CODE AS Itemcode, SUM(INV_SALES_DTL.QUANTITY) AS Quantity, SUM(INV_SALES_DTL.GR" +
                "OSS_TOTAL) AS GrossTotal, \r\n                         SUM(INV_SALES_DTL.ITEM_TOTA" +
                "L) AS ItemTotal, SUM(INV_SALES_DTL.ITEM_DISCOUNT) AS Discount, INV_SALES_DTL.ITE" +
                "M_DESC_ENG, \r\n                         INV_ITEM_DIRECTORY.TYPE, INV_ITEM_TYPE.DE" +
                "SC_ENG AS TypeName, INV_ITEM_CATEGORY.DESC_ENG AS Categoryname, \r\n              " +
                "           INV_ITEM_TM.DESC_ENG AS TMname, INV_ITEM_GROUP.DESC_ENG AS Groupname," +
                " INV_SALES_HDR.DOC_TYPE, INV_SALES_DTL.UOM, \r\n                         INV_SALES" +
                "_DTL.GROSS_TOTAL, INV_ITEM_DIRECTORY.[GROUP], INV_ITEM_DIRECTORY.CATEGORY, INV_I" +
                "TEM_DIRECTORY.TRADEMARK, \r\n                         INV_UNIT.DESC_ENG AS Unitnam" +
                "e, INV_SALES_HDR.CUSTOMER_CODE, SYS_DOC_TYPE.DESC_ENG AS DocumentType, \r\n       " +
                "                  INV_SALES_HDR.CUSTOMER_NAME_ENG AS Customer, SUM(INV_SALES_DTL" +
                ".ITEM_TAX) AS TaxTotal, CASE WHEN ROW_NUMBER() OVER (PARTITION BY \r\n            " +
                "             INV_SALES_HDR.DOC_NO\r\nORDER BY INV_SALES_DTL.ITEM_DESC_ENG) = 1 THE" +
                "N INV_SALES_HDR.DISCOUNT ELSE 0 END AS TotalDiscount, \r\n                        " +
                " INV_SALES_HDR.SALE_TYPE\r\nFROM            INV_SALES_HDR LEFT OUTER JOIN\r\n       " +
                "                  INV_SALES_DTL ON INV_SALES_HDR.DOC_NO = INV_SALES_DTL.DOC_NO L" +
                "EFT OUTER JOIN\r\n                         INV_ITEM_DIRECTORY ON INV_SALES_DTL.ITE" +
                "M_CODE = INV_ITEM_DIRECTORY.CODE LEFT OUTER JOIN\r\n                         INV_I" +
                "TEM_TYPE ON INV_ITEM_DIRECTORY.TYPE = INV_ITEM_TYPE.CODE LEFT OUTER JOIN\r\n      " +
                "                   INV_ITEM_CATEGORY ON INV_ITEM_DIRECTORY.CATEGORY = INV_ITEM_C" +
                "ATEGORY.CODE LEFT OUTER JOIN\r\n                         INV_ITEM_TM ON INV_ITEM_T" +
                "M.CODE = INV_ITEM_DIRECTORY.TRADEMARK LEFT OUTER JOIN\r\n                         " +
                "INV_UNIT ON INV_SALES_DTL.UOM = INV_UNIT.CODE LEFT OUTER JOIN\r\n                 " +
                "        INV_ITEM_GROUP ON INV_ITEM_DIRECTORY.[GROUP] = INV_ITEM_GROUP.CODE LEFT " +
                "OUTER JOIN\r\n                         SYS_DOC_TYPE ON SYS_DOC_TYPE.CODE = INV_SAL" +
                "ES_HDR.DOC_TYPE\r\nWHERE        (INV_ITEM_DIRECTORY.[GROUP] LIKE \'%\' + @group + \'%" +
                "\') AND (INV_ITEM_DIRECTORY.CATEGORY LIKE \'%\' + @category + \'%\') AND \r\n          " +
                "               (INV_ITEM_DIRECTORY.TRADEMARK LIKE \'%\' + @trademark + \'%\') AND (I" +
                "NV_SALES_HDR.CUSTOMER_CODE LIKE \'%\' + @cus + \'%\') AND \r\n                        " +
                " (INV_ITEM_DIRECTORY.TYPE LIKE \'%\' + @type + \'%\') AND (INV_SALES_HDR.DOC_TYPE LI" +
                "KE \'%\' + @stype + \'%\') AND (INV_SALES_HDR.FLAGDEL = \'True\') AND \r\n              " +
                "           (INV_SALES_HDR.DOC_DATE_GRE >= @date) AND (INV_SALES_HDR.DOC_DATE_GRE" +
                " <= @date2) AND (INV_SALES_HDR.SALE_TYPE LIKE \'%\' + @doc + \'%\')AND ( INV_SALES_D" +
                "TL.ITEM_DESC_ENG LIKE \'%\' + @item + \'%\')\r\nGROUP BY INV_SALES_HDR.DOC_ID, INV_SAL" +
                "ES_HDR.DOC_DATE_GRE, INV_SALES_DTL.ITEM_CODE, INV_SALES_DTL.ITEM_DESC_ENG, INV_I" +
                "TEM_DIRECTORY.TYPE, \r\n                         INV_SALES_HDR.TAX_TOTAL, INV_ITEM" +
                "_TYPE.DESC_ENG, INV_ITEM_CATEGORY.DESC_ENG, INV_ITEM_TM.DESC_ENG, INV_ITEM_GROUP" +
                ".DESC_ENG, \r\n                         INV_SALES_HDR.DOC_TYPE, INV_SALES_DTL.UOM," +
                " INV_SALES_DTL.GROSS_TOTAL, INV_ITEM_DIRECTORY.[GROUP], INV_ITEM_DIRECTORY.CATEG" +
                "ORY, \r\n                         INV_ITEM_DIRECTORY.TRADEMARK, INV_UNIT.DESC_ENG," +
                " INV_SALES_HDR.CUSTOMER_CODE, SYS_DOC_TYPE.DESC_ENG, INV_SALES_HDR.DOC_NO, \r\n   " +
                "                      INV_SALES_HDR.CUSTOMER_NAME_ENG, INV_SALES_HDR.DISCOUNT, I" +
                "NV_SALES_HDR.SALE_TYPE";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@group", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "GROUP", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@category", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "CATEGORY", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@trademark", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TRADEMARK", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@cus", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "CUSTOMER_CODE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@type", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@stype", global::System.Data.SqlDbType.NVarChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "DOC_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@date", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@date2", global::System.Data.SqlDbType.SmallDateTime, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Date", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@doc", global::System.Data.SqlDbType.NVarChar, 3, global::System.Data.ParameterDirection.Input, 0, 0, "SALE_TYPE", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@item", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillDataOnHDR(SalesReportDatasetOnHDR.DataTable1DataTable dataTable, string group, string category, string trademark, string cus, string type, string item1, string doc, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((item1 == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(item1));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(doc));
            }
            if ((item == null)) {
                throw new global::System.ArgumentNullException("item");
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(item));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual SalesReportDatasetOnHDR.DataTable1DataTable GetDataOnHDR(string group, string category, string trademark, string cus, string type, string item1, string doc, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((item1 == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(item1));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(doc));
            }
            if ((item == null)) {
                throw new global::System.ArgumentNullException("item");
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(item));
            }
            SalesReportDatasetOnHDR.DataTable1DataTable dataTable = new SalesReportDatasetOnHDR.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDataDate(SalesReportDatasetOnHDR.DataTable1DataTable dataTable, string group, string category, string trademark, string cus, string type, string doc, string item, global::System.Nullable<global::System.DateTime> date, global::System.Nullable<global::System.DateTime> date2) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(doc));
            }
            if ((item == null)) {
                throw new global::System.ArgumentNullException("item");
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(item));
            }
            if ((date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((System.DateTime)(date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((date2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[8].Value = ((System.DateTime)(date2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SalesReportDatasetOnHDR.DataTable1DataTable GetDataByDataDate(string group, string category, string trademark, string cus, string type, string doc, string item, global::System.Nullable<global::System.DateTime> date, global::System.Nullable<global::System.DateTime> date2) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(doc));
            }
            if ((item == null)) {
                throw new global::System.ArgumentNullException("item");
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(item));
            }
            if ((date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((System.DateTime)(date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((date2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[8].Value = ((System.DateTime)(date2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            SalesReportDatasetOnHDR.DataTable1DataTable dataTable = new SalesReportDatasetOnHDR.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByDeletedInvoice(SalesReportDatasetOnHDR.DataTable1DataTable dataTable, string group, string category, string trademark, string cus, string type, string doc) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(doc));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SalesReportDatasetOnHDR.DataTable1DataTable GetDataBy(string group, string category, string trademark, string cus, string type, string doc) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(doc));
            }
            SalesReportDatasetOnHDR.DataTable1DataTable dataTable = new SalesReportDatasetOnHDR.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByitem(SalesReportDatasetOnHDR.DataTable1DataTable dataTable, string group, string category, string item1, string trademark, string cus, string type, string doc) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((item1 == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(item1));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(type));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(doc));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SalesReportDatasetOnHDR.DataTable1DataTable GetDataByitem(string group, string category, string item1, string trademark, string cus, string type, string doc) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((item1 == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(item1));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(type));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(doc));
            }
            SalesReportDatasetOnHDR.DataTable1DataTable dataTable = new SalesReportDatasetOnHDR.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByOnHDRDate(SalesReportDatasetOnHDR.DataTable1DataTable dataTable, string group, string category, string trademark, string cus, string type, string doc, global::System.Nullable<global::System.DateTime> date, global::System.Nullable<global::System.DateTime> date2) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(doc));
            }
            if ((date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((date2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((System.DateTime)(date2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SalesReportDatasetOnHDR.DataTable1DataTable GetDataByHDRDate(string group, string category, string trademark, string cus, string type, string doc, global::System.Nullable<global::System.DateTime> date, global::System.Nullable<global::System.DateTime> date2) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(doc));
            }
            if ((date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((date2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((System.DateTime)(date2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            SalesReportDatasetOnHDR.DataTable1DataTable dataTable = new SalesReportDatasetOnHDR.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySaleType(SalesReportDatasetOnHDR.DataTable1DataTable dataTable, string group, string category, string trademark, string cus, string type, string item1, string stype, string doc) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((item1 == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(item1));
            }
            if ((stype == null)) {
                throw new global::System.ArgumentNullException("stype");
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(stype));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(doc));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SalesReportDatasetOnHDR.DataTable1DataTable GetDataBySaleType(string group, string category, string trademark, string cus, string type, string item1, string stype, string doc) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((item1 == null)) {
                this.Adapter.SelectCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(item1));
            }
            if ((stype == null)) {
                throw new global::System.ArgumentNullException("stype");
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = ((string)(stype));
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = ((string)(doc));
            }
            SalesReportDatasetOnHDR.DataTable1DataTable dataTable = new SalesReportDatasetOnHDR.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySaleTypeDate(SalesReportDatasetOnHDR.DataTable1DataTable dataTable, string group, string category, string trademark, string cus, string type, string stype, global::System.Nullable<global::System.DateTime> date, global::System.Nullable<global::System.DateTime> date2, string doc, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((stype == null)) {
                throw new global::System.ArgumentNullException("stype");
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(stype));
            }
            if ((date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((date2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((System.DateTime)(date2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(doc));
            }
            if ((item == null)) {
                throw new global::System.ArgumentNullException("item");
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = ((string)(item));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual SalesReportDatasetOnHDR.DataTable1DataTable GetDataBySaleTypeDate(string group, string category, string trademark, string cus, string type, string stype, global::System.Nullable<global::System.DateTime> date, global::System.Nullable<global::System.DateTime> date2, string doc, string item) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((group == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(group));
            }
            if ((category == null)) {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(category));
            }
            if ((trademark == null)) {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(trademark));
            }
            if ((cus == null)) {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(cus));
            }
            if ((type == null)) {
                this.Adapter.SelectCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(type));
            }
            if ((stype == null)) {
                throw new global::System.ArgumentNullException("stype");
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(stype));
            }
            if ((date.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[6].Value = ((System.DateTime)(date.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((date2.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[7].Value = ((System.DateTime)(date2.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((doc == null)) {
                this.Adapter.SelectCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[8].Value = ((string)(doc));
            }
            if ((item == null)) {
                throw new global::System.ArgumentNullException("item");
            }
            else {
                this.Adapter.SelectCommand.Parameters[9].Value = ((string)(item));
            }
            SalesReportDatasetOnHDR.DataTable1DataTable dataTable = new SalesReportDatasetOnHDR.DataTable1DataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateUpdatedRows(SalesReportDatasetOnHDR dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateInsertedRows(SalesReportDatasetOnHDR dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private int UpdateDeletedRows(SalesReportDatasetOnHDR dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public virtual int UpdateAll(SalesReportDatasetOnHDR dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591